---
title: "ComplexHeatmap"
date: 2023-04-3
categories:
  - complexheatmap
  - unsupervised
  - multivariate
# image: plot.png
draft: true
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(
    # fig.width = 6, 
    # fig.height = 3.8,
    # fig.align = "center", 
    # fig.retina = 3,
    # out.width = "85%", 
    collapse = TRUE
)
```


```{r}
# if (!requireNamespace("BiocManager", quietly=TRUE))
#     install.packages("BiocManager")
# BiocManager::install("ComplexHeatmap")

# library(ComplexHeatmap)
# library(RColorBrewer)
# library(circlize)
# library(digest)
# library(cluster)
# library(tidyverse)

```

### Make simple heatmap

```{r}
# ### Fetch data
# tmpfile <- tempfile()
# download.file('https://github.com/kevinblighe/E-MTAB-6141/raw/master/rdata/mat.tsv',
#   tmpfile, method = 'auto')
# mat <- read.table(tmpfile, sep = '\t', row.names = 1,
#   header = TRUE, stringsAsFactors = FALSE)

# tmpfile <- tempfile()
# download.file('https://github.com/kevinblighe/E-MTAB-6141/raw/master/rdata/metadata.tsv',
#   tmpfile, method = 'auto')
# metadata <- read.table(tmpfile, sep = '\t', row.names = 1,
#   header = TRUE, stringsAsFactors = FALSE)

# tmpfile <- tempfile()
# download.file('https://github.com/kevinblighe/E-MTAB-6141/raw/master/rdata/sig_genes.list',
#   tmpfile, method = 'auto')
# sig_genes <- read.table(tmpfile, sep = '\t',
#   header = FALSE, stringsAsFactors = FALSE)[,1]
```

```{r}
# digest::digest(mat, algo = 'md5')
# digest::digest(metadata, algo = 'md5')
# digest::digest(sig_genes, algo = 'md5')
```


```{r}
# dimensions of expression data and metadata, and length of sig_genes
# dim(mat)
# first 5 rows; first 5 columns
# mat[1:5,1:5]
# head(metadata)
# take a peek at the genes identified as statistically significant
# head(sig_genes)
# length(sig_genes)
# verify integrity of metadata and expression matrix:
# --check that both objects are aligned by name
# all(rownames(metadata) == colnames(mat))
```
### Generate heatmap


```{r}
### 1. scale the data to Z-scores (by row)
### standard when performing clustering and generating a heatmap
# heat <- t(scale(t(mat)))
# ### 2. set colour scheme and choose breaks
# myCol <- colorRampPalette(c('dodgerblue', 'black', 'yellow'))(100)
# myBreaks <- seq(-3, 3, length.out = 100)
```

```{r}
# ### create annotation: histo-pathotype and histology scores
#   # CD3
#     cd3 <- metadata$CD3
#     cd3 <- cd3[!is.na(cd3)] # remove missing values - we don't want to include these in the mapping
#     pick.col <- brewer.pal(9, 'Greens')
#     col.cd3 <- colorRampPalette(pick.col)(length(unique(cd3)))

#   # CD20
#     cd20 <- metadata$CD20
#     cd20 <- cd20[!is.na(cd20)]
#     pick.col <- brewer.pal(9, 'Blues')
#     col.cd20 <- colorRampPalette(pick.col)(length(unique(cd20)))

#   # CD68L
#     cd68L <- metadata$CD68L
#     cd68L <- cd68L[!is.na(cd68L)]
#     pick.col <- brewer.pal(9, 'Reds')
#     col.cd68L <- colorRampPalette(pick.col)(length(unique(cd68L)))

#   # CD68SL
#     cd68SL <- metadata$CD68SL
#     cd68SL <- cd68L[!is.na(cd68L)]
#     pick.col <- brewer.pal(9, 'Oranges')
#     col.cd68SL <- colorRampPalette(pick.col)(length(unique(cd68SL)))

#   # CD138
#     cd138 <- metadata$CD138
#     cd138 <- cd138[!is.na(cd138)]
#     pick.col <- brewer.pal(9, 'Purples')
#     col.cd138 <- colorRampPalette(pick.col)(length(unique(cd68SL)))
# ```

# ```{r}
#   # Create an initial data-frame of the annotation that we want to use
#   # In this example, the 'ann' object turns out to be the exact same as 'metadata'
#   ann <- data.frame(
#     Pathotype = metadata$Pathotype,
#     CD3 = metadata$CD3,
#     CD20 = metadata$CD20,
#     CD68L = metadata$CD68L,
#     CD68SL = metadata$CD68SL,
#     CD138 = metadata$CD138,
#     stringsAsFactors = FALSE)

#   # create the colour mapping
#   colours <- list(
#     Pathotype = c('Lymphoid' = 'blue', 'Myeloid' = 'red', 'Fibroid' = 'green3', 'Ungraded' = 'grey'),
#     CD3 = c('0' = '#F7FCF5', '1' = '#C7E9C0', '2' = '#74C476', '3' = '#238B45', '4' = '#00441B'),
#     CD20 = c('0' = '#F7FBFF', '1' = '#C6DBEF', '2' = '#6BAED6', '3' = '#2171B5', '4' = '#08306B'),
#     CD68L = c('0' = '#FFF5F0', '1' = '#FCBBA1', '2' = '#FB6A4A', '3' = '#CB181D', '4' = '#67000D'),
#     CD68SL = c('0' = '#FFF5EB', '1' = '#FDD0A2', '2' = '#FD8D3C', '3' = '#D94801', '4' = '#7F2704'),
#     CD138 = c('0' = '#FCFBFD', '1' = '#DADAEB', '2' = '#9E9AC8', '3' = '#6A51A3', '4' = '#3F007D'))

#   # now create the ComplexHeatmap annotation object
#   # as most of these parameters are self-explanatory, comments will only appear where needed
#   colAnn <- HeatmapAnnotation(
#     df = ann,
#     which = 'col', # 'col' (samples) or 'row' (gene) annotation?
#     na_col = 'white', # default colour for any NA values in the annotation data-frame, 'ann'
#     col = colours,
#     annotation_height = 0.6,
#     annotation_width = unit(1, 'cm'),
#     gap = unit(1, 'mm'),
#     annotation_legend_param = list(
#       Pathotype = list(
#         nrow = 4, # number of rows across which the legend will be arranged
#         title = 'Pathotype',
#         title_position = 'topcenter',
#         legend_direction = 'vertical',
#         title_gp = gpar(fontsize = 12, fontface = 'bold'),
#         labels_gp = gpar(fontsize = 12, fontface = 'bold')),
#       CD3 = list(
#         nrow = 5,
#         title = 'CD3',
#         title_position = 'topcenter',
#         legend_direction = 'vertical',
#         title_gp = gpar(fontsize = 12, fontface = 'bold'),
#         labels_gp = gpar(fontsize = 12, fontface = 'bold')),
#       CD20 = list(
#         nrow = 5,
#         title = 'CD20',
#         title_position = 'topcenter',
#         legend_direction = 'vertical',
#         title_gp = gpar(fontsize = 12, fontface = 'bold'),
#         labels_gp = gpar(fontsize = 12, fontface = 'bold')),
#       CD68L = list(
#         nrow = 5,
#         title = 'CD68L',
#         title_position = 'topcenter',
#         legend_direction = 'vertical',
#         title_gp = gpar(fontsize = 12, fontface = 'bold'),
#         labels_gp = gpar(fontsize = 12, fontface = 'bold')),
#       CD68SL = list(
#         nrow = 5,
#         title = 'CD68SL',
#         title_position = 'topcenter',
#         legend_direction = 'vertical',
#         title_gp = gpar(fontsize = 12, fontface = 'bold'),
#         labels_gp = gpar(fontsize = 12, fontface = 'bold')),
#       CD138 = list(
#         nrow = 5,
#         title = 'CD138',
#         title_position = 'topcenter',
#         legend_direction = 'vertical',
#         title_gp = gpar(fontsize = 12, fontface = 'bold'),
#         labels_gp = gpar(fontsize = 12, fontface = 'bold'))))
```


```{r}
#   boxplotCol <- HeatmapAnnotation(
#     boxplot = anno_boxplot(
#       heat,
#       border = FALSE,
#       gp = gpar(fill = '#CCCCCC'),
#       pch = '.',
#       size = unit(2, 'mm'),
#       axis = TRUE,
#       axis_param = list(
#         gp = gpar(fontsize = 12),
#         side = 'left')),
#       annotation_width = unit(c(2.0), 'cm'),
#       which = 'col')

#   boxplotRow <- HeatmapAnnotation(
#     boxplot = row_anno_boxplot(
#       heat,
#       border = FALSE,
#       gp = gpar(fill = '#CCCCCC'),
#       pch = '.',
#       size = unit(2, 'mm'),
#       axis = TRUE,
#       axis_param = list(
#         gp = gpar(fontsize = 12),
#         side = 'top')),
#       annotation_width = unit(c(2.0), 'cm'),
#       which = 'row')
# ```

# ```{r}
#   genelabels <- rowAnnotation(
#     Genes = anno_mark(
#       at = seq(1, nrow(heat), 40),
#       labels = rownames(heat)[seq(1, nrow(heat), 40)],
#       labels_gp = gpar(fontsize = 10, fontface = 'bold'),
#       padding = 0.75),
#       width = unit(2.0, 'cm') +

#       max_text_width(
#         rownames(heat)[seq(1, nrow(heat), 40)],
#         gp = gpar(fontsize = 10,  fontface = 'bold')))
# ```

# ```{r}
#   pamClusters <- cluster::pam(heat, k = 4) # pre-select k = 4 centers
#   pamClusters$clustering <- paste0('Cluster ', pamClusters$clustering)

#   # fix order of the clusters to have 1 to 4, top to bottom
#   pamClusters$clustering <- factor(pamClusters$clustering,
#     levels = c('Cluster 1', 'Cluster 2', 'Cluster 3', 'Cluster 4'))
```
### Reference

1. [A simple tutorial for a complex ComplexHeatmap](https://github.com/kevinblighe/E-MTAB-6141)
2. [ComplexHeatmap Complete Reference](https://jokergoo.github.io/ComplexHeatmap-reference/book/)
