{
  "hash": "75309d1317497896012220381761a075",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Programming\ndate: 2020-09-09\ntitle-block-banner: \"#212529\"\ndate-modified: last-modified\npublished-title: Last updated\ntoc: true\ntoc-location: left\ntoc-title: \"Contents\"\nexecute:\n    eval: false\n---\n\n\n\n# R\n## Basic concepts\n\n### Data structure\n\n![](R_data_structure.png)\n\n### General functions\n\n```r\ndir()                            # Show the directory\ngetwd()                          # Check working directory\nsetwd()                          # Change working directory\ndata()                           # Load built-in dataset\nview()                           # View the entire dataset\ntail()                           # Just show the last 6 rows\nclass()                          # Check the class of an R object\nstr()                            # Display internal structure of an R object\nlength()                         # Give length of a vector\ndim()                            # View the number of rows and columns of a matrix or a data frame\nnames()                          # List names of variables in a data frame\nset.seed()                       # Generate random number seed to make sure the results do not change.\nls()                             # list the variables in the workspace\nrm()                             # remove the variable from workspace\nrm(list = ls())                  # remove all the variables from the workspace\nlist.files()                     # List the filename under specific directory\n.libPaths()                      # R installation site\nhelp(package=\"\")                 # Check the functions of R library\nsystem.file(package=“dagdata”)   # Extract the location of package\ncolnames(installed.packages())   # list the installed packages\n```\n\n## Best practise for R coding\n\n- Variables = my_variable\n- Functions = RunThisStuffs()\n- Constants = CONSTANTS\n- Use 4 spaces (and not tab) for indentations\n- Always writing documentation above function definition\n- A function should not be longer than one screen\n- Avoid using for loop, learn lapply and vector operations\n- Never ever use hard-coded variables in functions\n- `### ======` to divide function blocks\n- `### ------` to divide parts in a function\n- Name and style code consistently\n- `rm(list =ls())` and `gc()` to tidy up its memory\n- Don't save a session history\n- Keep track of `sessionInfo()` in project folder\n- Use version control\n\n## ggplot2 Variable repacement\n\n`!!as.name()`, `get()`, `!!sym()`, `.data[[]]`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ndata <- data.frame(\n  x = c(1, 2, 3, 4),\n  y = c(10, 20, 30, 40),\n  group = c(\"A\", \"A\", \"B\", \"B\")\n)\n\ncolor_var <- \"group\"\nggplot(data, aes(x = x, y = y, color = !!as.name(color_var))) +\n  geom_point()\n  \nggplot(data, aes(x = x, y = y, color = get(color_var))) +\n  geom_point()\n\n\nggplot(data, aes(x = x, y = y, color = !!sym(color_var))) +\n  geom_point()\n\nggplot(data, aes(x = x, y = y, color = .data[[color_var]])) +\n  geom_point()\n```\n:::\n\n## Reference\n\n- [An Introduction to Statistical Learning](https://www.statlearning.com/)\n- [R for Data Science (2e)](https://r4ds.hadley.nz/)\n- [R Graphics Cookbook, 2nd edition](https://r-graphics.org/)\n- [Advanced R](https://adv-r.hadley.nz/)\n- [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/)\n- [Functional Programming](https://dcl-prog.stanford.edu/)\n- [The Epidemiologist R Handbook](https://epirhandbook.com/en/)\n- [Modern Statistics for Modern Biology](https://web.stanford.edu/class/bios221/book/)\n- [Data Analysis and Prediction Algorithms with R](http://rafalab.dfci.harvard.edu/dsbook/)\n- [Bioinformatics Training & Education Program](https://bioinformatics.ccr.cancer.gov/btep/)\n- [Saving R Graphics across OSs](https://www.jumpingrivers.com/blog/r-graphics-cairo-png-pdf-saving/)\n- [Tutorial on Advanced Stats and Machine Learning with R](http://r-statistics.co/)\n- [Publication ready plots using ggpubr](https://jeweljohnsonj.github.io/jeweljohnson.github.io/project7.html)\n- [datanovia](https://www.datanovia.com/en/)\n- [Data Analysis in Genome Biology](https://girke.bioinformatics.ucr.edu/GEN242/)\n- [Data Viz with Python and R](https://datavizpyr.com/category/r/)\n- [PH525x series - Biomedical Data Science](http://genomicsclass.github.io/book/)\n\n# Python\n\n## Basic concepts\n\n### Data structure\n\n![](python_types.png)\n\n### Variable\n\n- `Number`\n- `String`\n- `Tuple`\n- `List`: Mutable, container\n- `Dictionary`: Mutable, container\n- `Set`: Mutable, container\n- `None`: empty value\n\n```python\ntuple = (1, 2, 3)\nlist = [1, 2, 3]\ndict = {\"ele1\":1, \"ele2\":2, \"ele3\":3}\n```\n### Operators\n\nNumerical Operators:\n- `< ` : less than\n- `> ` : greater than\n- `<=` : less than or equal to\n- `>=` : greater than or equal to\n- `==` : equal to\n- `!=` : not equal to\n\nString Operators:\n- `==` : equal to\n- `!=` : not equal to\n\nLogical Operators:\n- and\n- or\n- not\n\n### Conditional execution\n\nConditional execution in Python is achieved using the if/else construct (if and else are reserved words).\n\n```python\n# Conidtional execution\nx = 10\nif x > 10:\n    print(\"I am a big number\")\nelse:\n    print(\"I am a small number\")\n\n# Multi-way if/else\nx = 10\nif x > 10:\n    print(\"I am a big number\")\nelif x > 5:\n    print(\"I am kind of small\")\nelse:\n    print(\"I am really number\")\n```\n\n### Iteration/Lopps\n\nTwo looping constructs in Python\n\n- `For` : used when the number of possible iterations (repetitions) are known in advance\n\n- `While`: used when the number of possible iterations (repetitions) can not be defined in advance. Can lead to infinite loops, if conditions are not handled properly\n\n```python\nfor customer in [“John”, “Mary”, “Jane”]:\n\tprint(“Hello ”, customer)\n\tprint(“Please pay”)\n\tcollectCash()\n\tgiveGoods()\n\nhour_of_day = 9\nwhile hour_of_day < 17:\n\tmoveToWarehouse()\n\tlocateGoods()\n\tmoveGoodsToShip()\n\thour_of_day = getCurrentTime()\n```\nWhat happens if you need to stop early? We use the `break` keyword to do this.\n\nIt stops the iteration immediately and moves on to the statement that follows the looping\n\n```python\nwhile hour_of_day < 17:\n\tif shipIsFull() == True:\n\t\tbreak\n\tmoveToWarehouse()\n\tlocateGoods()\n\tmoveGoodsToShip()\n\thour_of_day = getCurrentTime()\ncollectPay()\n``` \nWhat happens when you want to just skip the rest of the steps? We can use the `continue` keyword for this.\n\nIt skips the rest of the steps but moves on to the next iteration.\n\n```python\nfor customer in [\"John\", \"Mary\", \"Jane\"]:\n\tprint(“Hello ”, customer)\n\tprint(“Please pay”)\n\tpaid = collectCash()\n\tif paid == false:\n\t\tcontinue\n\tgiveGoods()\n```\n### Exceptions\n- Exceptions are errors that are found during execution of the Python program.\n- They typically cause the program to fail.\n- However we can handle them using the ‘try/except’ construct.\n\n```python\nnum = input(\"Please enter a number: \")\ntry:\n\tnum = int(num)\n\tprint(\"number squared is \" + str(num**2))\nexcept:\n\tprint(\"You did not enter a valid number\")\n```\n### General functions\n\n```python\nhelp()\ntype()\nlen() \nrange()\nlist()      \ntuple()\ndict()\n```\n\n## Reference\n\n- https://www.py4e.com/\n- https://omgenomics.com/\n- https://www.coursera.org/learn/bioinformatics\n- http://do1.dr-chuck.com/pythonlearn/EN_us/pythonlearn.pdf\n- https://www.py4e.com/html3\n- http://do1.dr-chuck.com/pythonlearn/EN_us/pythonlearn.epub\n- [Primer on Python for R Users](https://cran.r-project.org/web/packages/reticulate/vignettes/python_primer.html)\n\n# Conda\n\n```bash\n#| eval: false\n\n# Init\nconda init --all\n\n# Use mamba for faster solving\nconda update -n base conda\nconda install -n base conda-libmamba-solver\n\n# Config\nconda config --set solver libmamba\nconda config --set always_yes true\nconda config --set auto_activate_base false\n\n# Setup channels\nconda config --add channels bioconda\nconda config --add channels conda-forge\n#conda config --set channel_priority strict\n\n# Install software from a specific channle\nconda install -c conda-forge numpy\n\n# Create R environment\nconda create -n renv r-4.3 r-languageserver r-tidyverse r-irkernel r-httpgd\n\nconda install conda-forge::r-qs       \n# Remove a specific environment\nconda remove --name my_env --all\n\n# Remove a software in a environment\nconda remove --name my_env package_name\n\n# Export and save the conda env file with all software information\nconda env export -n renv > renv.yml\nconda env create -f renv.yml\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}