{
  "hash": "e89aa9f78c63a235f1d4d21a15e061de",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Python Programming\ndate: 2020-09-09\ntitle-block-banner: \"#212529\"\ndate-modified: last-modified\npublished-title: Last updated\ntoc: true\ntoc-location: left\ntoc-title: \"Contents\"\njupyter: python3\nexecute:\n    eval: false\n---\n\n# Data types\n\nin Python, understanding data types and structures is essential for writting\neffective code. Data types determine the kind of data a variable can hold,\nwhile data structures allow you to organize and manage that data efficiently.\n\n- Numbers: Represent numerical values, including integers and floating-point numbers.\n- Strings: Represent sequences of characters, used for text manipulation.\n- Booleans: Represent truth values, either True or False.\n- Lists: Ordered collections of items, allowing for duplicate values and mutable operations.\n- Tuples: Ordered collections of items, similar to lists but immutable.\n- Dictionaries: Unordered, Key-value pairs that allow for efficient data retrieval based on unique keys.\n- Sets: Unordered collections of unique items, useful for membership testing and eliminating duplicates.\n\n::: {#b8aadef7 .cell execution_count=1}\n``` {.python .cell-code}\n# Numbers and strings\ninteger_num = 42\nfloat_num = 3.14\nstring_text = \"Hello, Python!\"\n\n# List: mutable, ordered collection\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# Tuple: immutable, ordered collection\ndimensions = (1920, 1080)\n\n# Dictionary: unordered, key-value pairs\nperson = {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\n\n# Set: unordered collection of unique items\nunique_numbers = {1, 2, 3, 4, 5}\n\nprint(\"Integer:\", integer_num)\nprint(\"Float:\", float_num)\nprint(\"String:\", string_text)\nprint(\"List of fruits:\", fruits)\nprint(\"Tuple of dimensions:\", dimensions)\nprint(\"Dictionary of person:\", person)\nprint(\"Set of unique numbers:\", unique_numbers)\n```\n:::\n\n\n# Control flow and Loops\nControl flow in Python allows you to make decisions and execute different blocks of code based on conditions. \nLoops enable you to repeat a block of code multiple times.\n\nBest practices for control flow and loops include:\n- Keep conditions simple and clear. Break down complex conditions into smaller parts.\n- Use meaningful variable names to enhance readability.\n- Avoid deeply nested loops and conditions to maintain code clarity.\n- Use comments to explain the purpose of complex conditions or loops.\n- Test edge cases to ensure your control flow behaves as expected.\n\n::: {#f23d3838 .cell execution_count=2}\n``` {.python .cell-code}\n# Conditional statements\nx = 10\nif x > 5:\n    print(\"x is greater than 5\")\nelif x == 5:\n    print(\"x is equal to 5\")\nelse:\n    print(\"x is less than 5\")\n\n# For loop: iterating over a list\nfor i in range(5):\n    print(\"Iteration:\", i)\n\n# While loop: continues until a condition is met\ncount = 0\nwhile count < 5:\n    print(\"Count is:\", count)\n    count += 1\n```\n:::\n\n\n# Python for R users\n\n## Install and libraries\n\n::: {#f5eb2bdb .cell execution_count=3}\n``` {.python .cell-code}\npython3 -m pip install pandas\n```\n:::\n\n\n::: {#5f544bda .cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib as plt\n\n## Use a function from library, first specify the library nickname and then \n## the function name, separated by a dot:\nnp.log(7)\n```\n:::\n\n\n```{r}\nlibrary(dplyr)\n```\n\n## Pandas data frame\n\nThe syntax for the python involves a single argument corresponding to a type of object called a dictionary (a dictionary is defined with curly brackets) whose named entries each contain a python list ([1,2,3,4] and [5,6,7,8]) of the values that will form a column.\n\n::: {#3699e139 .cell execution_count=5}\n``` {.python .cell-code}\ndf = pd.DataFrame(\n    {\n        'a': [1,2,3,4],\n        'b': [5,6,7,8]\n    }\n)\nprint(df)\n```\n:::\n\n\n### Variable\n\n- `Number`\n- `String`\n- `Tuple`\n- `List`: Mutable, container\n- `Dictionary`: Mutable, container\n- `Set`: Mutable, container\n- `None`: empty value\n\n```python\ntuple = (1, 2, 3)\nlist = [1, 2, 3]\ndict = {\"ele1\":1, \"ele2\":2, \"ele3\":3}\n```\n### Operators\n\nNumerical Operators:\n- `< ` : less than\n- `> ` : greater than\n- `<=` : less than or equal to\n- `>=` : greater than or equal to\n- `==` : equal to\n- `!=` : not equal to\n\nString Operators:\n- `==` : equal to\n- `!=` : not equal to\n\nLogical Operators:\n- and\n- or\n- not\n\n### Conditional execution\n\nConditional execution in Python is achieved using the if/else construct (if and else are reserved words).\n\n```python\n# Conidtional execution\nx = 10\nif x > 10:\n    print(\"I am a big number\")\nelse:\n    print(\"I am a small number\")\n\n# Multi-way if/else\nx = 10\nif x > 10:\n    print(\"I am a big number\")\nelif x > 5:\n    print(\"I am kind of small\")\nelse:\n    print(\"I am really number\")\n```\n\n### Iteration/Lopps\n\nTwo looping constructs in Python\n\n- `For` : used when the number of possible iterations (repetitions) are known in advance\n\n- `While`: used when the number of possible iterations (repetitions) can not be defined in advance. Can lead to infinite loops, if conditions are not handled properly\n\n```python\nfor customer in [“John”, “Mary”, “Jane”]:\n\tprint(“Hello ”, customer)\n\tprint(“Please pay”)\n\tcollectCash()\n\tgiveGoods()\n\nhour_of_day = 9\nwhile hour_of_day < 17:\n\tmoveToWarehouse()\n\tlocateGoods()\n\tmoveGoodsToShip()\n\thour_of_day = getCurrentTime()\n```\nWhat happens if you need to stop early? We use the `break` keyword to do this.\n\nIt stops the iteration immediately and moves on to the statement that follows the looping\n\n```python\nwhile hour_of_day < 17:\n\tif shipIsFull() == True:\n\t\tbreak\n\tmoveToWarehouse()\n\tlocateGoods()\n\tmoveGoodsToShip()\n\thour_of_day = getCurrentTime()\ncollectPay()\n``` \nWhat happens when you want to just skip the rest of the steps? We can use the `continue` keyword for this.\n\nIt skips the rest of the steps but moves on to the next iteration.\n\n```python\nfor customer in [\"John\", \"Mary\", \"Jane\"]:\n\tprint(“Hello ”, customer)\n\tprint(“Please pay”)\n\tpaid = collectCash()\n\tif paid == false:\n\t\tcontinue\n\tgiveGoods()\n```\n### Exceptions\n- Exceptions are errors that are found during execution of the Python program.\n- They typically cause the program to fail.\n- However we can handle them using the ‘try/except’ construct.\n\n```python\nnum = input(\"Please enter a number: \")\ntry:\n\tnum = int(num)\n\tprint(\"number squared is \" + str(num**2))\nexcept:\n\tprint(\"You did not enter a valid number\")\n```\n### General functions\n\n```python\nhelp()\ntype()\nlen() \nrange()\nlist()      \ntuple()\ndict()\n```\n\n# Reference\n\n- https://www.py4e.com/\n- https://omgenomics.com/\n- https://www.coursera.org/learn/bioinformatics\n- http://do1.dr-chuck.com/pythonlearn/EN_us/pythonlearn.pdf\n- https://www.py4e.com/html3\n- http://do1.dr-chuck.com/pythonlearn/EN_us/pythonlearn.epub\n- [Primer on Python for R Users](https://cran.r-project.org/web/packages/reticulate/vignettes/python_primer.html)\n- [An introduction to Python for R Users](https://rebeccabarter.com/blog/2023-09-11-from_r_to_python)\n- [Datanovia: Master Data Science, Machine Learning and Data Visualization with Python and R.](https://www.datanovia.com/)\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}