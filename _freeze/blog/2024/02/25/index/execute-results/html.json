{
  "hash": "aa5ea856ad2bcf82da89df9169d9f946",
  "result": {
    "markdown": "---\ntitle: \"Seurat V5 | Learning Single-cell RNA-seq data analysis from HBCtraining workshop\"\ndate: 2024-02-25\ndate-modified: last-modified\ncategories:\n  - seurat\n  - scrna\nimage: ./projects/scRNA-seq_online/img/scRNA-seq_cell_diversity.png\ndescription: All the learning materials are from credited or adapted from Harvard Chan Bioinformatics Core. \nexecute: \n  freeze: true\n\n---\n\n\n::: {.callout-note}\n!!!Note: All the contents are credited or adapted from [HBC Single-cell RNA-seq data analysis workshop](https://hbctraining.github.io/scRNA-seq_online/schedule/links-to-lessons.html) for leaning purpose.\n:::\n\n\n\n\n## Install and Load required packages\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# BiocManager::install(c(\"AnnotationHub\", \"ensembldb\", \"multtest\", \"glmGamPoi\"))\nlibrary(here)\nlibrary(fs)\nlibrary(httpgd)\nlibrary(Seurat)\nlibrary(SeuratData)\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(Matrix)\nlibrary(RCurl)\nlibrary(scales)\nlibrary(cowplot)\nlibrary(metap)\nlibrary(AnnotationHub)\nlibrary(ensembldb)\nlibrary(multtest)\nlibrary(glmGamPoi)\nlibrary(SingleCellExperiment)\n```\n:::\n\n\n## Introduction to single-cell RNA-seq\n\n### Why single-cell RNA-seq\n\nAcross human tissue there is an incredible diversity of cell cell types, states, and interactions. To better understand these tissues and the cell types present, single-cell RNA-seq (scRNA-seq) offers a glimpse into what genes are being expressed at the level of individual cells.\n\n<p align=\"center\">\n<img src=\"./projects/scRNA-seq_online/img/scRNA-seq_cell_diversity.png\" width=\"600\">\n</p>\n\nThis exciting and cutting-edge method can be used to:\n\n- explore which cell types are present in a tissue\n- identify unknown/rare cell types or states\n- elucidate the changes in gene expression during differentiation processes or across time or states\n- identify genes that are differentially expressed in particular cell types between conditions (e.g. treatment or disease)\n- explore changes in expression among a cell type while incorporating spatial, regulatory, and/or protein information\n\n### Challenges of scRNA-seq analysis\n\nDespite scRNA-seq being able to capture expression at the cellular level, sample generation and library preparation is more expensive and the analysis is much more complicated and more difficult to interpret. The complexity of analysis of scRNA-seq data involves:\n\n- Large volume of data\n- Low depth of sequencing per cell\n- Technical variability across cells/samples\n- Biological variability across cells/samples\n\n#### Large volumne of data\n\nExpression data from scRNA-seq experiments represent tens or hundreds of thousands of reads for thousands of cells. The data output is much larger, requiring higher amounts of memory to analyze, larger storage requirements, and more time to run the analyses.\n\n#### Low depth of sequencing per cell\n\nFor the droplet-based methods of scRNA-seq, the depth of sequencing is shallow, often detecting only 10-50% of the transcriptome per cell. This results in cells showing zero counts for many of the genes. However, in a particular cell, a zero count for a gene could either mean that the gene was *not being expressed* or the transcripts were just *not detected*. Across cells, genes with higher levels of expression tend to have fewer zeros. Due to this feature, many genes will not be detected in any cell and gene expression will be highly variable between cells.\n\n#### Biological variability across cells/samples\n\nUninteresting sources of biological variation can result in gene expression between cells being more similar/different than the actual biological cell types/states, which can obscure the cell type identities. Uninteresting sources of biological variation (unless part of the experiment’s study) include:\n\n\n- *Transcriptional bursting*: Gene transcription is not turned on all of the time for all genes. Time of harvest will determine whether gene is on or off in each cell.\n- *Varying rates of RNA processing*: Different RNAs are processed at different rates.\n- *Continuous or discrete cell identities* (e.g. the pro-inflammatory potential of each individual T cell): Continuous phenotypes are by definition variable in gene expression, and separating the continuous from the discrete can sometimes be difficult.\n- *Environmental stimuli*: The local environment of the cell can influence the gene expression depending on spatial position, signaling molecules, etc.\n- *Temporal changes*: Fundamental fluxuating cellular processes, such as cell cycle, can affect the gene expression profiles of individual cells.\n\n<p align=\"center\">\n<img src=\"./projects/scRNA-seq_online/img/sc_biol_variability.png\" width=\"500\">\n</p>\n\n#### Technical variability across cells/samples\n\nTechnical sources of variation can result in gene expression between cells being more similar/different based on technical sources instead of biological cell types/states, which can obscure the cell type identities. Technical sources of variation include:\n\n- *Cell-specific capture efficiency*: Different cells will have differing numbers of transcripts captured resulting in differences in sequencing depth (e.g. 10-50% of transcriptome).\n- *Library quality*: Degraded RNA, low viability/dying cells, lots of free floating RNA, poorly dissociated cells, and inaccurate quantitation of cells can result in low quality metrics\n- *Amplification bias*: During the amplification step of library preparation, not all transcripts are amplified to the same level.\n- *Batch effects*: Batch effects are a significant issue for scRNA-Seq analyses, since you can see significant differences in expression due solely to the batch effect.\n\n<p align=\"center\">\n<img src=\"./projects/scRNA-seq_online/img/batch_effect_pca.png\" width=\"600\">\n</p>\n\n*How to know whether you have batches?*\n\n   - Were all RNA isolations performed on the same day?\n   - Were all library preparations performed on the same day?\n   - Did the same person perform the RNA isolation/library preparation for all samples?\n   - Did you use the same reagents for all samples?\n   - Did you perform the RNA isolation/library preparation in the same location?\n\nIf any of the answers is ‘No’, then you have batches.\n\n*Best practices regarding batches:*\n\n- Design the experiment in a way to avoid batches, if possible.\n- if unable to avoid batches:\n\n\t- Do NOT confound your experiment by batch:\n\n    <img src=\"./projects/scRNA-seq_online/img/confounded_batch.png\" width=\"300\">\n\n\t- DO split replicates of the different sample groups across batches. The more replicates the better (definitely more than 2), if doing DE across conditions or making conclusions at the population level. If using inDrops, which prepares a single library at a time, alternate the sample groups (e.g. don’t prepare all control libraries first, then prepare all treatment libraries).\n\n    <img src=\"./projects/scRNA-seq_online/img/batch_effect.png\" width=\"300\">\n\n\t- DO include batch information in your experimental metadata. During the analysis, we can regress out variation due to batch or integrate across batches, so it doesn’t affect our results if we have that information.\n\n### Conclusions\n\nWhile scRNA-seq is a powerful and insightful method for the analysis of gene expression with single-cell resolution, there are many challenges and sources of variation that can make the analysis of the data complex or limited. Throughout the analysis of scRNA-seq data, we will try to account for or regress out variation due to the various sources of uninteresting variation in our data.\n\n\n*Overall, we recommend the following:*\n\n- Do not perform single-cell RNA-seq unless it is necessary for the experimental question of interest. Could you answer the question using bulk sequencing, which is simpler and less costly? Perhaps FACS sorting the samples could allow for bulk analysis?\n    Understand the details of the experimental question you wish to address. The recommended library preparation method and analysis workflow can vary based on the specific experiment.\n\n- Avoid technical sources of variability, if possible:\n\n\t- Discuss experimental design with experts prior to the initiation of the experiment\n\t- Isolate RNA from samples at same time\n\t- Prepare libraries at same time or alternate sample groups to avoid batch confounding\n\t- Do not confound sample groups by sex, age, or batch\n\n## Raw data to count matrix\n\nDepending on the library preparation method used, the RNA sequences (also referred to as reads or tags), will be derived either from the 3’ ends (or 5’ ends) of the transcripts (10X Genomics, CEL-seq2, Drop-seq, inDrops) or from full-length transcripts (Smart-seq).\n\nThe choice of method involves the biological question of interest. The following advantages are listed below for the methods:\n\n- **3' (or 5')-end sequencing:** \n\t- More accurate quantification through use of unique molecular identifiers distinguishing biological duplicates from amplification (PCR) duplicates\n\t- Larger number of cells sequenced allows better identity of cell type populations\n\t- Cheaper per cell cost\n\t- Best results with > 10,000 cells\n\n- **Full length sequencing:**\n\t- Detection of isoform-level differences in expression\n\t- Identification of allele-specific differences in expression\n\t- Deeper sequencing of a smaller number of cells \n\t- Best for samples with low number of cells\n\nMany of the same analysis steps need to occur for 3’-end sequencing as for full-length, but 3’ protocols have been increasing in popularity and consist of a few more steps in the analysis. Therefore, our materials are going to detail the analysis of data from these 3’ protocols with a focus on the droplet-based methods (inDrops, Drop-seq, 10X Genomics).\n\n### 3'-end reads (includes all droplet-based methods)\n\nFor the 3'-end sequencing methods, reads originating from different molecules of the same transcript would have originated only from the 3' end of the transcripts, so would have a high likelihood of having the same sequence. However, the PCR step during library preparation could also generate read duplicates. To determine whether a read is a biological or technical duplicate, these methods use unique molecular identifiers, or UMIs. \n\n- Reads with **different UMIs** mapping to the same transcript were derived from **different molecules** and are biological duplicates - each read should be counted.\n- Reads with the **same UMI** originated from the **same molecule** and are technical duplicates - the UMIs should be collapsed to be counted as a single read.\n- In image below, the reads for ACTB should be collapsed and counted as a single read, while the reads for ARL1 should each be counted.\n\n<p align=\"center\">\n<img src=\"./projects/scRNA-seq_online/img/umis.png\" width=\"600\">\n</p>\n\nSo we know that we need to keep track of the UMIs, but what other information do we need to properly quantify the expression in each gene in each of the cells in our samples? Regardless of droplet method, **the following are required for proper quantification at the cellular level**:\n\n<p align=\"center\">\n<img src=\"./projects/scRNA-seq_online/img/read_architecture.png\" width=\"800\">\n</p>\n\n- **Sample index**: determines which sample the read originated from (red bottom arrow)\n    - Added during library preparation - needs to be documented\n- **Cellular barcode**: determines which cell the read originated from (purple top arrow)\n    - Each library preparation method has a stock of cellular barcodes used during the library preparation\n- **Unique molecular identifier (UMI)**: determines which transcript molecule the read originated from\n    - The UMI will be used to collapse PCR duplicates (purple bottom arrow)\n- **Sequencing read1**: the Read1 sequence (red top arrow)\n- **Sequencing read2**: the Read2 sequence (purple bottom arrow)\n\n\n### Generation of count matrix\n\nWe are going to start by discussing the first part of this workflow, which is generating the count matrix from the raw sequencing data. We will focus on the 3' end sequencing used by droplet-based methods, such as inDrops, 10X Genomics, and Drop-seq.\n\n<p align=\"center\">\n<img src=\"./projects/scRNA-seq_online/img/sc_gen_matrix_workflow.png\" width=\"300\">\n</p>\n\nAfter sequencing, the sequencing facility will either output the raw sequencing data as **BCL or FASTQ format or will generate the count matrix**. If the reads are in BCL format, then we will need to convert to FASTQ format. There is a useful command-line tool called `bcl2fastq` that can easily perform this conversion. \n\n::: {.callout-note}\nWe do not demultiplex at this step in the workflow. You may have sequenced 6 samples, but the reads for all samples may be present all in the same BCL or FASTQ file.\n:::\n\nThe generation of the count matrix from the raw sequencing data will go through similar steps for many of the scRNA-seq methods. \n\n<img src=\"./projects/scRNA-seq_online/img/sc_pre-QC_workflow.png\" width=\"800\">\n\n## Quality Control\n\n### Explore the example dataset\n\nFor this workshop we will be working with a single-cell RNA-seq dataset which is part of a larger study from [Kang et al, 2017](https://www.nature.com/articles/nbt.4042). In this paper, the authors present a computational algorithm that harnesses genetic variation (eQTL) to determine the genetic identity of each droplet containing a single cell (singlet) and identify droplets containing two cells from different individuals (doublets).\n\n<p align=\"center\">\n<img src=\"./projects/scRNA-seq_online/img/kangetal_image.png\" width=\"700\">\n</p>\n\nThe data used to test their algorithm is comprised of pooled Peripheral Blood Mononuclear Cells (PBMCs) taken from eight lupus patients, split into control and interferon beta-treated (stimulated) conditions. \n\n<p align=\"center\">\n<img src=\"./projects/scRNA-seq_online/img/sc_workflow_2022.jpg\" width=\"630\">\n</p>\n\nEach step of this workflow has its own goals and challenges. For QC of our raw count data, they include:\n\n*Goals:*\n\n- To filter the data to only include true cells that are high quality, so that when we cluster our cells it is easier to identify distinct cell type populations.\n- To identify any failed samples and either try to salvage the data or remove from analysis, in addition to, trying to understand why the sample failed.\n\n*Challenges:*\n\n- Delineating cells that are poor quality from less complex cells.\n- Chossing appropriate thresholds for filtering, so as to keep high quality cells without removing biologically relevant cell types.\n\n*Recommendations:*\n\n- Have a good idea of your expectations for the cell types to be present prior to performing the QC. For instance, do you expect to have low complexity cells or cells with higher levels of mitochondrial expression in your sample? If so, then we need to account for this biology when assessing the quality of our data.\n\n### Generating quality metrics\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndir <- here(\"projects\", \"scRNA-seq_online\", \"data\", \"single_cell_rnaseq\")\n\n## Create a Seurat object for each sample\nfor (file in c(\"ctrl_raw_feature_bc_matrix\", \"stim_raw_feature_bc_matrix\")){\n        ## Read in 10X data for a single sample (output is a sparse matrix)\n        seurat_data <- Read10X(data.dir = paste0(dir, \"/data/\", file))\n\n        ## Turn count matrix into a Seurat object (output is a Seurat object)\n        seurat_obj <- CreateSeuratObject(counts = seurat_data, \n                                         min.features = 100, \n                                         project = file)\n        assign(file, seurat_obj)\n}\n\n## Create a merged Seurat object for multiple samples\nmerged_seurat <- merge(\n    x = ctrl_raw_feature_bc_matrix, \n    y = stim_raw_feature_bc_matrix, \n    add.cell.id = c(\"ctrl\", \"stim\")\n)\n\n## Explore the metadata\nhead(merged_seurat@meta.data)\n##                                       orig.ident nCount_RNA nFeature_RNA\n## ctrl_AAACATACAATGCC-1 ctrl_raw_feature_bc_matrix       2344          874\n## ctrl_AAACATACATTTCC-1 ctrl_raw_feature_bc_matrix       3125          896\n## ctrl_AAACATACCAGAAA-1 ctrl_raw_feature_bc_matrix       2578          725\n## ctrl_AAACATACCAGCTA-1 ctrl_raw_feature_bc_matrix       3261          979\n## ctrl_AAACATACCATGCA-1 ctrl_raw_feature_bc_matrix        746          362\n## ctrl_AAACATACCTCGCT-1 ctrl_raw_feature_bc_matrix       3519          866\n# View(merged_seurat@meta.data)\n```\n:::\n\n\nThere are three columns of information:\n- orig.ident: this often contains the sample identity if known, but will default to“SeuratProject”.\n- nCount_RNA: number of UMIs per cell.\n- nFeature_RNA: number of genes detected per cell.\n\nIn order to create the appropriate plots for the quality control analysis, we need to calculate some additional metrics. These include:\n\n- *number of genes detected per UMI:* this metric with give us an idea of the complexity of our dataset (more genes detected per UMI, more complex our data)\n- *mitochondrial ratio:* this metric will give us a percentage of cell reads originating from the mitochondrial genes\n\n\n### Novelty score\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Add number of genes per UMI for each cell to metadata\nmerged_seurat$log10GenesPerUMI <- log10(\n    merged_seurat$nFeature_RNA) / log10(merged_seurat$nCount_RNA\n)\n```\n:::\n\n\n### Mitochondrial Ratio\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Compute percent mito ratio\nmerged_seurat$mitoRatio <- PercentageFeatureSet(\n    object = merged_seurat, pattern = \"^MT-\"\n)\n\nmerged_seurat$mitoRatio <- merged_seurat@meta.data$mitoRatio / 100\n```\n:::\n\n### Additional metadata columns\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Create metadata dataframe\nmetadata <- merged_seurat@meta.data\n\n## Add cell IDs to metadata\nmetadata$cells <- rownames(metadata)\n\n## Create sample column\nmetadata$sample <- NA\nmetadata$sample[which(str_detect(metadata$cells, \"^ctrl_\"))] <- \"ctrl\"\nmetadata$sample[which(str_detect(metadata$cells, \"^stim_\"))] <- \"stim\"\n\n## Rename columns\nmetadata <- metadata |>\n    dplyr::rename(\n        seq_folder = orig.ident,\n        nUMI = nCount_RNA,\n        nGene = nFeature_RNA\n    )\n\n## Add metadata back to Seurat object\nmerged_seurat@meta.data <- metadata\n```\n:::\n\n\n### Assessing the quality metrics\n\nAssess various metrics and then decide on which cells are low quality and should be removed from the analysis:\n\n- Cell counts\n- UMI counts per cell\n- Genes detected per cell\n- Complexity (novelty score)\n- Mitochondrial counts ratio\n\n\n#### Cell counts\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Visualize the number of cell counts per sample\nmetadata |>  \n  \tggplot(aes(x=sample, fill=sample)) + \n  \tgeom_bar() +\n  \ttheme_classic() +\n  \ttheme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +\n  \ttheme(plot.title = element_text(hjust=0.5, face=\"bold\")) +\n  \tggtitle(\"NCells\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n#### UMI counts (transcripts) per cell\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Visualize the number UMIs/transcripts per cell\n# metadata |>  \n#   \tggplot(aes(color=sample, x=nUMI, fill= sample)) + \n#   \tgeom_density(alpha = 0.2) + \n#   \tscale_x_log10() + \n#   \ttheme_classic() +\n#   \tylab(\"Cell density\") +\n#   \tgeom_vline(xintercept = 500)\n```\n:::\n\n\n### Genes detected per cell\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Visualize the distribution of genes detected per cell via histogram\n# metadata |>  \n#   \tggplot(aes(color=sample, x=nGene, fill= sample)) + \n#   \tgeom_density(alpha = 0.2) + \n#   \ttheme_classic() +\n#   \tscale_x_log10() + \n#   \tgeom_vline(xintercept = 300)\n```\n:::\n\n\n### Complexity\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI (novelty score)\nmetadata |> \n  \tggplot(aes(x=log10GenesPerUMI, color = sample, fill=sample)) +\n  \tgeom_density(alpha = 0.2) +\n  \ttheme_classic() +\n  \tgeom_vline(xintercept = 0.8)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Mitochondrial counts ratio\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Visualize the distribution of mitochondrial gene expression detected per cell\nmetadata |> \n  \tggplot(aes(color=sample, x=mitoRatio, fill=sample)) + \n  \tgeom_density(alpha = 0.2) + \n  \tscale_x_log10() + \n  \ttheme_classic() +\n  \tgeom_vline(xintercept = 0.2)\n## Warning in scale_x_log10(): log-10 transformation introduced infinite values.\n## Warning: Removed 118 rows containing non-finite outside the scale range (`stat_density()`).\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Joint filtering effects\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs\nmetadata |> \n  \tggplot(aes(x=nUMI, y=nGene, color=mitoRatio)) + \n  \tgeom_point() + \n\tscale_colour_gradient(low = \"gray90\", high = \"black\") +\n  \tstat_smooth(method=lm) +\n  \tscale_x_log10() + \n  \tscale_y_log10() + \n  \ttheme_classic() +\n  \tgeom_vline(xintercept = 500) +\n  \tgeom_hline(yintercept = 250) +\n  \tfacet_wrap(~sample)\n## `geom_smooth()` using formula = 'y ~ x'\n## Warning: The following aesthetics were dropped during statistical transformation: colour.\n## ℹ This can happen when ggplot fails to infer the correct grouping structure in the data.\n## ℹ Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\n## The following aesthetics were dropped during statistical transformation: colour.\n## ℹ This can happen when ggplot fails to infer the correct grouping structure in the data.\n## ℹ Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Perform filtering\n\n#### Cell-level filtering\n\nOften the recommendations mentioned earlier are a rough guideline, and the specific experiment needs to inform the exact thresholds chosen. We will use the following thresholds:\n\n- nUMI > 500\n- nGene > 250\n- log10GenesPerUMI > 0.8\n- mitoRatio < 0.2\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Filter out low quality cells using selected thresholds - these will change with experiment\nfiltered_seurat <- subset(\n    x = merged_seurat,\n    subset = (nUMI >= 500) &\n        (nGene >= 250) &\n        (log10GenesPerUMI > 0.80) &\n        (mitoRatio < 0.20)\n)\n```\n:::\n\n\n#### Gene-level filtering\n\nWithin our data we will have many genes with zero counts. These genes can dramatically reduce the average expression for a cell and so we will remove them from our data. We will start by identifying which genes have a zero count in each cell:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Extract counts\nfiltered_seurat <- JoinLayers(filtered_seurat)\n\ncounts <- GetAssayData(object = filtered_seurat, layer = \"counts\")\n# counts <- LayerData(object = filtered_seurat, layer = \"counts\")\n\n## Output a logical matrix specifying for each gene on whether or not there are more than zero counts per cell\nnonzero <- counts > 0\n```\n:::\n\nNow, we will perform some filtering by prevalence. If a gene is only expressed in a handful of cells, it is not particularly meaningful as it still brings down the averages for all other cells it is not expressed in. For our data we choose to *keep only genes which are expressed in 10 or more cells*. By using this filter, genes which have zero counts in all cells will effectively be removed.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Sums all TRUE values and returns TRUE if more than 10 TRUE values per gene\nkeep_genes <- Matrix::rowSums(nonzero) >= 10\n\n# Only keeping those genes expressed in more than 10 cells\nfiltered_counts <- counts[keep_genes, ]\n\n# Reassign to filtered Seurat object\nfiltered_seurat <- CreateSeuratObject(\n    filtered_counts, meta.data = filtered_seurat@meta.data\n)\n\n## Save filtered cells\n# saveRDS(filtered_seurat, file = paste0(dir, \"/data/filtered_seurat.rds\"))\n# saveRDS(merged_seurat, file = paste0(dir, \"/data/merged_seurat.rds\"))\n```\n:::\n\n\n### Re-assess QC metrics\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Save filtered subset to new metadata\nmetadata_clean <- filtered_seurat@meta.data\n\nmetadata_list <- list(\n    before_filtering = metadata,\n    after_filtering  = metadata_clean\n)\n\nplots <- list()\nfor (i in names(metadata_list)) {\n    ## Cell counts\n    plots[[\"cell_counts\"]][[i]] <- metadata_list[[i]] |> \n        ggplot(aes(x = sample, fill = sample)) +\n        geom_bar() +\n        theme_classic() +\n        theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +\n        theme(plot.title = element_text(hjust = 0.5, face = \"bold\")) +\n        labs(title = paste(\"NCells\", i, sep = \"_\"))\n    \n    ## UMI counts\n    ## The filtering using a threshold of 500 has removed the cells with low numbers of UMIs from the analysis.\n    plots[[\"UMI_counts\"]][[i]] <- metadata_list[[i]] |> \n        ggplot(aes(color = sample, x = nUMI, fill = sample)) +\n        geom_density(alpha = 0.2) +\n        scale_x_continuous(limits = c(100, 10000), trans = \"log10\") +\n        theme_classic() +\n        geom_vline(xintercept = 500) +\n        # coord_fixed() +\n        labs(\n            title = paste(\"UMI\", i, sep = \"_\"), \n            y = \"Cell density\"\n        )\n        \n    ## Genes detected\n    plots[[\"genes_detected\"]][[i]] <- metadata_list[[i]] |>\n        ggplot(aes(color = sample, x = nGene, fill = sample)) +\n        geom_density(alpha = 0.2) +\n        theme_classic() +\n        scale_x_continuous(limits = c(100, 3000), trans = \"log10\") +\n        geom_vline(xintercept = 250) +\n        # coord_fixed() +\n        labs(title = paste(\"genes_detected\", i, sep = \"_\"))\n\n    ## Novelty/Complexity\n    plots[[\"overall_complexity\"]][[i]] <- metadata_list[[i]] |>\n        ggplot(aes(x=log10GenesPerUMI, color = sample, fill=sample)) +\n        geom_density(alpha = 0.2) +\n        theme_classic() +\n        geom_vline(xintercept = 0.8) +\n        # coord_fixed() +\n        labs(title = paste(\"overall_complexity\", i, sep = \"_\"))\n\n    ## Mitochondrial counts ratio\n    plots[[\"mitochondrial_ratio\"]][[i]] <- metadata_list[[i]] |> \n        ggplot(aes(color=sample, x=mitoRatio, fill=sample)) + \n        geom_density(alpha = 0.2) + \n        scale_x_continuous(trans = \"log10\") +\n        theme_classic() +\n        # coord_fixed() +\n        geom_vline(xintercept = 0.2) +\n        labs(title = paste(\"mitochondrial_ratio\", i, sep = \"_\"))\n    \n    ## UMIs vs genes\n    plots[[\"UMIs_genes\"]][[i]] <- metadata_list[[i]] |>\n        ggplot(aes(x = nUMI, y = nGene, color = mitoRatio)) +\n        geom_point() +\n        scale_colour_gradient(low = \"gray90\", high = \"black\") +\n        stat_smooth(method = lm) +\n        scale_x_log10() +\n        scale_y_log10() +\n        theme_classic() +\n        # coord_fixed() +\n        geom_vline(xintercept = 500) +\n        geom_hline(yintercept = 250) +\n        facet_wrap(~sample) +\n        labs(title = paste(\"UMIs_genes\", i, sep = \"_\"))\n}\n```\n:::\n\n\n**Report the number of cells left for each sample, and comment on whether the number of cells removed is high or low. Can you give reasons why this number is still not ~12K (which is how many cells were loaded for the experiment)?**\n\nAfter filtering, we should not have more cells than we sequenced. Generally we aim to have about the number we sequenced or a bit less. \n\nThere are just under 15K cells left for both the control and stim cells. The number of cells removed is reasonably low.\n\nWhile it would be ideal to have 12K cells, we do not expect that due to:\n\n- barcoded beads in the droplet with no actual cell present\n- more than one barcode in the droplet; results in a single cell's mRNA represented as two cells\n- dead or dying cells encapsulated into the droplet \n\nIf we still see higher than expected numbers of cells after filtering, this means we could afford to filter more stringently (but we don't necessarily have to).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_combined <- wrap_plots(plots$cell_counts, nrow = 1)\n\n## Get the min and max values from the ranges\np_ranges_x <- c(ggplot_build(p_combined[[1]])$layout$panel_scales_x[[1]]$range$range,\n  ggplot_build(p_combined[[2]])$layout$panel_scales_x[[1]]$range$range)\n\np_ranges_y <- c(ggplot_build(p_combined[[1]])$layout$panel_scales_y[[1]]$range$range,\n                ggplot_build(p_combined[[2]])$layout$panel_scales_y[[1]]$range$range)\n\n## Apply these ranges to the patchwork object\np_combined & \n  xlim(min(p_ranges_x), max(p_ranges_x)) & \n  ylim(min(p_ranges_y), max(p_ranges_y))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwrap_plots(plots$UMI_counts, nrow = 1)\n## Warning: Removed 4 rows containing non-finite outside the scale range (`stat_density()`).\n## Warning: Removed 3 rows containing non-finite outside the scale range (`stat_density()`).\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n**After filtering for nGene per cell, you should still observe a small shoulder to the right of the main peak. What might this shoulder represent?**\n\nThis peak could represent a biologically distinct population of cells. It could be a set a of cells that share some properties and as a consequence exhibit more diversity in its transcriptome (with the larger number of genes detected).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## The filtering using a threshold of 500 has removed the cells with low numbers of UMIs from the analysis.\nwrap_plots(plots$genes_detected, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n**When plotting the nGene against nUMI do you observe any data points in the bottom right quadrant of the plot? What can you say about these cells that have been removed?**\n\nThe cells that were removed were those with high nUMI but low numbers of genes detected. These cells had many captured transcripts but represent only a small number of genes. These low complexity cells could represent a specific cell type (i.e. red blood cells which lack a typical transcriptome), or could be due to some other strange artifact or contamination.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwrap_plots(plots$UMIs_genes, nrow = 1)\n## `geom_smooth()` using formula = 'y ~ x'\n## Warning: The following aesthetics were dropped during statistical transformation: colour.\n## ℹ This can happen when ggplot fails to infer the correct grouping structure in the data.\n## ℹ Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\n## The following aesthetics were dropped during statistical transformation: colour.\n## ℹ This can happen when ggplot fails to infer the correct grouping structure in the data.\n## ℹ Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\n## `geom_smooth()` using formula = 'y ~ x'\n## Warning: The following aesthetics were dropped during statistical transformation: colour.\n## ℹ This can happen when ggplot fails to infer the correct grouping structure in the data.\n## ℹ Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\n## The following aesthetics were dropped during statistical transformation: colour.\n## ℹ This can happen when ggplot fails to infer the correct grouping structure in the data.\n## ℹ Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwrap_plots(plots$mitochondrial_ratio, nrow = 1)\n## Warning in scale_x_continuous(trans = \"log10\"): log-10 transformation introduced infinite values.\n## Warning: Removed 118 rows containing non-finite outside the scale range (`stat_density()`).\n## Warning in scale_x_continuous(trans = \"log10\"): log-10 transformation introduced infinite values.\n## Warning: Removed 11 rows containing non-finite outside the scale range (`stat_density()`).\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwrap_plots(plots$overall_complexity, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n## Normalization\n\n*Goals:*\n\n- To accurately normalize the gene expression values to account for differences in sequencing depth and overdispersed count values.\n- To identify the most variant genes likely to be indicative of the different cell types present.\n\n*Challenges:*\n\n- Checking and removing unwanted variation so that we do not have cells clustering by artifacts downstream\n\n*Recommendations:*\n\n- Have a good idea of your expectations for the cell types to be present prior to performing the clustering. Know whether you expect cell types of low complexity or higher mitochondrial content AND whether the cells are differentiating\n- Regress out number of UMIs (default using sctransform), mitochondrial content, and cell cycle, if needed and appropriate for experiment, so not to drive clustering downstream\n\n\nAn essential first step in the majority of mRNA expression analyses is normalization, whereby systematic variations are adjusted for to **make expression counts comparable across genes and/or samples**. The counts of mapped reads for each gene is proportional to the expression of RNA (\"interesting\") in addition to many other factors (\"uninteresting\"). Normalization is the process of adjusting raw count values to account for the \"uninteresting\" factors. \n\nThe main factors often considered during normalization are:\n \n - **Sequencing depth:** Accounting for sequencing depth is necessary for comparison of gene expression between cells. In the example below, each gene appears to have doubled in expression in cell 2, however this is a consequence of cell 2 having twice the sequencing depth.\n\n<p align=\"center\">\n<img src=\"./projects/scRNA-seq_online/img/sequencing_depth.png\" width=\"400\">\n</p>\n\nEach cell in scRNA-seq will have a differing number of reads associated with it. So to accurately compare expression between cells, it is necessary to normalize for sequencing depth.\n \n - **Gene length:** Accounting for gene length is necessary for comparing expression between different genes within the same cell. The number of reads mapped to a longer gene can appear to have equal count/expression as a shorter gene that is more highly expressed. \n \n<p align=\"center\"> \n<img src=\"./projects/scRNA-seq_online/img/length_of_gene.png\" width=\"400\">\n</p>\n\n:::{.callout-note} \n*If using a 3' or 5' droplet-based method, the length of the gene will not affect the analysis because only the 5' or 3' end of the transcript is sequenced.* However, if using full-length sequencing, the transcript length should be accounted for.\n:::\n\n### Explore sources of unwanted variation\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Normalize the counts\nfiltered_seurat <- readRDS(paste0(dir, \"/data/filtered_seurat.rds\"))\nseurat_phase <- NormalizeData(filtered_seurat)\n## Normalizing layer: counts\n```\n:::\n\n\n#### Evaluating effects of cell cycle\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Load cell cycle markers\nload(paste0(dir, \"/data/cycle.rda\"))\nhead(g2m_genes)\n## [1] \"NCAPD2\" \"ANLN\"   \"TACC3\"  \"HMMR\"   \"GTSE1\"  \"NDC80\"\nhead(s_genes)\n## [1] \"UBR7\"  \"RFC2\"  \"RAD51\" \"MCM2\"  \"TIPIN\" \"MCM6\"\n\n## Score cells for cell cycle\nseurat_phase <- CellCycleScoring(\n    seurat_phase,\n    g2m.features = g2m_genes,\n    s.features = s_genes\n)\n## Warning: The following features are not present in the object: RAD51, CDC45, E2F8, DTL, EXO1, UHRF1, not searching for symbol synonyms\n## Warning: The following features are not present in the object: ANLN, GTSE1, NEK2, HJURP, DLGAP5, PIMREG, KIF2C, CDC25C, CKAP2L, not searching for symbol synonyms\n\n## View cell cycle scores and phases assigned to cells                                 \nhead(seurat_phase@meta.data)\n##                       orig.ident nCount_RNA nFeature_RNA                 seq_folder nUMI nGene log10GenesPerUMI mitoRatio                 cells sample  S.Score G2M.Score Phase\n## ctrl_AAACATACAATGCC-1       ctrl       2344          874 ctrl_raw_feature_bc_matrix 2344   874           0.8729   0.01962 ctrl_AAACATACAATGCC-1   ctrl  0.04331   0.05423   G2M\n## ctrl_AAACATACATTTCC-1       ctrl       3124          895 ctrl_raw_feature_bc_matrix 3125   896           0.8448   0.01792 ctrl_AAACATACATTTCC-1   ctrl  0.02662   0.05160   G2M\n## ctrl_AAACATACCAGAAA-1       ctrl       2578          725 ctrl_raw_feature_bc_matrix 2578   725           0.8385   0.01552 ctrl_AAACATACCAGAAA-1   ctrl -0.04671  -0.04842    G1\n## ctrl_AAACATACCAGCTA-1       ctrl       3260          978 ctrl_raw_feature_bc_matrix 3261   979           0.8513   0.01380 ctrl_AAACATACCAGCTA-1   ctrl -0.05833   0.05046   G2M\n## ctrl_AAACATACCATGCA-1       ctrl        746          362 ctrl_raw_feature_bc_matrix  746   362           0.8907   0.02145 ctrl_AAACATACCATGCA-1   ctrl  0.03930  -0.02996     S\n## ctrl_AAACATACCTCGCT-1       ctrl       3518          865 ctrl_raw_feature_bc_matrix 3519   866           0.8283   0.01392 ctrl_AAACATACCTCGCT-1   ctrl  0.03201   0.01686     S\n```\n:::\n\nAfter scoring the cells for cell cycle, we would like to **determine whether cell cycle is a major source of variation in our dataset using PCA**. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Identify the most variable genes\nseurat_phase <- FindVariableFeatures(\n    seurat_phase, \n    selection.method = \"vst\",\n    nfeatures = 2000, \n    verbose = FALSE\n)\n\n## Scale the counts\nseurat_phase <- ScaleData(seurat_phase)\n## Centering and scaling data matrix\n\n## Identify the 15 most highly variable genes\nranked_variable_genes <- VariableFeatures(seurat_phase)\ntop_genes <- ranked_variable_genes[1:15]\n\n## Plot the average expression and variance of these genes\n## With labels to indicate which genes are in the top 15\np <- VariableFeaturePlot(seurat_phase)\nLabelPoints(plot = p, points = top_genes, repel = TRUE)\n## When using repel, set xnudge and ynudge to 0 for optimal results\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Perform PCA\nseurat_phase <- RunPCA(seurat_phase)\n## PC_ 1 \n## Positive:  CCR7, LTB, TRBC1, ITM2A, TRAT1, IL32, CCL5, NKG7, ALOX5AP, GZMB \n## \t   GNLY, CST7, CREM, CD27, PASK, SNHG8, BIRC3, CD8A, MYC, GPR171 \n## \t   CD8B, GZMH, KLRD1, ADTRP, PRF1, NOP58, FGFBP2, CXCR3, TIGIT, SESN3 \n## Negative:  C15orf48, TYROBP, CST3, FCER1G, SOD2, TYMP, ANXA5, TIMP1, KYNU, LGALS3 \n## \t   FTL, FCN1, CD63, LGALS1, CTSB, APOBEC3A, IGSF6, LYZ, S100A4, ANXA2 \n## \t   SPI1, CCL2, PSAP, NPC2, NINJ1, CD68, S100A11, CTSL, MAFB, IDO1 \n## PC_ 2 \n## Positive:  CXCL8, CLEC5A, CD14, VCAN, S100A8, IER3, IL1B, MARCKSL1, PID1, CD9 \n## \t   PLAUR, S100A9, THBS1, OSM, PHLDA1, SLC7A11, PPIF, GAPT, AC245128.3, INSIG1 \n## \t   MCEMP1, ENG, CXCL3, MGST1, OLR1, LIMS1, GAPDH, SMIM25, PFN1, FTH1 \n## Negative:  ISG15, IFIT3, IFIT1, ISG20, LY6E, TNFSF10, IFIT2, MX1, IFI6, RSAD2 \n## \t   CXCL10, OAS1, CXCL11, IFITM3, MT2A, USP18, IRF7, OASL, IDO1, TNFSF13B \n## \t   IL1RN, CCL8, EPSTI1, IFITM2, SAMD9L, GBP1, APOBEC3A, PLSCR1, CMPK2, DDX58 \n## PC_ 3 \n## Positive:  IGHM, CD79A, HLA-DQA1, IGKC, CD74, CD83, HLA-DQB1, HLA-DRA, MS4A1, HLA-DRB1 \n## \t   HLA-DPA1, HLA-DPB1, IRF8, CCR7, SYNGR2, HERPUD1, IGLC2, ID3, IGHD, BLNK \n## \t   HLA-DMA, HVCN1, HSP90AB1, RUBCNL, CD79B, BANK1, TCL1A, HLA-DMB, REL, MIR155HG \n## Negative:  NKG7, GNLY, CCL5, ANXA1, GZMB, PRF1, KLRD1, GZMH, CST7, GZMA \n## \t   FGFBP2, CLIC3, CTSW, TRBC1, FASLG, OASL, IL32, CD8A, HOPX, MT2A \n## \t   KLRC1, SH3BGRL3, SPON2, CCL4, CXCR3, C12orf75, GCHFR, SH2D1B, TRGC2, LAG3 \n## PC_ 4 \n## Positive:  NKG7, GZMB, GNLY, CCL5, CST7, PRF1, KLRD1, CLIC3, GZMA, GZMH \n## \t   FGFBP2, CTSW, FASLG, HOPX, KLRC1, HLA-DPB1, HLA-DPA1, CD74, C12orf75, SH2D1B \n## \t   IGFBP7, SPON2, TNFRSF18, ID2, HLA-DQA1, CXCR3, RAMP1, CD38, TRDC, GCHFR \n## Negative:  LTB, CCR7, TRAT1, ADTRP, TSHZ2, PASK, SOCS3, CMTM8, CD27, CCL8 \n## \t   CCL2, MYC, CTSL, TARBP1, NELL2, CCL7, SNHG8, IL1RN, MAL, ITM2A \n## \t   SESN3, HPSE, SOD2, IL23A, FBLN7, SCML1, APOBEC3A, TXNIP, LPAR6, S100A9 \n## PC_ 5 \n## Positive:  VMO1, FCGR3A, MS4A4A, MS4A7, CXCL16, PPM1N, LST1, PECAM1, SMPDL3A, JPT1 \n## \t   AIF1, CH25H, SERPINA1, CDKN1C, LRRC25, CASP5, PLAC8, VASP, GBP5, SMIM25 \n## \t   RGS19, LILRA5, HCAR3, C3AR1, CD86, PILRA, CFD, IGHM, SCIMP, STXBP2 \n## Negative:  LMNA, HSPA1A, HSPE1, FABP5, TXN, CACYBP, HSPA1B, SRSF2, CCL7, HSPB1 \n## \t   HSPH1, GADD45B, CCL2, HSPD1, HSP90AB1, PLA2G7, HSPA5, HSP90AA1, GPR183, CCL8 \n## \t   TCP1, SRSF7, SDS, DNAJB4, DNAJB1, ZFAND2A, NOP58, MIR155HG, NR4A2, TPM4\n\n## Plot the PCA colored by cell cycle phase\nDimPlot(\n    seurat_phase,\n    reduction = \"pca\",\n    group.by= \"Phase\",\n    split.by = \"Phase\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=90%}\n:::\n:::\n\nWe do not see large differences due to cell cycle phase. Based on this plot, we would not regress out the variation due to cell cycle.\n\n#### Evaluating effects of mitochondrial expression\n\nMitochondrial expression is another factor which can greatly influence clustering. Oftentimes, it is useful to regress out variation due to mitochondrial expression. However, if the differences in mitochondrial gene expression represent a biological phenomenon that may help to distinguish cell clusters, then we advise not regressing this out. In this exercise, we can perform a quick check similar to looking at cell cycle and decide whether or not we want to regress it out.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Check quartile values\nsummary(seurat_phase@meta.data$mitoRatio)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##  0.0000  0.0144  0.0199  0.0214  0.0267  0.1446\n\n## Turn mitoRatio into categorical factor vector based on quartile values\nseurat_phase@meta.data$mitoFr <- cut(\n    seurat_phase@meta.data$mitoRatio,\n    breaks = c(-Inf, 0.0144, 0.0199, 0.0267, Inf),\n    labels = c(\"Low\", \"Medium\", \"Medium high\", \"High\")\n)\n\n\n## Plot the PCA colored by mitoFr\nDimPlot(\n    seurat_phase,\n    reduction = \"pca\",\n    group.by = \"mitoFr\",\n    split.by = \"mitoFr\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=90%}\n:::\n:::\n\nBased on this plot, we can see that there is a different pattern of scatter for the plot containing cells with \"High\" mitochondrial expression. We observe that the lobe of cells on the left-hand side of the plot is where most of the cells with high mitochondrial expression are. For all other levels of mitochondrial expression we see a more even distribution of cells across the PCA plot.\n\n**Would you regress out mitochndrial fraction as a source of unwanted variation?**\n  \nSince we see this clear difference, we will regress out the 'mitoRatio' when we identify the most variant genes.\n\n### Normalization and regressing out sources of unwanted variation using SCTransform\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Split seurat object by condition to perform cell cycle scoring and SCT on all samples\nsplit_seurat <- SplitObject(seurat_phase, split.by = \"sample\")\n\n## keep them as separate objects and transform them as that is what is required for integration\nfor (i in 1:length(split_seurat)) {\n    split_seurat[[i]] <- SCTransform(\n        split_seurat[[i]], vars.to.regress = c(\"mitoRatio\"), vst.flavor = \"v2\"\n    )\n}\n## Running SCTransform on assay: RNA\n## Running SCTransform on layer: counts\n## vst.flavor='v2' set. Using model with fixed slope and excluding poisson genes.\n## Variance stabilizing transformation of count matrix of size 13799 by 14847\n## Model formula is y ~ log_umi\n## Get Negative Binomial regression parameters per gene\n## Using 2000 genes, 5000 cells\n## Found 258 outliers - those will be ignored in fitting/regularization step\n## Second step: Get residuals using fitted parameters for 13799 genes\n## Computing corrected count matrix for 13799 genes\n## Calculating gene attributes\n## Wall clock passed: Time difference of 23.28 secs\n## Determine variable features\n## Regressing out mitoRatio\n## Centering data matrix\n## Getting residuals for block 1(of 3) for counts dataset\n## Getting residuals for block 2(of 3) for counts dataset\n## Getting residuals for block 3(of 3) for counts dataset\n## Regressing out mitoRatio\n## Centering data matrix\n## Finished calculating residuals for counts\n## Set default assay to SCT\n## Running SCTransform on assay: RNA\n## Running SCTransform on layer: counts\n## vst.flavor='v2' set. Using model with fixed slope and excluding poisson genes.\n## Variance stabilizing transformation of count matrix of size 13695 by 14782\n## Model formula is y ~ log_umi\n## Get Negative Binomial regression parameters per gene\n## Using 2000 genes, 5000 cells\n## Found 264 outliers - those will be ignored in fitting/regularization step\n## Second step: Get residuals using fitted parameters for 13695 genes\n## Computing corrected count matrix for 13695 genes\n## Calculating gene attributes\n## Wall clock passed: Time difference of 19.83 secs\n## Determine variable features\n## Regressing out mitoRatio\n## Centering data matrix\n## Getting residuals for block 1(of 3) for counts dataset\n## Getting residuals for block 2(of 3) for counts dataset\n## Getting residuals for block 3(of 3) for counts dataset\n## Regressing out mitoRatio\n## Centering data matrix\n## Finished calculating residuals for counts\n## Set default assay to SCT\n\n## Check which assays are stored in objects\nsplit_seurat$ctrl@assays\n## $RNA\n## Assay (v5) data with 14065 features for 14847 cells\n## Top 10 variable features:\n##  HBB, HBA2, CCL4L2, HBA1, IGKC, CCL7, PPBP, CCL4, CCL3, CCL8 \n## Layers:\n##  counts, data, scale.data \n## \n## $SCT\n## SCTAssay data with 13799 features for 14847 cells, and 1 SCTModel(s) \n## Top 10 variable features:\n##  FTL, CCL2, IGKC, GNLY, IGLC2, CCL3, TIMP1, IGHM, CCL4, PPBP\nsplit_seurat$stim@assays\n## $RNA\n## Assay (v5) data with 14065 features for 14782 cells\n## Top 10 variable features:\n##  HBB, HBA2, CCL4L2, HBA1, IGKC, CCL7, PPBP, CCL4, CCL3, CCL8 \n## Layers:\n##  counts, data, scale.data \n## \n## $SCT\n## SCTAssay data with 13695 features for 14782 cells, and 1 SCTModel(s) \n## Top 10 variable features:\n##  IGKC, FTL, CCL8, CCL2, GNLY, CXCL10, CCL7, CCL4, IGLC2, CCL3\n\n## Save the split seurat object\n# saveRDS(split_seurat, paste0(dir, \"/data/split_seurat.rds\"))\n```\n:::\n\n\n**Any observations for the genes or features listed under *\"First 10 features:\"* and the *\"Top 10 variable features:\"* for \"ctrl\" versus \"stim\"?**\n\nFor the first 10 features, it appears that the same genes are present in both \"ctrl\" and \"stim\"\n\nFor the top 10 variable features, these are different in the the 2 conditions with some overlap between them.\n\n## Integration\n\n*Goals:*\n\n- To align same cell types across conditions.\n\n*Challenges:*\n\n- Aligning cells of similar cell types so that we do not have clustering downstream due to differences between samples, conditions, modalities, or batches\n\n*Recommendations:*\n\n- Go through the analysis without integration first to determine whether integration is necessary\n\n\n\n### To integrate or not to integrate?\n\nGenerally, we always look at our clustering **without integration** before deciding whether we need to perform any alignment. **Do not just always perform integration because you think there might be differences - explore the data.** If we had performed the normalization on both conditions together in a Seurat object and visualized the similarity between cells, we would have seen condition-specific clustering:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Run UMAP\nseurat_phase <- RunUMAP(\n    seurat_phase,\n    dims = 1:40,reduction = \"pca\"\n)\n## Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric\n## To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'\n## This message will be shown once per session\n## 15:18:01 UMAP embedding parameters a = 0.9922 b = 1.112\n## Found more than one class \"dist\" in cache; using the first, from namespace 'spam'\n## Also defined by 'BiocGenerics'\n## 15:18:01 Read 29629 rows and found 40 numeric columns\n## 15:18:01 Using Annoy for neighbor search, n_neighbors = 30\n## Found more than one class \"dist\" in cache; using the first, from namespace 'spam'\n## Also defined by 'BiocGenerics'\n## 15:18:01 Building Annoy index with metric = cosine, n_trees = 50\n## 0%   10   20   30   40   50   60   70   80   90   100%\n## [----|----|----|----|----|----|----|----|----|----|\n## **************************************************|\n## 15:18:03 Writing NN index file to temp file /var/folders/2c/9q3pg2295195bp3gnrgbzrg40000gn/T//RtmpA1Bwup/file40e577cd588d\n## 15:18:03 Searching Annoy index using 1 thread, search_k = 3000\n## 15:18:09 Annoy recall = 100%\n## 15:18:09 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30\n## 15:18:11 Initializing from normalized Laplacian + noise (using RSpectra)\n## 15:18:11 Commencing optimization for 200 epochs, with 1368302 positive edges\n## 15:18:23 Optimization finished\n\n## Plot UMAP\nDimPlot(seurat_phase)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nCondition-specific clustering of the cells indicates that we need to integrate the cells across conditions to ensure that cells of the same cell type cluster together.\n\n**Why is it important the cells of the same cell type cluster together?** \n\nWe want to identify  _**cell types which are present in all samples/conditions/modalities**_ within our dataset, and therefore would like to observe a representation of cells from both samples/conditions/modalities in every cluster. This will enable more interpretable results downstream (i.e. DE analysis, ligand-receptor analysis, differential abundance analysis...).\n\n### Integrate or align samples across conditions using shared highly variable genes\n\n**If cells cluster by sample, condition, batch, dataset, modality, this integration step can greatly improve the clustering and the downstream analyses**.\n\nTo integrate, we will use the shared highly variable genes (identified using SCTransform) from each group, then, we will \"integrate\" or \"harmonize\" the groups to overlay cells that are similar or have a \"common set of biological features\" between groups. \n\nIntegration is a powerful method that uses these shared sources of greatest variation to identify shared subpopulations across conditions or datasets [Stuart and Bulter et al. (2018)]. The goal of integration is to ensure that the cell types of one condition/dataset align with the same celltypes of the other conditions/datasets (e.g. control macrophages align with stimulated macrophages).\n\n\n### Integration using CCA\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Select the most variable features to use for integration\ninteg_features <- SelectIntegrationFeatures(\n    object.list = split_seurat, \n    nfeatures = 3000\n)\n\n## Prepare the SCT list object for integration\nsplit_seurat <- PrepSCTIntegration(\n    object.list = split_seurat, \n    anchor.features = integ_features\n)\n\n## Find the best buddies or anchors and filter incorrect anchors\ninteg_anchors <- FindIntegrationAnchors(\n    object.list = split_seurat, \n    normalization.method = \"SCT\", \n    anchor.features = integ_features\n)\n## Finding all pairwise anchors\n## Running CCA\n## Merging objects\n## Finding neighborhoods\n## Finding anchors\n## \tFound 28193 anchors\n## Filtering anchors\n## \tRetained 17668 anchors\n\n## Perform CCA to integrate across conditions\nseurat_integrated <- IntegrateData(\n    anchorset = integ_anchors, \n    normalization.method = \"SCT\"\n)\n## [1] 1\n## Warning: Different cells and/or features from existing assay SCT\n## [1] 2\n## Warning: Different cells and/or features from existing assay SCT\n## Merging dataset 2 into 1\n## Extracting anchors for merged samples\n## Finding integration vectors\n## Finding integration vector weights\n## Integrating data\n## Warning: Assay integrated changing from Assay to SCTAssay\n\n## Warning: Different cells and/or features from existing assay SCT\n```\n:::\n\n\nAfter integration, to visualize the integrated data we can use dimensionality reduction techniques, such as PCA and Uniform Manifold Approximation and Projection (UMAP). While PCA will determine all PCs, we can only plot two at a time. In contrast, UMAP will take the information from any number of top PCs to arrange the cells in this multidimensional space. It will take those distances in multidimensional space and plot them in two dimensions working to preserve local and global structure. In this way, the distances between cells represent similarity in expression.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Run PCA\nseurat_integrated <- RunPCA(object = seurat_integrated)\n## PC_ 1 \n## Positive:  FTL, TIMP1, CCL2, FTH1, C15orf48, CXCL8, S100A8, FCER1G, TYROBP, S100A4 \n## \t   LYZ, CD63, LGALS3, S100A9, ACTB, LGALS1, ANXA5, HLA-DRA, SOD2, S100A11 \n## \t   CD14, SAT1, S100A10, TYMP, CST3, ANXA2, PLAUR, CTSL, CTSB, PSAP \n## Negative:  RPL3, RPL13, RPS18, RPS6, RPL10, RPL21, RPL13A, RPS2, RPS4X, RPS3 \n## \t   RPS14, PABPC1, RPL32, RPL7, RPS19, RPS3A, LTB, RPL34, RPS27A, TRAC \n## \t   PTMA, RPS27, RPS15A, TRBC1, RPL18A, CCR7, RPS5, RPS12, TRBC2, RPL31 \n## PC_ 2 \n## Positive:  GNLY, CCL5, NKG7, GZMB, FGFBP2, GZMH, CST7, APOBEC3G, KLRD1, CLIC3 \n## \t   PRF1, GZMA, CTSW, CHST12, HOPX, HLA-A, CCL4, RARRES3, CXCR3, C1orf21 \n## \t   HLA-B, AOAH, APMAP, OASL, HLA-C, C12orf75, LDHA, KLRC1, CD8A, TNFRSF18 \n## Negative:  CD74, IGHM, IGKC, HLA-DRA, CD79A, HLA-DRB1, CCR7, RPL13, EEF1A1, RPS18 \n## \t   RPS6, HLA-DQA1, HLA-DQB1, RPL10, PABPC1, RPL32, LTB, RPL18A, MS4A1, RPS2 \n## \t   CD83, RPS5, RPL13A, HLA-DPA1, ID3, RPL34, RPS12, RPS23, RPL11, HLA-DPB1 \n## PC_ 3 \n## Positive:  CD74, IGKC, IGHM, HLA-DRA, HLA-DRB1, CD79A, HLA-DQA1, HLA-DPA1, HLA-DPB1, HLA-DQB1 \n## \t   CD83, GNLY, HERPUD1, MS4A1, IGLC2, ID3, HLA-DMA, GZMB, CD79B, SYNGR2 \n## \t   NKG7, HSP90AB1, REL, IGHD, CCL5, TXN, GSTP1, IRF8, MIR155HG, HLA-DMB \n## Negative:  TRAC, FTL, PABPC1, CCL2, S100A8, CD3D, TRBC1, GIMAP7, RPS18, RPS14 \n## \t   FTH1, RPL3, S100A9, LTB, RPL13, SARAF, RPL34, RPL10, RPS4X, LDHB \n## \t   RPS6, RPL21, SELL, RPL32, RPS15A, CD3E, TRBC2, RPL7, RPL31, LCK \n## PC_ 4 \n## Positive:  CD74, IGHM, CCL5, GNLY, IGKC, RPL3, NKG7, GZMB, HLA-DRA, RPL10 \n## \t   RPS2, CD79A, RPL13, RPS4X, EEF1A1, HLA-DPB1, RPS18, RPS6, RPS19, HLA-DPA1 \n## \t   HLA-DRB1, RPS3, RPL13A, FGFBP2, RPL7, GZMH, RPL12, RPL21, RPL18A, RPS27A \n## Negative:  HSPB1, CACYBP, HSP90AB1, HSPH1, SRSF7, SRSF2, HSPA8, UBC, HSPA1A, DNAJB6 \n## \t   UBB, GADD45B, HSPE1, YPEL5, H3F3B, DNAJB1, EIF1, RSRC2, ZFAND2A, DDIT4 \n## \t   JUNB, NR4A2, CD69, CREM, HSPD1, SNHG15, BTG1, DNAJA1, HSP90AA1, SOD1 \n## PC_ 5 \n## Positive:  VMO1, FCGR3A, TIMP1, MS4A7, TNFSF10, CXCL16, CALHM6, LST1, AIF1, JPT1 \n## \t   MS4A4A, FGL2, SAT1, ATP1B3, IFITM3, CXCL10, TNFSF13B, GBP1, CTSC, CST3 \n## \t   GBP5, WARS, PLAC8, OAS1, SERPINA1, C3AR1, PILRA, HLA-DPA1, CTSS, ADA \n## Negative:  CCL2, FTL, CXCL8, IGKC, CCL7, S100A8, IGHM, S100A9, CXCL3, GNLY \n## \t   CXCL1, CTSL, CCL3, CXCL2, SERPINB2, IL1B, CD79A, CD63, CCL4, PLA2G7 \n## \t   CSTB, CCL5, LGALS3, CTSB, CCL4L2, ATP6V1F, IGLC2, ID3, CCL3L1, GZMB\n\n## Plot PCA\nPCAPlot(seurat_integrated, split.by = \"sample\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){fig-align='center' width=90%}\n:::\n\n```{.r .cell-code}\n\n## Run UMAP\nseurat_integrated <- RunUMAP(seurat_integrated, dims = 1:40, reduction = \"pca\")\n## 15:36:07 UMAP embedding parameters a = 0.9922 b = 1.112\n## Found more than one class \"dist\" in cache; using the first, from namespace 'spam'\n## Also defined by 'BiocGenerics'\n## 15:36:07 Read 29629 rows and found 40 numeric columns\n## 15:36:07 Using Annoy for neighbor search, n_neighbors = 30\n## Found more than one class \"dist\" in cache; using the first, from namespace 'spam'\n## Also defined by 'BiocGenerics'\n## 15:36:07 Building Annoy index with metric = cosine, n_trees = 50\n## 0%   10   20   30   40   50   60   70   80   90   100%\n## [----|----|----|----|----|----|----|----|----|----|\n## **************************************************|\n## 15:36:08 Writing NN index file to temp file /var/folders/2c/9q3pg2295195bp3gnrgbzrg40000gn/T//RtmpA1Bwup/file40e5bdfb74b\n## 15:36:08 Searching Annoy index using 1 thread, search_k = 3000\n## 15:36:14 Annoy recall = 100%\n## 15:36:15 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30\n## 15:36:16 Initializing from normalized Laplacian + noise (using RSpectra)\n## 15:36:17 Commencing optimization for 200 epochs, with 1338356 positive edges\n## 15:36:28 Optimization finished\n\n## Plot UMAP                             \nDimPlot(seurat_integrated)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-2.png){fig-align='center' width=90%}\n:::\n\n```{.r .cell-code}\n\n## Save integrated seurat object\n# saveRDS(seurat_integrated, paste0(dir, \"/data/integrated_seurat.rds\"))\n```\n:::\n\n\n## Clustering\n\n**Goals:**\n \n - To **generate cell type-specific clusters** and use known cell type marker genes to determine the identities of the clusters.\n - To **determine whether clusters represent true cell types or cluster due to biological or technical variation**, such as clusters of cells in the S phase of the cell cycle, clusters of specific batches, or cells with high mitochondrial content.\n\n**Challenges:**\n \n - **Identifying poor quality clusters** that may be due to uninteresting biological or technical variation\n - **Identifying the cell types** of each cluster\n - Maintaining patience as this can be a highly iterative process between clustering and marker identification (sometimes even going back to the QC filtering)\n\n**Recommendations:**\n \n - Have a good idea of your expectations for the **cell types to be present** prior to performing the clustering. Know whether you expect cell types of low complexity or higher mitochondrial content AND whether the cells are differentiating\n - If you have **more than one condition**, it's often helpful to perform integration to align the cells\n - **Regress out** number of UMIs (by default with sctransform), mitochondrial content, and cell cycle, if needed and appropriate for experiment, so not to drive clustering\n - Identify any junk clusters for removal or re-visit QC filtering. Possible junk clusters could include those with high **mitochondrial content** and low UMIs/genes. If comprised of a lot of cells, then may be helpful to go back to QC to filter out, then re-integrate/cluster.\n - _If **not detecting all cell types as separate clusters**, try changing the resolution or the number of PCs used for clustering\n\n### Clustering cells based on top PCs (metagenes)\n\n#### Identify significant PCs\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Explore heatmap of PCs\nDimHeatmap(seurat_integrated, dims = 1:9, cells = 500, balanced = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){fig-align='center' width=90%}\n:::\n\n```{.r .cell-code}\n\n## Printing out the most variable genes driving PCs\nprint(x = seurat_integrated[[\"pca\"]], dims = 1:10, nfeatures = 5)\n## PC_ 1 \n## Positive:  FTL, TIMP1, CCL2, FTH1, C15orf48 \n## Negative:  RPL3, RPL13, RPS18, RPS6, RPL10 \n## PC_ 2 \n## Positive:  GNLY, CCL5, NKG7, GZMB, FGFBP2 \n## Negative:  CD74, IGHM, IGKC, HLA-DRA, CD79A \n## PC_ 3 \n## Positive:  CD74, IGKC, IGHM, HLA-DRA, HLA-DRB1 \n## Negative:  TRAC, FTL, PABPC1, CCL2, S100A8 \n## PC_ 4 \n## Positive:  CD74, IGHM, CCL5, GNLY, IGKC \n## Negative:  HSPB1, CACYBP, HSP90AB1, HSPH1, SRSF7 \n## PC_ 5 \n## Positive:  VMO1, FCGR3A, TIMP1, MS4A7, TNFSF10 \n## Negative:  CCL2, FTL, CXCL8, IGKC, CCL7 \n## PC_ 6 \n## Positive:  IGKC, IGHM, CCL2, CXCL10, CCL3 \n## Negative:  LYZ, HLA-DRA, HLA-DQA1, HLA-DRB1, HLA-DPB1 \n## PC_ 7 \n## Positive:  IGHM, S100A8, CD79A, S100A9, IGKC \n## Negative:  CCL2, CCL3, CXCL10, CCL4, TXN \n## PC_ 8 \n## Positive:  CCL3, CCL4, CXCL8, IL1B, CCL4L2 \n## Negative:  CCL2, CXCL10, ISG15, LGALS3, FTL \n## PC_ 9 \n## Positive:  CCL3, IDO1, CCL4, CXCL8, LYZ \n## Negative:  NME1, FTL, MIR155HG, HERPUD1, FABP5 \n## PC_ 10 \n## Positive:  GNLY, FTL, S100A8, SELL, GZMB \n## Negative:  CCL2, CREM, FTH1, CXCR4, ANXA1\n\n## Plot the elbow plot\nElbowPlot(object = seurat_integrated, ndims = 40)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-2.png){fig-align='center' width=90%}\n:::\n:::\n\n#### Cluster the cells\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Determine the K-nearest neighbor graph\nseurat_integrated <- FindNeighbors(object = seurat_integrated, dims = 1:40)\n## Computing nearest neighbor graph\n## Computing SNN\n\n## Determine the clusters for various resolutions                                \nseurat_integrated <- FindClusters(\n    object = seurat_integrated,\n    resolution = c(0.4, 0.6, 0.8, 1.0, 1.4)\n)\n## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n## \n## Number of nodes: 29629\n## Number of edges: 1128589\n## \n## Running Louvain algorithm...\n## Maximum modularity in 10 random starts: 0.9195\n## Number of communities: 14\n## Elapsed time: 6 seconds\n## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n## \n## Number of nodes: 29629\n## Number of edges: 1128589\n## \n## Running Louvain algorithm...\n## Maximum modularity in 10 random starts: 0.9008\n## Number of communities: 16\n## Elapsed time: 6 seconds\n## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n## \n## Number of nodes: 29629\n## Number of edges: 1128589\n## \n## Running Louvain algorithm...\n## Maximum modularity in 10 random starts: 0.8836\n## Number of communities: 19\n## Elapsed time: 5 seconds\n## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n## \n## Number of nodes: 29629\n## Number of edges: 1128589\n## \n## Running Louvain algorithm...\n## Maximum modularity in 10 random starts: 0.8691\n## Number of communities: 22\n## Elapsed time: 5 seconds\n## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n## \n## Number of nodes: 29629\n## Number of edges: 1128589\n## \n## Running Louvain algorithm...\n## Maximum modularity in 10 random starts: 0.8459\n## Number of communities: 27\n## Elapsed time: 4 seconds\n\n## Explore resolutions\nhead(seurat_integrated@meta.data[, 14:20])\n##                            mitoFr nCount_SCT nFeature_SCT integrated_snn_res.0.4 integrated_snn_res.0.6 integrated_snn_res.0.8 integrated_snn_res.1\n## ctrl_AAACATACAATGCC-1      Medium       1598          864                      2                      2                      3                    2\n## ctrl_AAACATACATTTCC-1      Medium       1575          735                      1                      1                      0                    1\n## ctrl_AAACATACCAGAAA-1      Medium       1563          671                      3                      3                      2                   11\n## ctrl_AAACATACCAGCTA-1         Low       1587          775                      3                      3                      2                    4\n## ctrl_AAACATACCATGCA-1 Medium high       1086          374                      6                      6                      6                    3\n## ctrl_AAACATACCTCGCT-1         Low       1498          626                      1                      1                      0                    1\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Assign identity of clusters\nIdents(object = seurat_integrated) <- \"integrated_snn_res.0.8\"\n# Plot the UMAP\nDimPlot(seurat_integrated, reduction = \"umap\", label = TRUE, label.size = 6)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Assign identity of clusters\n# Idents(object = seurat_integrated) <- \"integrated_snn_res.0.4\"\n# Plot the UMAP\n# DimPlot(seurat_integrated, reduction = \"umap\", label = TRUE, label.size = 6)\n```\n:::\n\n\n### Exploration of quality control metrics\n\n\n\n## Session Info\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nsessionInfo()\n## R version 4.3.2 (2023-10-31)\n## Platform: aarch64-apple-darwin20 (64-bit)\n## Running under: macOS Sonoma 14.2.1\n## \n## Matrix products: default\n## BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \n## LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n## \n## locale:\n## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n## \n## time zone: Asia/Singapore\n## tzcode source: internal\n## \n## attached base packages:\n## [1] stats4    stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] SingleCellExperiment_1.24.0 SummarizedExperiment_1.32.0 MatrixGenerics_1.14.0       matrixStats_1.2.0           glmGamPoi_1.14.3            multtest_2.56.0             ensembldb_2.26.0            AnnotationFilter_1.26.0     GenomicFeatures_1.54.3      AnnotationDbi_1.64.1       \n## [11] Biobase_2.62.0              GenomicRanges_1.54.1        GenomeInfoDb_1.38.6         IRanges_2.36.0              S4Vectors_0.40.2            AnnotationHub_3.8.0         BiocFileCache_2.10.1        dbplyr_2.4.0                BiocGenerics_0.48.1         metap_1.9                  \n## [21] cowplot_1.1.3               scales_1.3.0                RCurl_1.98-1.14             Matrix_1.6-5                patchwork_1.2.0             lubridate_1.9.3             forcats_1.0.0               stringr_1.5.1               dplyr_1.1.4                 purrr_1.0.2                \n## [31] readr_2.1.5                 tidyr_1.3.1                 tibble_3.2.1                ggplot2_3.5.0               tidyverse_2.0.0             pbmc3k.SeuratData_3.1.4     SeuratData_0.2.2.9001       Seurat_5.0.2                SeuratObject_5.0.1          sp_2.1-3                   \n## [41] httpgd_1.3.1                fs_1.6.3                    here_1.0.1                 \n## \n## loaded via a namespace (and not attached):\n##   [1] ProtGenerics_1.34.0           spatstat.sparse_3.0-3         bitops_1.0-7                  httr_1.4.7                    RColorBrewer_1.1-3            numDeriv_2016.8-1.1           tools_4.3.2                   sctransform_0.4.1             utf8_1.2.4                   \n##  [10] R6_2.5.1                      mgcv_1.9-1                    lazyeval_0.2.2                uwot_0.1.16                   sn_2.1.1                      withr_3.0.0                   prettyunits_1.2.0             gridExtra_2.3                 progressr_0.14.0             \n##  [19] cli_3.6.2                     textshaping_0.3.7             spatstat.explore_3.2-6        fastDummies_1.7.3             sandwich_3.1-0                labeling_0.4.3                mvtnorm_1.2-4                 spatstat.data_3.0-4           ggridges_0.5.6               \n##  [28] pbapply_1.7-2                 Rsamtools_2.18.0              systemfonts_1.0.5             R.utils_2.12.3                parallelly_1.37.1             plotrix_3.8-4                 RSQLite_2.3.5                 generics_0.1.3                BiocIO_1.12.0                \n##  [37] ica_1.0-3                     spatstat.random_3.2-3         fansi_1.0.6                   abind_1.4-5                   R.methodsS3_1.8.2             lifecycle_1.0.4               multcomp_1.4-25               yaml_2.3.8                    mathjaxr_1.6-0               \n##  [46] SparseArray_1.2.4             Rtsne_0.17                    grid_4.3.2                    blob_1.2.4                    promises_1.2.1                crayon_1.5.2                  miniUI_0.1.1.1                lattice_0.22-5                KEGGREST_1.42.0              \n##  [55] pillar_1.9.0                  knitr_1.45                    rjson_0.2.21                  future.apply_1.11.1           codetools_0.2-19              leiden_0.4.3.1                mutoss_0.1-13                 glue_1.7.0                    data.table_1.15.2            \n##  [64] vctrs_0.6.5                   png_0.1-8                     spam_2.10-0                   Rdpack_2.6                    gtable_0.3.4                  cachem_1.0.8                  xfun_0.42                     S4Arrays_1.2.0                rbibutils_2.2.16             \n##  [73] mime_0.12                     survival_3.5-7                interactiveDisplayBase_1.38.0 ellipsis_0.3.2                fitdistrplus_1.1-11           TH.data_1.1-2                 ROCR_1.0-11                   nlme_3.1-164                  bit64_4.0.5                  \n##  [82] progress_1.2.3                filelock_1.0.3                RcppAnnoy_0.0.22              rprojroot_2.0.4               irlba_2.3.5.1                 KernSmooth_2.23-22            colorspace_2.1-0              DBI_1.2.2                     mnormt_2.1.1                 \n##  [91] tidyselect_1.2.0              bit_4.0.5                     compiler_4.3.2                curl_5.2.1                    xml2_1.3.6                    TFisher_0.2.0                 DelayedArray_0.28.0           plotly_4.10.4                 rtracklayer_1.62.0           \n## [100] lmtest_0.9-40                 rappdirs_0.3.3                digest_0.6.34                 goftest_1.2-3                 spatstat.utils_3.0-4          rmarkdown_2.25                XVector_0.42.0                htmltools_0.5.7               pkgconfig_2.0.3              \n## [109] sparseMatrixStats_1.14.0      fastmap_1.1.1                 rlang_1.1.3                   htmlwidgets_1.6.4             DelayedMatrixStats_1.24.0     shiny_1.8.0                   farver_2.1.1                  zoo_1.8-12                    jsonlite_1.8.8               \n## [118] BiocParallel_1.36.0           R.oo_1.26.0                   magrittr_2.0.3                GenomeInfoDbData_1.2.11       dotCall64_1.1-1               munsell_0.5.0                 Rcpp_1.0.12                   reticulate_1.35.0             stringi_1.8.3                \n## [127] zlibbioc_1.48.0               MASS_7.3-60.0.1               plyr_1.8.9                    parallel_4.3.2                listenv_0.9.1                 ggrepel_0.9.5                 deldir_2.0-2                  Biostrings_2.70.2             splines_4.3.2                \n## [136] tensor_1.5                    hms_1.1.3                     qqconf_1.3.2                  igraph_2.0.2                  spatstat.geom_3.2-9           RcppHNSW_0.6.0                reshape2_1.4.4                biomaRt_2.58.2                BiocVersion_3.17.1           \n## [145] XML_3.99-0.16.1               evaluate_0.23                 BiocManager_1.30.22           tzdb_0.4.0                    httpuv_1.6.14                 RANN_2.6.1                    polyclip_1.10-6               future_1.33.1                 scattermore_1.2              \n## [154] xtable_1.8-4                  restfulr_0.0.15               RSpectra_0.16-1               later_1.3.2                   viridisLite_0.4.2             ragg_1.2.7                    memoise_2.0.1                 GenomicAlignments_1.38.2      cluster_2.1.6                \n## [163] timechange_0.2.0              globals_0.16.2\n```\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}