{
  "hash": "d9fe7e60f22286caf1f8cfd79645f231",
  "result": {
    "markdown": "---\ntitle: \"Seurat V5 | Single Cell Data analysis\"\ndate: 2024-03-18\ndate-modified: last-modified\ncategories:\n  - seurat\n  - scrna\nimage: ./projects/scRNA-seq_online/img/scRNA-seq_cell_diversity.png\ndescription: All the learning materials are from credited or adapted from Harvard Chan Bioinformatics Core. \ndraft: true\nexecute: \n  freeze: true\n  eval: false\n\n---\n\n\n\n## Install and Load required packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages('Seurat')\n# library(Seurat)\n\n# setRepositories(\n#     ind = 1:3,\n#     addURLs = c(\n#         'https://satijalab.r-universe.dev', 'https://bnprks.r-universe.dev/'\n#     )\n# )\n# install.packages(c(\"BPCells\", \"presto\", \"glmGamPoi\"))\n\n# # Install the remotes package\n# if (!requireNamespace(\"remotes\", quietly = TRUE)) {\n#   install.packages(\"remotes\")\n# }\n\n# install.packages(\"Signac\")\n# remotes::install_github(\"satijalab/azimuth\", quiet = TRUE)\n# remotes::install_github(\"satijalab/seurat-data\", quiet = TRUE)\n# remotes::install_github(\"satijalab/seurat-wrappers\", quiet = TRUE)\n\n# BiocManager::install(c(\"AnnotationHub\", \"ensembldb\", \"multtest\", \"glmGamPoi\"))\n\n# InstallData(\"pbmcsca\")\n# InstallData(\"ifnb\")\n\nlibrary(fs)\nlibrary(here)\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(Seurat)\nlibrary(SeuratData)\nlibrary(SeuratWrappers)\nlibrary(Azimuth)\n# library(AnnotationHub)\n# library(ensembldb)\n\noptions(future.globals.maxSize = 3e+09)\n```\n:::\n\n\n## scRNA-seq integration Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# UpdateSeuratObject(ifnb)\n# install.packages(\n#   here(\"blog/2024/03/16/ifnb.SeuratData_3.1.0.tar.gz\"),\n#   repos = NULL, type = \"source\"\n# )\n\n# library(ifnb.SeuratData)\n\nifnb <- LoadData(\"ifnb\")\n\nifnb[[\"RNA\"]] <- split(ifnb[[\"RNA\"]], f = ifnb$stim)\n\nifnb[[]] |> head()\n```\n:::\n\n### Perform analysis without integration\n\n\n::: {.cell}\n\n```{.r .cell-code}\nifnb <- NormalizeData(ifnb) |>\n    FindVariableFeatures() |>\n    ScaleData() |>\n    RunPCA() |>\n    FindNeighbors(dims = 1:30, reduction = \"pca\") |>\n    FindClusters(resolution = 2, cluster.name = \"unintegrated_clusters\") |>\n    RunUMAP(\n        dims = 1:30, reduction = \"pca\", reduction.name = \"umap.unintegrated\"\n    )\n\np1 <- DimPlot(\n    ifnb, reduction = \"umap.unintegrated\",\n    group.by = c(\"stim\", \"seurat_clusters\")\n)\n```\n:::\n\n### Perform integration\n\n\n::: {.cell}\n\n```{.r .cell-code}\nifnb <- IntegrateLayers(\n    object = ifnb,\n    method = CCAIntegration,\n    orig.reduction = \"pca\",\n    new.reduction = \"integrated.cca\",\n    verbose = FALSE\n)\n\n### re-join layers after integration\nifnb[[\"RNA\"]] <- JoinLayers(ifnb[[\"RNA\"]])\n\nifnb <- FindNeighbors(ifnb, reduction = \"integrated.cca\", dims = 1:30) |>\n    FindClusters(resolution = 1) |>\n    RunUMAP(dims = 1:30, reduction = \"integrated.cca\")\n\np2 <- DimPlot(\n    ifnb, reduction = \"umap\", group.by = c(\"stim\", \"seurat_annotations\")\n)\n\nwrap_plots(p1, p2, ncol = 1)\n\nDimPlot(ifnb, reduction = \"umap\", split.by = \"stim\", label = TRUE)\n```\n:::\n\n### Identify canonical cell type marker genes that are conserved across conditions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Identify canonical cell type marker genes that are conserved across conditions\nIdents(ifnb) <- \"seurat_annotations\"\n\nnk.markers <- FindConservedMarkers(\n    ifnb, ident.1 = \"NK\", grouping.var = \"stim\", verbose = FALSE\n)\n\nhead(nk.markers)\n\nifnb[[]] |> head()\n\n### NEEDS TO BE FIXED AND SET ORDER CORRECTLY\nIdents(ifnb) <- factor(\n    Idents(ifnb),\n    levels = c(\n        \"pDC\", \"Eryth\", \"Mk\", \"DC\", \"CD14 Mono\", \"CD16 Mono\", \"B Activated\", \"B\",\n        \"CD8 T\", \"NK\", \"T activated\", \"CD4 Naive T\", \"CD4 Memory T\"\n    )\n)\n\nmarkers.to.plot <- c(\n    \"CD3D\", \"CREM\", \"HSPH1\", \"SELL\", \"GIMAP5\", \"CACYBP\", \"GNLY\", \"NKG7\", \"CCL5\",\n    \"CD8A\", \"MS4A1\", \"CD79A\", \"MIR155HG\", \"NME1\", \"FCGR3A\", \"VMO1\", \"CCL2\",\n    \"S100A9\", \"HLA-DQA1\", \"GPR183\", \"PPBP\", \"GNG11\", \"HBA2\", \"HBB\", \"TSPAN13\",\n    \"IL3RA\", \"IGJ\", \"PRSS57\"\n)\n\nDotPlot(\n    ifnb, features = markers.to.plot, cols = c(\"blue\", \"red\"),\n    dot.scale = 8, split.by = \"stim\"\n) +\n    RotatedAxis()\n```\n:::\n\n\n### Identify differential expressed genes across conditions\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_cowplot())\n\n### Compare gene expression before and after stimulation\naggregate_ifnb <- AggregateExpression(\n    ifnb, group.by = c(\"seurat_annotations\", \"stim\"), return.seurat = TRUE\n)\n\n### conserved interferon response pathway\ngenes.to.label = c(\n    \"ISG15\", \"LY6E\", \"IFI6\", \"ISG20\", \"MX1\", \"IFIT2\", \"IFIT1\", \"CXCL10\", \"CCL8\"\n)\n\np1 <- CellScatter(\n    aggregate_ifnb, \"CD14 Mono_CTRL\", \"CD14 Mono_STIM\",\n    highlight = genes.to.label\n)\n\np2 <- LabelPoints(plot = p1, points = genes.to.label, repel = TRUE)\n\np3 <- CellScatter(\n    aggregate_ifnb, \"CD4 Naive T_CTRL\", \"CD4 Naive T_STIM\",\n    highlight = genes.to.label\n)\n\np4 <- LabelPoints(plot = p3, points = genes.to.label, repel = TRUE)\n\np2 + p4\n\n### Find the genes that are different between stimulated and control B cells\nifnb$celltype.stim <- paste(ifnb$seurat_annotations, ifnb$stim, sep = \"_\")\n\nIdents(ifnb) <- \"celltype.stim\"\n\nlevels(Idents(ifnb))\n\nb.interferon.response <- FindMarkers(\n    ifnb, ident.1 = \"B_STIM\", ident.2 = \"B_CTRL\", verbose = FALSE\n)\n\nhead(b.interferon.response, n = 15)\n\nFeaturePlot(\n    ifnb,\n    features = c(\"CD3D\", \"GNLY\", \"IFI6\"),\n    split.by = \"stim\",\n    max.cutoff = 3,\n    cols = c(\"grey\", \"red\"),\n    reduction = \"umap\"\n)\n\nplots <- VlnPlot(\n    ifnb, features = c(\"LYZ\", \"ISG15\", \"CXCL10\"), split.by = \"stim\",\n    group.by = \"seurat_annotations\",\n    pt.size = 0, combine = FALSE\n)\nwrap_plots(plots = plots, ncol = 1)\n```\n:::\n\n\n### Perform integration with SCTransform-normalized datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nifnb <- LoadData(\"ifnb\")\n\nifnb[[\"RNA\"]] <- split(ifnb[[\"RNA\"]], f = ifnb$stim)\n\nifnb <- SCTransform(ifnb)\nifnb <- RunPCA(ifnb)\nifnb <- RunUMAP(ifnb, dims = 1:30)\nDimPlot(ifnb, reduction = \"umap\", group.by = c(\"stim\", \"seurat_annotations\"))\n\n### integrate datasets\nifnb <- IntegrateLayers(\n  object = ifnb, method = CCAIntegration, normalization.method = \"SCT\", \n  verbose = F\n)\nifnb <- FindNeighbors(ifnb, reduction = \"integrated.dr\", dims = 1:30)\nifnb <- FindClusters(ifnb, resolution = 0.6)\n\nifnb <- RunUMAP(ifnb, dims = 1:30, reduction = \"integrated.dr\")\nDimPlot(ifnb, reduction = \"umap\", group.by = c(\"stim\", \"seurat_annotations\"))\n\n### Perform differential expression\nifnb <- PrepSCTFindMarkers(ifnb)\nifnb$celltype.stim <- paste(ifnb$seurat_annotations, ifnb$stim, sep = \"_\")\nIdents(ifnb) <- \"celltype.stim\"\nb.interferon.response <- FindMarkers(\n  ifnb, ident.1 = \"B_STIM\", ident.2 = \"B_CTRL\", verbose = FALSE\n)\n```\n:::\n\n## DE analysis across conditions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Seurat)\nlibrary(SeuratData)\nlibrary(ggplot2)\nifnb <- LoadData(\"ifnb\")\nifnb[[]] |> head()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Find DE features between CD16 Mono and CD1 Mono\nifnb <- NormalizeData(ifnb)\nIdents(ifnb) <- \"seurat_annotations\"\nmonocyte.de.markers <- FindMarkers(\n    ifnb, ident.1 = \"CD16 Mono\", ident.2 = \"CD14 Mono\"\n)\nhead(monocyte.de.markers)\n\n### Find DE features between CD14+ Monocytes and all other cells\nmonocyte.de.markers <- FindMarkers(\n    ifnb, ident.1 = \"CD16 Mono\", ident.2 = NULL, only.pos = TRUE\n)\nhead(monocyte.de.markers)\n\n## Perform DE analysis within the same cell type across conditions\nifnb$celltype.stim <- paste(ifnb$seurat_annotations, ifnb$stim, sep = \"_\")\nifnb[[]] |> head()\nIdents(ifnb) <- \"celltype.stim\"\nmono.de <- FindMarkers(\n    ifnb, ident.1 = \"CD14 Mono_STIM\", ident.2 = \"CD14 Mono_CTRL\", \n    verbose = FALSE\n)\nhead(mono.de, n = 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Perform DE analysis after pseudobulking\n### load the inferred sample IDs of each cell\nctrl <- read.table(\n    url(\"https://raw.githubusercontent.com/yelabucsf/demuxlet_paper_code/master/fig3/ye1.ctrl.8.10.sm.best\"), \n    head = T, stringsAsFactors = F\n)\nstim <- read.table(\n    url(\"https://raw.githubusercontent.com/yelabucsf/demuxlet_paper_code/master/fig3/ye2.stim.8.10.sm.best\"), \n    head = T, stringsAsFactors = F\n)\ninfo <- rbind(ctrl, stim)\ninfo |> head()\n\n### Rename the cell IDs by substituting the '-' into '.'\ninfo$BARCODE <- gsub(pattern = \"\\\\-\", replacement = \"\\\\.\", info$BARCODE)\n\n### only keep the cells with high-confidence sample ID\ninfo <- info[grep(pattern = \"SNG\", x = info$BEST), ]\n\n### Remove cells with duplicated IDs in both ctrl and stim groups\ninfo <- info[!duplicated(info$BARCODE) & !duplicated(info$BARCODE, fromLast = T), ]\n\n### now add the sample IDs to ifnb \nrownames(info) <- info$BARCODE\ninfo <- info[, c(\"BEST\"), drop = F]\nnames(info) <- c(\"donor_id\")\ninfo |> head()\nifnb[[]] |> head()\nifnb <- AddMetaData(ifnb, metadata = info)\nifnb[[]] |> head()\n\n### remove cells without donor IDs\nifnb$donor_id[is.na(ifnb$donor_id)] <- \"unknown\"\nifnb <- subset(ifnb, subset = donor_id != \"unknown\")\nunique(ifnb$donor_id)\nunique(ifnb$stim)\nunique(ifnb$seurat_annotations)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Pseudobulk the counts based on donor-condition-celltype\npseudo_ifnb <- AggregateExpression(\n    ifnb, assays = \"RNA\",\n    return.seurat = T,\n    group.by = c(\"stim\", \"donor_id\", \"seurat_annotations\")\n)\n### Each cell is a donor-condition-celltype pseudobulk profile\npseudo_ifnb[[]] |> head()\ntail(Cells(pseudo_ifnb))\n\npseudo_ifnb$celltype.stim <- paste(\n    pseudo_ifnb$seurat_annotations, pseudo_ifnb$stim, sep = \"_\"\n)\n\n### Perform DE testing on the pseudobulk level for CD14 monocytes, and compare it against the previous single-cell-level DE results.\nIdents(pseudo_ifnb) <- \"celltype.stim\"\nbulk.mono.de <- FindMarkers(\n    object = pseudo_ifnb,\n    ident.1 = \"CD14 Mono_STIM\",\n    ident.2 = \"CD14 Mono_CTRL\",\n    test.use = \"DESeq2\"\n)\nhead(bulk.mono.de, n = 15)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Compare the DE P-values between the single-cell level and the pseudobulk level results\nnames(bulk.mono.de) <- paste0(names(bulk.mono.de), \".bulk\")\nbulk.mono.de$gene <- rownames(bulk.mono.de)\n\nnames(mono.de) <- paste0(names(mono.de), \".sc\")\nmono.de$gene <- rownames(mono.de)\n\nmerge_dat <- merge(mono.de, bulk.mono.de, by = \"gene\")\nmerge_dat <- merge_dat[order(merge_dat$p_val.bulk), ]\n\n### Number of genes that are marginally significant in both; marginally significant only in bulk; and marginally significant only in single-cell\ncommon <- merge_dat$gene[\n    which(merge_dat$p_val.bulk < 0.05 & merge_dat$p_val.sc < 0.05)\n]\nonly_sc <- merge_dat$gene[\n    which(merge_dat$p_val.bulk > 0.05 & merge_dat$p_val.sc < 0.05)\n]\nonly_bulk <- merge_dat$gene[\n    which(merge_dat$p_val.bulk < 0.05 & merge_dat$p_val.sc > 0.05)\n]\nprint(paste0('# Common: ', length(common)))\nprint(paste0('# Only in single-cell: ',length(only_sc)))\nprint(paste0('# Only in bulk: ',length(only_bulk)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Examine the top genes that are differentially expressed in both analyses.\nifnb$donor_id.stim <- paste0(ifnb$stim, \"-\", ifnb$donor_id)\nIdents(ifnb) <- \"celltype.stim\"\nhead(merge_dat)\nprint(\n    merge_dat[merge_dat$gene %in% common[1:2], c(\"gene\", \"p_val.sc\", \"p_val.bulk\")]\n)\nVlnPlot(\n    ifnb, \n    features = common[1:2], \n    idents = c(\"CD14 Mono_CTRL\", \"CD14 Mono_STIM\"), \n    group.by = \"stim\"\n)\nVlnPlot(\n    ifnb, features = common[1:2], \n    idents = c(\"CD14 Mono_CTRL\", \"CD14 Mono_STIM\"), \n    group.by = \"donor_id.stim\", \n    ncol = 1\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\n    merge_dat[\n        merge_dat$gene %in% c('SRGN', 'HLA-DRA'), c('gene', 'p_val.sc', 'p_val.bulk')\n    ]\n)\nVlnPlot(\n    ifnb, features = c('SRGN','HLA-DRA'), \n    idents = c(\"CD14 Mono_CTRL\", \"CD14 Mono_STIM\"), \n    group.by = \"stim\", pt.size = 0\n)\nVlnPlot(\n    ifnb, \n    features = c('SRGN','HLA-DRA'), \n    idents = c(\"CD14 Mono_CTRL\", \"CD14 Mono_STIM\"), \n    group.by = \"donor_id.stim\", \n    ncol = 1, pt.size = 0\n)\n```\n:::\n\n## Azimuth annotation\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbmcsca <- LoadData(\"pbmcsca\")\n\npbmcsca[[]] |> head()\n\npbmcsca <- RunAzimuth(pbmcsca, reference = \"pbmcref\")\n\npbmcsca[[]][1:6, ]\n\npbmcsca <- RunAzimuth(pbmcsca, reference = \"pbmcref\")\n\np1 <- DimPlot(\n    pbmcsca, group.by = \"predicted.celltype.l2\", label = TRUE, label.size = 3\n) +\n    NoLegend()\n\np2 <- DimPlot(pbmcsca, group.by = \"Method\")\np1 + p2\n\npbmcsca <- NormalizeData(pbmcsca)\n\nIdents(pbmcsca) <- \"predicted.celltype.l2\"\ntable(Idents(pbmcsca))\n\n### CCR7 on CD4 and CD8 Naive T cells\np1 <- FeaturePlot(pbmcsca, features = \"CCR7\")\n\n### FCGR3A on CD16+ monocytes, CD56dim NK cells, and cytotoxic CD8 T cells\np2 <- FeaturePlot(pbmcsca, features = \"FCGR3A\")\n\n### AXL on rare populations of AXL+SIGLEC6+ dendritic cells\np3 <- VlnPlot(\n  pbmcsca, features = \"AXL\", group.by = \"predicted.celltype.l2\", \n  idents = c(\"ASDC\",\"pDC\", \"cDC1\", \"cDC2\")\n)\np4 <- FeaturePlot(pbmcsca, features = \"predictionscorecelltypel2_Treg\")\n\n### Prediction scores for the annotation CD4+ regulatory T cells (Treg)\np1 + p2 + p3 + p4 + plot_layout(ncol = 2)\n```\n:::\n\n\n## AddModuleScore for gene sets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Seurat)\nlibrary(SeuratData)\ngetOption(\"timeout\")\noptions(timeout = 10000)\n# InstallData(\"pbmc3k\")\n\ndata(\"pbmc3k\")\npbmc3k <- UpdateSeuratObject(pbmc3k)\n\nsce <- UpdateSeuratObject(pbmc3k.final)\ntable(Idents(sce))\nDimPlot(sce, label = T)\nDimPlot(sce, label = T, group.by = \"seurat_clusters\")\n\n\ngs  <-  list(\n    DC1 = c('Clec9a', 'Xcr1', 'Wdfy4'),\n    DC2 = c('Itgax', 'Sirpa', 'Cd209a'),\n    mregDCs = c('Ccr7', 'Cd80', 'Cd200', 'Cd247'),\n    hypoxia = c('Hif1a', 'Slc2a1', 'Vegfa', 'Hmox1',\n        'Bnip3', 'Nos2', 'Mmp2', 'Sod3',\n        'Cited2', 'Ldha')\n)\ngs  <-  lapply(gs, toupper)\n\nsce[[]] |> head()\nsce  <-  AddModuleScore(object = sce, gs)\ncolnames(sce@meta.data)\nFeaturePlot(sce, 'Cluster1')\nVlnPlot(sce, 'Cluster4')\nncol(sce@meta.data)\nac = sce@meta.data[, 4, drop = F]\npheatmap::pheatmap(sce@meta.data[, 8:11],\n    show_rownames = F,\n    annotation_row = ac)\n\n\np=VlnPlot(sce,'Cluster4')\nlibrary(ggpubr)\ndf = aggregate(p$data$Cluster4,list(p$data$ident),median)\nggbarplot(df,'Group.1','x') + coord_flip()    \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}