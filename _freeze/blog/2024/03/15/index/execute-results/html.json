{
  "hash": "571ef54024f4a94359ce8e8d7ff08d3a",
  "result": {
    "markdown": "---\ntitle: \"Analysis of single cell RNA-seq data with {SingleCellExperiment}\"\ndate: 2024-03-15\ndate-modified: last-modified\ncategories:\n  - scrna\nimage: singlecellexperiment.png\ndescription: Using SingleCellExperiment object to analysis single cell data\nexecute: \n  freeze: true\n  eval: false\n---\n\n\n\n\n\n::: {.callout-note}\nAll the contents are credited or adapted from [Analysis of single cell RNA-seq data](https://www.singlecellcourse.org/index.html) for leaning purpose.\n:::\n\n## Initial general setup \n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Install and load packatges \n# if (!require(\"BiocManager\", quietly = TRUE))\n#     install.packages(\"BiocManager\")\n# BiocManager::install(version = \"3.18\")\n# BiocManager::install(\n#     c(\n#         \"scater\", \"SingleCellExperiment\", \"AnnotationDbi\", \"org.Hs.eg.db\",\n#         \"EnsDb.Hsapiens.v86\"\n#     ),\n#     force = TRUE\n# )\nlibrary(here)\nlibrary(tidyverse)\nlibrary(scater)\nlibrary(SingleCellExperiment)\nlibrary(AnnotationDbi)\nlibrary(org.Hs.eg.db)\nlibrary(EnsDb.Hsapiens.v86)\nlibrary(scales)\n\n### Project dir\ndir <- here(\"projects/2024_SCE_Course\")\n```\n:::\n\n\n## Qualtity control\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Creating a SingleCellExperiment object \nmolecules <- read.delim(here(dir, \"data/tung/molecules.txt\"), row.names = 1)\nannotation <- read.delim(\n    here(dir, \"data/tung/annotation.txt\"), stringsAsFactors = TRUE\n)\n\nhead(molecules[, 1:3])\nhead(annotation)\n\numi <- SingleCellExperiment(\n    assays = list(counts = as.matrix(molecules)), \n    colData = annotation\n)\numi\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Remove ERCC spike-ins features\naltExp(umi,\"ERCC\") <- umi[grep(\"^ERCC-\",rownames(umi)), ]\numi <- umi[grep(\"^ERCC-\",rownames(umi), invert = TRUE), ]\numi\n\n## Map Ensembl IDs to gene symbols\ngene_names <- mapIds(\n    org.Hs.eg.db,\n    keys = rownames(umi),\n    keytype = \"ENSEMBL\",\n    columns = \"SYMBOL\",\n    column = \"SYMBOL\"\n)\n\nhead(gene_names)\nclass(gene_names)\n\n## 903 returned NA\nrowData(umi)$SYMBOL <- gene_names\ntable(is.na(gene_names))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Remove all genes for which no symbols were found\numi <- umi[!is.na(rowData(umi)$SYMBOL), ]\n\n##  Returns no mitrochandrial proteins in the newly annotated symbols\ngrep(\"^MT-\", rowData(umi)$SYMBOL, value = TRUE)\n\n## Find rebosomal proteins\ngrep(\"^RP[LS]\", rowData(umi)$SYMBOL, value = TRUE)\n\n## Annotation problems: mitochondrial protein ATP8 can be found\ngrep(\"ATP8\", rowData(umi)$SYMBOL, value = TRUE)\n\ncolumns(org.Hs.eg.db)\n\n## Use a more detailed database\nensdb_genes <- genes(EnsDb.Hsapiens.v86)\n\n## Find 13 protein-coding genes located in the mitochondrion\nMT_names <- ensdb_genes[seqnames(ensdb_genes) == \"MT\"]$gene_id\n\n# MT_names <- ensdb_genes[seqnames(ensdb_genes) == \"MT\"]$gene_name\nis_mito <- rownames(umi) %in% MT_names\ntable(is_mito)\n```\n:::\n\n\n### Baseic QC\n\n\n::: {.cell}\n\n```{.r .cell-code}\numi_cell <- scater::perCellQCMetrics(umi, subsets = list(Mito = is_mito))\nhead(umi_cell)\n\numi_feature <- scater::perFeatureQCMetrics(umi)\nhead(umi_feature)\n\n## Add the metrics\numi <- addPerCellQC(umi, subsets = list(Mito = is_mito))\numi <- addPerFeatureQC(umi)\n\n## Manual filtering\nhist(umi$total, breaks = 100)\nabline(v = 25000, col = \"red\")\n\nhist(umi_cell$detected, breaks = 100)\nabline(v = 7000, col = \"red\")\n```\n:::\n\n\nLow number of detected genes, but high MT gene percentage, are hallmarks of a low quality cell\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## adaptive threshold can help us identify points that are more than\n## 3 median absolute deviations (MADs)\nqc.lib2 <- isOutlier(umi_cell$sum, log = TRUE, type = \"lower\")\nattr(qc.lib2, \"thresholds\")\n\nqc.nexprs2 <- isOutlier(umi_cell$detected, log = TRUE, type = \"lower\")\nattr(qc.nexprs2, \"thresholds\")\n\nqc.spike2 <- isOutlier(umi_cell$altexps_ERCC_percent, type = \"higher\")\nattr(qc.spike2, \"thresholds\")\n\nqc.mito2 <- isOutlier(umi_cell$subsets_Mito_percent, type = \"higher\")\nattr(qc.mito2, \"thresholds\")\n\ndiscard2 <- qc.lib2 | qc.nexprs2 | qc.spike2 | qc.mito2\n\nDataFrame(\n    LibSize = sum(qc.lib2), NExprs = sum(qc.nexprs2),\n    SpikeProp = sum(qc.spike2), MitoProp = sum(qc.mito2), Total = sum(discard2)\n)\n\nreasons <- quickPerCellQC(\n    umi_cell,\n    sub.fields = c(\"subsets_Mito_percent\", \"altexps_ERCC_percent\")\n)\ncolSums(as.matrix(reasons))\n\numi$discard <- reasons$discard\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Plotting various coldata (cell-level medadata) assays against each other\nplotColData(umi, x = \"sum\", y = \"subsets_Mito_percent\", colour_by = \"discard\")\nplotColData(umi, x = \"sum\", y = \"detected\", colour_by = \"discard\")\nplotColData(\n    umi, x = \"altexps_ERCC_percent\", \n    y = \"subsets_Mito_percent\", colour_by = \"discard\"\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## splitting by batches to see if there are substantial batch-specific differences\nplotColData(\n    umi, x = \"sum\", y = \"detected\", colour_by = \"discard\", \n    other_fields = \"individual\"\n) +\n    facet_wrap(~individual) + \n    scale_x_continuous(labels = unit_format(unit = \"k\", scale = 1e-3))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplotColData(\n    umi, x = \"sum\", y = \"detected\", colour_by = \"discard\", other_fields = \"replicate\"\n) +\n    facet_wrap(~replicate) +\n    scale_x_continuous(labels = unit_format(unit = \"k\", scale = 1e-3))\n```\n:::\n\n\n### Highly expressed genes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Most of the genes we see are mitochondrial or ribosomal proteins, which is pretty typical for most scRNA-seq datasets.\nplotHighestExprs(\n    umi, exprs_values = \"counts\",\n    feature_names_to_plot = \"SYMBOL\", colour_cells_by = \"detected\"\n)\n```\n:::\n\n\nkeep the genes which were detected (expression value > 1) in 2 or more cells. Weâ€™ll discard approximately 4,000 weakly expressed genes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkeep_feature <- nexprs(umi, byrow = TRUE, detection_limit = 1) >= 2\nrowData(umi)$discard <- !keep_feature\ntable(rowData(umi)$discard)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nassay(umi, \"logcounts_raw\") <- log2(counts(umi) + 1)\n# saveRDS(umi, file = here(dir, \"data/tung/umi.rds\"))\n```\n:::\n\n\n## Dimensionality reduction\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Remove unnecessary poorly expressed genes and low quality cells\numi.qc <- umi[!rowData(umi)$discard, !colData(umi)$discard]\numi.qc\n```\n:::\n\n\nWithout log-transformation or normalization, PCA plot fails to separate the datasets by replicate or individual. We mostly see the effects of sequencing depth - samples (cells) with lots of expression, and particularly highly expressed genes, dominate the PCs\n\n### Before QC \n\n::: {.cell}\n\n```{.r .cell-code}\n## Before QC, Without log-transformation or normalization\numi <- runPCA(umi, exprs_values = \"counts\")\ndim(reducedDim(umi, \"PCA\"))\np1 <- plotPCA(\n    umi, \n    colour_by = \"batch\", \n    size_by = \"detected\", \n    shape_by = \"individual\"\n)\n```\n:::\n\n\nWith log-transformation, we equalize the large difference between strongly and weakly expressed genes, and immediately see cells form groups by replicate, individual, and sequencing depth.\n\n\n::: {.cell}\n\n```{.r .cell-code}\numi <- runPCA(umi, exprs_values = \"logcounts_raw\")\ndim(reducedDim(umi, \"PCA\"))\np2 <- plotPCA(\n    umi,\n    colour_by = \"batch\",\n    size_by = \"detected\",\n    shape_by = \"individual\"\n)   \n\npatchwork::wrap_plots(p1, p2, ncol = 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123456)\numi <- runTSNE(umi, exprs_values = \"logcounts_raw\", perplexity = 130)\nplotTSNE(\n    umi,\n    colour_by = \"batch\",\n    size_by = \"detected\",\n    shape_by = \"individual\"\n)\n```\n:::\n\n\n### After QC\n\n::: {.cell}\n\n```{.r .cell-code}\numi.qc <- runPCA(umi.qc, exprs_values = \"logcounts_raw\")\ndim(reducedDim(umi.qc, \"PCA\"))\nplotPCA(\n    umi.qc,\n    colour_by = \"batch\",\n    size_by = \"detected\",\n    shape_by = \"individual\"\n)\n\nset.seed(123456)\numi.qc <- runTSNE(umi.qc, exprs_values = \"logcounts_raw\", perplexity = 130)\nplotTSNE(\n    umi.qc, \n    colour_by = \"batch\",\n    size_by = \"detected\",\n    shape_by = \"individual\"\n)\n```\n:::\n\n### Identifying confounding factors \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Detected genes\nlogcounts(umi.qc) <- assay(umi.qc, \"logcounts_raw\")\ngetExplanatoryPCs(umi.qc,variables = \"sum\")\n\n## PC1 can be almost completely (86%) explained by the total UMI counts (sequencing depth)\nplotExplanatoryPCs(umi.qc,variables = \"sum\") \nlogcounts(umi.qc) <- NULL\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplotExplanatoryVariables(\n    umi.qc,\n    exprs_values = \"logcounts_raw\",\n    variables = c(\n        \"detected\", \"sum\", \"batch\",\n        \"individual\", \"altexps_ERCC_percent\", \"subsets_Mito_percent\"\n    )\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}