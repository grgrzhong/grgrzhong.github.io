{
  "hash": "14d73b204c5c5a6573b7232fc71c960d",
  "result": {
    "markdown": "---\ntitle: \"A comprehensive single-cell map of T cell exhaustion-associated immune environments in human breast cancer\"\ndate: 2024-04-03\ndate-modified: last-modified\ncategories:\n  - scrna\n  - paper\nimage: BCexh.png\n# description: All the learning materials are from credited or adapted from Harvard Chan Bioinformatics Core. \nexecute: \n  freeze: true\n  eval: false\n---\n\n\n\n\n## Load libraries and data\n\n::: {.cell}\n\n```{.r .cell-code}\n### Install and Load required packages\n# if (!any(rownames(installed.packages()) == \"DoubletFinder\")){\n#   remotes::install_github('chris-mcginnis-ucsf/DoubletFinder')\n# }\n\nlibrary(fs)\nlibrary(here)\nlibrary(patchwork)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(ggpubr)\nlibrary(rstatix)\nlibrary(Seurat)\nlibrary(DoubletFinder)\nlibrary(magrittr)\nlibrary(clustree)\nlibrary(magrittr)\nlibrary(RColorBrewer)\nlibrary(corrplot)\nlibrary(pheatmap)\nlibrary(ComplexHeatmap)\nlibrary(scales)\nlibrary(viridis)\nlibrary(circlize)\nlibrary(ggrepel)\n\noptions(future.globals.maxSize = 8e9)\noutput_path <- here(\"projects/2023_NC_BCexh/BCexh_scRNAseq/output\")\n```\n:::\n\n\n## Preprocess scRNAseq Data \n\n\n### Save raw Data\n\n[](raw_matrix.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Project directory\nproject_dir <- here(\"projects/2023_NC_BCexh\")\n\n### Directory for scRNA data\ninput_path <- here(project_dir, \"BCexh_scRNAseq/data\")\noutput_path <- here(\"projects/2023_NC_BCexh/BCexh_scRNAseq/output\")\n\n### Get a list of sample names for creating seurat object from clinical info\nsample_list <- read_excel(\n    here(project_dir, \"supp_data\", \"Supplementary Data1.xlsx\"),\n    ### start from row3\n    skip = 2\n) |>\n    pull(\"Patient ID\") |>\n    map_chr(~ glue::glue(\"T{.x}\"))\n\n### load data to a list\nobj_list <- list()\nfor (sample in sample_list) {\n\n    ### Read counts matrix\n    counts <- read.table(\n        here(input_path, paste0(sample, \"_singlecell_count_matrix.txt\")),\n        sep = \"\\t\"\n    )\n\n    ### Create seurat object\n    obj <- CreateSeuratObject(\n        counts = counts,\n        min.cells = 5, min.features = 200, project = sample\n    )\n\n    ### Retrieve cell barcodes after filtering\n    cell_ids <- colnames(obj)\n\n    ### Read metadata with annotation\n    metadata <- read.table(\n        here(input_path, paste0(sample, \"_complete_singlecell_metadata.txt\")),\n        sep = \"\\t\",\n        header = TRUE\n    )\n\n    ### Align the cell barcode\n    metadata <- metadata |>\n        separate_wider_delim(\n            cellID, delim = \"_\", names = c(\"sample_id\", \"cell_barcode\"),\n            cols_remove = FALSE\n        ) |>\n        mutate(cell_barcode = paste0(cell_barcode, \".1\")) |>\n        column_to_rownames(var = \"cell_barcode\") |>\n        select(-sample_id)\n\n    metadata <- metadata[cell_ids, ]\n\n    metadata$nCount_RNA <- obj$nCount_RNA\n    metadata$nFeature_RNA <- obj$nFeature_RNA\n\n    # all(rownames(metadata) == colnames(obj))\n\n    ### Assign metadata with new cell barcode\n    # obj <- AddMetaData(object = obj, metadata = metadata)\n\n    obj@meta.data <- metadata\n\n    ### Save new obj\n    obj_list[[sample]] <- obj\n\n}\n\n### There are 4,.75 GB\nlobstr::obj_size(obj_list)\n\n### Look at the cells and genes for each sample\ndo.call(rbind, lapply(obj_list, dim))\n\n### Save data for later exploration\nfs::dir_create(output_path)\n\nfor (sample in names(obj_list)) {\n\n    obj <- obj_list[[sample]]\n\n    ### Calculate mitotic/ribosomal percentage\n    obj <- PercentageFeatureSet(\n        obj, pattern = \"^MT-\", col.name = \"percent_mito\"\n    )\n\n    obj <- PercentageFeatureSet(\n        obj, pattern = \"^RP[LS]\", col.name = \"percent_ribo\"\n    )\n    \n    ### Save \n    saveRDS(\n        obj, here(output_path, paste0(sample, \".rds\")), \n        compress = \"xz\"\n    )\n}\n```\n:::\n\n\n### Finding out doublet\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Run standard worlflow\nobj_list <- map(obj_list, .f = ~ NormalizeData(.x))\nobj_list <- map(obj_list, .f = ~ ScaleData(.x))\nobj_list <- map(obj_list, .f = ~ FindVariableFeatures(.x\n            x.low.cutoff = 0.0125, y.cutoff = 0.25, do.plot = FALSE\n        ))\n\nobj_list <- map(\n    obj_list,\n    .f = ~ RunPCA(.x, features = VariableFeatures(obj), verbose = FALSE)\n)\n\nobj_list <- map(\n    obj_list,\n    .f = ~ RunTSNE(.x, dims = 1:10) |>\n        RunUMAP(dims = 1:10) |>\n        FindNeighbors(dims = 1:10) |>\n        ### Low resolution clustering as basis for homotypic doublet model.\n        FindClusters(resolution = 0.4)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Load data\noutput_path <- here(\"projects/2023_NC_BCexh/BCexh_scRNAseq/output\")\n\n# obj_list$TBB011[[]] |> head()\n\n### Inspect PCA\nplots <- list()\nfor (sample in names(obj_list)) {\n\n    plots[[sample]] <- ElbowPlot(object = obj_list[[sample]], ndim = 30) +\n        labs(title = sample) + \n        FontSize(x.text = 8, y.text = 8, x.title = 8, y.title = 8, main = 8)\n\n}\npatchwork::wrap_plots(plots[1:4], ncol = 2)\n\n# DimHeatmap(obj_list$TBB102, dims = 10:30, cells = 500, balanced = TRUE)\n# FeaturePlot(obj_list$TBB102, reduction = \"tsne\", features = \"nFeature_RNA\")\n# DimPlot(obj_list$TBB102, label = TRUE, group.by = \"RNA_snn_res.0.4\")\n# DimPlot(obj_list$TBB102, label = TRUE, reduction = \"tsne\")\n\n# obj_list$TBB011[[]] |> head()\n\n### Glimpse QC metrics\nVlnPlot(\n    obj_list$TBB011,\n    features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent_mito\"),\n    ncol = 1, pt.size = 0, sort = FALSE, log = TRUE\n)\n\n### Cell type\nFeaturePlot(\n    obj_list$TBB011, reduction = \"umap\", ncol = 2,\n    features = c(\"CD3E\", \"CD14\", \"PTPRC\", \"EPCAM\", \"PECAM1\", \"FAP\")\n)\n\n### Varify DoubletFinder\ntable(obj_list$TBB011$excl_doublet)\nUMAPPlot(\n    obj_list$TBB011, group.by = \"excl_doublet\",\n    # order = c(TRUE, FALSE),\n    cols = c(\"black\", \"red\")\n)\n\ntable(\n  obj_list$TBB011@meta.data$excl_doublet, \n  obj_list$TBB011@meta.data$RNA_snn_res.0.4\n)\n\nobj_list$TBB011[[]] |> head()\n### Sanity checks\nDimPlot(obj_list$TBB011, label = TRUE)\nDotPlot(obj_list$TBB011, features = c(\"CD3E\", \"CD14\", \"PTPRC\", \"EPCAM\"))\nFeaturePlot(obj_list$TBB011, features = c(\"CD3E\", \"CD14\", \"PTPRC\", \"EPCAM\"))\nFeaturePlot(obj_list$TBB011, features = c(\"FAP\", \"PECAM1\", \"PTPRC\", \"EPCAM\"))\nFeaturePlot(obj_list$TBB011, features = c(\"CD14\", \"CD3E\"))\nFeaturePlot(obj_list$TBB011, features = c(\"MKI67\"), split.by = \"excl_doublet\")\n```\n:::\n\n\n### Aggregate samples and General QC\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Clear environment\nrm(list = ls())\ngc()\n\n### Output directory\noutput_path <- here(\"projects/2023_NC_BCexh/BCexh_scRNAseq/output\")\n\n### Samples to load\nsample_list <- c(\n    ### IE1 \n        # \"TBB011\",\n        # \"TBB111\",\n        # \"TBB129\",\n        \"TBB165\",\n        \"TBB171\",\n        # \"TBB184\",\n        # \"TBB338\",\n    \n    ### IE2\n        # \"TBB035\",\n        # \"TBB075\",\n        # \"TBB102\",\n        # \"TBB212\",\n        # \"TBB214\",\n        \"TBB226\",\n        \"TBB330\"\n    )\n\n### Load 3IE1 vs 3IE2 samples for easier  processing\nobj_list <- list()\nfor (sample in sample_list) {\n    ### Load data\n    obj <- readRDS(here(output_path, paste0(sample, \".rds\")))\n    \n    obj_list[[sample]] <- obj\n}\n\n### Merge objects\nmerged_pre_filter <- merge(\n    x = obj_list[[1]], y = obj_list[-1], add.cell.ids = names(obj_list)\n)\n\n### Remove for efficient memory\nrm(obj_list, obj)\n\n### Need to Join layers in Seurat V5\nmerged_pre_filter[[\"RNA\"]] <- JoinLayers(merged_pre_filter[[\"RNA\"]])\n\n### Excluding high-confidence doublets\ntable(merged_pre_filter$sample, merged_pre_filter$excl_doublet)\nmerged_pre_filter <- subset(merged_pre_filter, subset = excl_doublet == FALSE)\n\n### Save\nlobstr::obj_size(merged_pre_filter)\nsaveRDS(\n    merged_pre_filter, here(output_path, \"merged_pre_filter.rds\"), \n    compress = \"xz\"\n)\n```\n:::\n\n\n### Inspect the quality to setup QC cutoff\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput_path <- here(\"projects/2023_NC_BCexh/BCexh_scRNAseq/output\")\nmerged_pre_filter <- readRDS(here(output_path, \"merged_pre_filter.rds\"))\n\n### Vlnplot\nVlnPlot(\n    merged_pre_filter, \n    features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent_mito\"),\n    ncol = 3, pt.size = 0, sort = FALSE, log = TRUE\n)\n\n### Density plot\nplot(\n    density(merged_pre_filter@meta.data$percent_mito), \n    main = \"Mitochondrial Percentage Density Plot\", \n    xlab = \"Percent Mitochondrial Genes\"\n)\nplot(\n    density(merged_pre_filter@meta.data$nCount_RNA), \n    main = \"Total Reads\", \n    xlab = \"Total Reads per Cell\"\n)\nplot(\n    density(merged_pre_filter@meta.data$nFeature_RNA), \n    main = \"Number of detected genes\", \n    xlab = \"Deteced Genes per cell\"\n)\n\n### Filtering low quality cells\nmerged_post_filter <- subset(\n    merged_pre_filter,\n    subset = nFeature_RNA > 200 &\n        nFeature_RNA < 7500 &\n        percent_mito < 20 &\n        nCount_RNA < 75000\n)\n\n### Compare filtered and unfiltered\ntable(merged_pre_filter@meta.data$sample)\ntable(merged_post_filter@meta.data$sample)\n\n### Save cell count data for each sample\ncells_per_sample <- table(merged_post_filter@meta.data$sample)\nwrite.csv(\n    cells_per_sample, \n    here(output_path, \"CellsPerSample_postFilter.csv\"),\n    row.names = FALSE\n)\n\n### Save mean reads and median gene counts per cell for each sample\nmean_reads <- as_tibble(\n    merged_post_filter@meta.data[, c(\"sample\", \"nCount_RNA\", \"nFeature_RNA\")]\n) |> \ngroup_by(sample) |> \nsummarise(\n    mean_reads = mean(nCount_RNA), \n    median_genes = median(nFeature_RNA),\n    .groups = \"drop\"\n)\nwrite.csv(mean_reads, here(output_path, \"postfilter_stats.csv\"))\n\n### Save\nsaveRDS(\n    merged_post_filter, \n    here(output_path, \"merged_post_filter.rds\"), compress = \"xz\"\n)\n```\n:::\n\n\n### Run standard workflow\n\n::: {.cell}\n\n```{.r .cell-code}\n# future::plan(\"multiprocess\", workers = 2)\n# options(future.globals.maxSize = 5* 1000 * 1024^2)\n\nmerged_post_filter <- readRDS(here(output_path, \"merged_post_filter.rds\"))\n\n### Normalization, scaling\nmerged_post_filter <- merged_post_filter |>\n    NormalizeData() |>\n    ScaleData() |>\n    FindVariableFeatures(\n        x.low.cutoff = 0.0125, y.cutoff = 0.25, do.plot = FALSE\n    )\n\n### This single command replaces NormalizeData(), ScaleData(), and FindVariableFeatures()\n# merged_post_filter <- SCTransform(merged_post_filter, verbose = TRUE)\n\n### PCA\nmerged_post_filter <- RunPCA(\n    merged_post_filter,\n    features = VariableFeatures(merged_post_filter),\n    verbose = FALSE\n)\n\n### Examine and visualize PCA results in a few different ways\nprint(\n    x = merged_post_filter[['pca']],\n    dims = 1:5, nfeatures = 5, projected = FALSE\n)\n\n### For easy exploration of the primary sources of heterogeneity in a dataset\n# DimHeatmap(merged_post_filter, dims = 1:6, cells = 500, balanced = TRUE)\n# VizDimLoadings(merged_post_filter, dims = 1:2)\nElbowPlot(merged_post_filter, ndim = 50)\n\n### Clustree analysis\n# p  <- clustree(\n#     merged_post_filter, prefix = \"RNA_snn_res.\", exprs = \"scale.data\"\n# )\n\n### Graph-based clustering\nmerged_post_filter <- merged_post_filter |> \n    FindNeighbors(dims = 1:27) |> \n    FindClusters(resolution = 2) |> \n    RunUMAP(dims = 1:27)\n\n### If the clusters are not ordered correctly:\n# cluster_order <- c(0:57)\n# merged_post_filter@active.ident <- factor(x = merged_post_filter@active.ident, levels = cluster_order)\n\n### Inspect cluster\np1 <- DimPlot(merged_post_filter, reduction = \"umap\", group.by = \"sample\") +\n    theme(legend.position = \"top\")\np2 <- DimPlot(merged_post_filter, reduction = \"umap\", group.by = \"cell_type\") +\n    theme(legend.position = \"top\")\np1 + p2 + plot_layout(nrow = 1)\n\n### Check marker expression\nFeaturePlot(\n    merged_post_filter, reduction = \"umap\",\n    features = c(\"PECAM1\", \"EPCAM\", \"FAP\", \"PTPRC\", \"CD3E\", \"CD14\")\n)\n\n### Save object to easily load it back without re-running computationally \n### intensive steps above\nlobstr::obj_size(merged_post_filter)\nsaveRDS(\n    merged_post_filter,\n    here(output_path, \"merged_complete_umap.rds\"),\n    compress = \"xz\"\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Load data\nmerged_post_filter <- readRDS(here(output_path, \"merged_complete_umap.rds\"))\n\n### Query number of clusters and cells per cluster\ncells_per_cluster <- table(merged_post_filter@meta.data$RNA_snn_res.2)\nwrite.csv(\n    cells_per_cluster,\n    here(output_path, \"dim27_res2_CellsPerCluster.csv\"),\n    row.names = FALSE\n)\n\n### Cluster proportions by sample\ncluster_sample <- table(\n    Idents(merged_post_filter), merged_post_filter$sample\n)\nwrite.csv(\n    cluster_sample, \n    here(output_path, \"cellnr_per_cluster_bySample.csv\"), \n    row.names = TRUE\n)\n\ncluster_sample_prop <- prop.table(\n    table(Idents(merged_post_filter), merged_post_filter$sample), \n    margin = 2\n)\nwrite.csv(\n    cluster_sample_prop, \n    here(output_path, \"cluster_samples_proportions.csv\"), \n    row.names = TRUE\n)\n```\n:::\n\n### Finding DEG for clusters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nIdents(merged_post_filter) <- merged_post_filter$seurat_clusters\ncluster_markers_mast <- FindAllMarkers(\n    merged_post_filter,\n    # test.use = \"MAST\",\n    only.pos = TRUE, min.pct = 0.25,\n    logfc.threshold = 0.25,\n)\nwrite.csv(\n    cluster_markers_mast,\n    here(output_path, \"DE_cluster_AllMarkerGenes_MAST.csv\"),\n    row.names = FALSE\n)\n\n### Top10 DEG for each cluster\nmarker_genes <- cluster_markers_mast |>\n    group_by(cluster) |>\n    slice_max(avg_log2FC, n = 10)\n\nwrite.csv(\n    marker_genes,\n    here(output_path, \"DE_cluster_MarkerGenesTop10.csv\"),\n    row.names = TRUE\n)\n```\n:::\n\n\n\n### Cell type frequencies\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Load processed scRNA data\nmerged_post_filter <- readRDS(here(output_path, \"merged_complete_umap.rds\"))\n\n### Extract group info\nsample_info <- merged_post_filter[[]] |>\n    select(sample, IE) |>\n    distinct()\n\n### Assign pDC or cDC to dendritic cell\n# merged_post_filter$cell_type[merged_post_filter$cell_type == \"pDC\"] <- \"dendritic cell\"\n\n### Reset active IDs to cell type\nIdents(merged_post_filter) <- \"cell_type\"\nlevels(Idents(merged_post_filter))\ntable(Idents(merged_post_filter))\n\n### Save cell number of cell type\ncelltype_sample <- table(\n    merged_post_filter$cell_type, merged_post_filter$sample\n)\nwrite.csv(\n    celltype_sample, here(output_path, \"celltype_samples.csv\"),\n    row.names = TRUE\n)\n\n### Save proportions of cell type for each sample\ncelltype_sample_prop <- prop.table(\n    table(merged_post_filter$cell_type, merged_post_filter$sample),\n    margin = 2\n)\nwrite.csv(\n    celltype_sample_prop,\n    here(output_path, \"celltype_samples_proportions.csv\"),\n    row.names = TRUE\n)\n\n### Ploty cell type frequencies using stacked barplot\ncelltype_sample_prop <- read.csv(\n    here(output_path, \"celltype_samples_proportions.csv\")\n) |>\n    pivot_longer(\n        starts_with(\"TB\"), names_to = \"sample\", values_to = \"percentage\"\n    ) |>\n    dplyr::rename(cell_type = X) |>\n    ### Factor cell type\n    mutate(\n        cell_type = factor(\n            cell_type,\n            levels = c(\n                \"T/NK cell\", \"myeloid\", \"B cell\", \"granulocyte\",\n                \"dendritic cell\", # \"cDC\", \"pDC\",\n                \"plasma cell\", \"epithelial\", \"fibroblast\", \"endothelial\"\n            )\n        )\n    ) |>\n    left_join(sample_info, by = \"sample\")\n\n### Plot\ncelltype_sample_prop |>\n    as_tibble() |>\n    ggplot(aes(x = sample, y = percentage, fill = cell_type)) +\n    geom_bar(stat = \"identity\") +\n    theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        panel.background = element_blank(),\n        axis.text.x = element_text(angle = 30)\n    ) +\n    # coord_flip()+\n    ggtitle(\"Sample composition by cell type\")\n\n### Cell type proportions by IE1 vs IE2\nstat_res <- celltype_sample_prop |>\n    group_by(cell_type) |>\n    wilcox_test(percentage ~ IE) |>\n    add_significance() |>\n    add_xy_position(x = \"cell_type\")\n\nggplot(celltype_sample_prop, aes(x = IE, y = percentage, fill = IE)) +\n    geom_boxplot() +\n    geom_point() +\n    facet_wrap(~ cell_type, scales = \"free\", ncol = 5, strip.position = \"bottom\") +\n    theme(\n        axis.ticks.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title.x = element_blank()\n    ) +\n    # theme(panel.background = element_blank())+\n    ylab(\"proportion\")\n    # stat_pvalue_manual(stat_res, hide.ns = TRUE)\n```\n:::\n\n\n### Cytof vs 10x Cell type\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Cytof cell type percentages\ncytof_dir <- here(\"projects/2023_NC_BCexh/BCexh_scRNAseq/03_Additional_files\")\ncytof_perc <- read.csv(\n    here(cytof_dir, \"cytof_celltype_prop.csv\")\n) |>\n    pivot_longer(\n        starts_with(\"TBB\"), names_to = \"sample\", values_to = \"percentage\"\n    ) |>\n    rename(cell_type = cell_type) |>\n    left_join(sample_info, by = \"sample\") |>\n    mutate(method = \"cytof\")\n\nggplot(cytof_perc, aes(sample, y = percentage, fill = cell_type)) +\n    geom_bar(stat = \"identity\") +\n    theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +\n    # coord_flip()+\n    theme(panel.background = element_blank()) +\n    ggtitle(\"CyTOF percentages\")\n\n### Adapt 10x celltypes to fit CyTOF celltypes\n# merged_post_filter$cell_type <- factor(\n#     merged_post_filter$cell_type,\n#     levels = c(\n#         \"T/NK cell\",\n#         \"myeloid\",\n#         \"B cell\",\n#         \"dendritic cell\",\n#         \"granulocyte\",\n#         \"plasma cell\",\n#         \"epithelial\",\n#         \"endothelial\",\n#         \"fibroblast\"\n#         # \"cDC\",\n#         # \"pDC\"\n#     )\n# )\ncelltype_sample_prop |>\n    ggplot(aes(sample, y = percentage, fill = cell_type)) +\n    geom_bar(stat = \"identity\") +\n    theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +\n    # coord_flip()+\n    theme(panel.background = element_blank()) +\n    ggtitle(\"10x percentages\")\n\n### Combine cytof and 10x percentages\ncelltype_pct <- bind_rows(\n    cytof_perc,\n    celltype_sample_prop |> mutate(method = \"10x\")\n)\n\ncelltype_pct$cell_type <- factor(\n    celltype_pct$cell_type,\n    levels = c(\n        \"T/NK cell\", \"myeloid\", \"B cell\", \"dendritic cell\", \"granulocyte\",\n        \"plasma cell\", \"epithelial\", \"endothelial\", \"fibroblast\", \"other\"\n    )\n)\n\ncelltype_pct$method <- factor(celltype_pct$method, levels = c(\"cytof\", \"10x\"))\ncelltype_pct <- celltype_pct |> drop_na()\n\nggplot(celltype_pct, aes(method, y = percentage, fill = cell_type)) +\n    geom_bar(stat = \"identity\") +\n    facet_wrap(~sample, ncol = 6) +\n    theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        panel.background = element_blank()\n    ) +\n    # coord_flip()+\n    ggtitle('Celltype percentages: CyTOF vs. scRNA-seq')\n```\n:::\n\n\n### Immune subset data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Load data\nmerged_post_filter <- readRDS(here(output_path, \"merged_complete_umap.rds\"))\n\nsaveRDS(\n    merged_post_filter, \n    here(output_path, \"merged_complete_umap.rds\"), \n    compress = \"xz\"\n)\n\n### Immune subset\nimmune <- subset(\n    merged_post_filter,\n    idents = c(\n        \"T/NK cell\", \n        \"myeloid\", \n        \"B cell\", \n        \"granulocyte\", \n        \"dendritic cell\",\n        # \"cDC\",\n        # \"pDC\", \n        \"plasma cell\"\n    )\n)\nsaveRDS(immune, here(output_path, \"immune.rds\"), compress = \"xz\")\nrm(immune)\n\n## T/NK cell subset\nTNK <- subset(merged_post_filter, idents = \"T/NK cell\")\nsaveRDS(\n    TNK,\n    here(output_path, \"T_NK_cells.rds\"),\n    compress = \"xz\"\n)\nrm(TNK)\n\n### Myeloid subset (incl. DCs)\nmyeloid <- subset(\n    merged_post_filter, idents = c(\n        \"myeloid\", \n        \"dendritic cell\"\n        # \"cDC\", \n        # \"pDC\"\n    )\n)\nsaveRDS(myeloid, here(output_path, \"myeloid_inclDC.rds\"), compress = \"xz\")\nrm(myeloid)\n\n### B cell subset\nB <- subset(merged_post_filter, idents = \"B cell\")\nsaveRDS(B, here(output_path, \"B_cells.rds\"))\nrm(B)\n\n### Plasma cell subset\nPC <- subset(x = merged_post_filter, idents = \"plasma cell\")\nsaveRDS(PC, here(output_path, \"plasma_cells.rds\"))\nrm(PC)\n\n### Granulocyte subset\ngran <- subset(x = merged_post_filter, idents = \"granulocyte\")\nsaveRDS(gran, here(output_path, \"granulocytes.rds\"))\nrm(gran)\n\n### tumor cell subset\nep <- subset(x = merged_post_filter, idents = \"epithelial\")\nsaveRDS(ep, here(output_path, \"epithelial.rds\"))\nrm(ep)\n\n### fibroblast subset\nfib <- subset(x = merged_post_filter, idents = \"fibroblast\")\nsaveRDS(fib, here(output_path, \"fibroblast.rds\"))\nrm(fib)\n\n### endothelial cell subset\nendo <- subset(x = merged_post_filter, idents = \"endothelial\")\nsaveRDS(endo, here(output_path, \"endothelial.rds\"))\nrm(endo)\n```\n:::\n\n### Inspect some chemokine features\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCCLs <- paste0(\"CCL\", c(1:28))\n\nCX_XCs <- c(paste0(\"CXCL\", c(1:17)), \"CXCL4L1\", \"XCL1\", \"XCL2\", \"CX3CL1\")\n\nILs  <- paste0(\"IL\", c(1:33))\n\nother_cytokines <- c(\n    \"TNF\", \"IFNG\", \"IFNA1\", \"IFNB1\", \"TGFB1\", \"CSF1\", \"CSF2\", \"CSF3\", \"EPO\"\n)\n\ninteraction_other <- c(\n    \"CD47\", \"SIRPG\", \"SIRPA\", \"FASLG\", \"FAS\", \"CD80\", \"CD86\", \"CTLA4\"\n)\n\ncytokine_receptor <- c(\n    'CCR1', 'CCR2', 'CCR3', 'CCR4', 'CCR5', 'CCR6', 'CCR7', 'CCR8', 'CCR9', 'CCR10', 'CCR11', 'IL10RA', 'IL4R', 'CXCR1', 'CXCR2', 'CXCR3', 'CXCR4', 'CXCR5', 'CXCR6', 'CXCR7'\n)\n\nVlnPlot(\n    merged_post_filter, features = c(\"nFeature_RNA\"), pt.size = 0\n) + \nNoLegend()\n# theme(legend.position = \"right\") +\n# guides(fill = guide_legend(ncol = 2))\n\nDotPlot(merged_post_filter, features = c(\"PTPRC\", \"CD3E\", \"CD14\", \"CD68\"))\nFeaturePlot(merged_post_filter, features = c(\"nFeature_RNA\", \"nCount_RNA\"))\n```\n:::\n\n\n### Chemkine expression per cell type\n\n::: {.cell}\n\n```{.r .cell-code}\nchemokines <- c(\n    \"CXCL9\", \"CXCL10\", \"CXCL13\", \"CCL4\", \"CCL5\", \"CCL3\", \"CXCL8\",\n    \"CCL17\", \"CCL22\"\n)\n\nchemokine_tab <- data.frame(celltype = merged_post_filter$cell_type)\n\n### Seurat V5, the counts data do not have colnames and rownames\ncounts <- merged_post_filter@assays$RNA@layers$counts\nrownames(counts) <- Features(merged_post_filter)\ncolnames(counts) <- Cells(merged_post_filter)\n\nfor (i in chemokines) {\n    chemokine_tab[, i] <- ifelse(counts[i, ] > 0, 1, 0)\n}\n\nchemokine_add  <-  data.frame(celltype = unique(chemokine_tab$celltype))\n\nfor (i in chemokines) {\n    count_i <- as.data.frame(\n        table(chemokine_tab$celltype, chemokine_tab[, i])[, \"1\"]\n    )\n    colnames(count_i) <- i\n    count_i$celltype <- rownames(count_i)\n    chemokine_add <- merge(chemokine_add, count_i, by = \"celltype\")\n}\n```\n:::\n\n\n## T cells subclustering\n\n### Process T cells subset\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Load T cells subset\nTcell_dir <- here(\"projects/2023_NC_BCexh/BCexh_scRNAseq/output/Tcells\")\nrun1_Tcell <- readRDS(here(Tcell_dir, \"T_NK_cells.rds\"))\nlobstr::obj_size(run1_Tcell)\n\n### Store Keratin and MGP percentage in object meta data\nrun1_Tcell <- PercentageFeatureSet(\n    run1_Tcell, pattern = \"^KRT\", col.name = \"percent_krt\"\n)\nrun1_Tcell <- PercentageFeatureSet(\n    run1_Tcell, pattern = \"MGP\", col.name = \"percent_MGP\"\n)\ncolnames(run1_Tcell[[]])\n\n### Run Normalization, ScaleData, and FindVariableFeatures\nrun1_Tcell <- SCTransform(\n    run1_Tcell,\n    vars.to.regress = c(\"percent_mito\", \"percent_krt\", \"percent_MGP\"),\n    verbose = TRUE\n)\n\n### Dimensional reduction\nrun1_Tcell <- RunPCA(run1_Tcell, verbose = FALSE)\nVizDimLoadings(run1_Tcell, dims = 1:2)\nPCAPlot(run1_Tcell)\n\n### Choose significant dimensions\nDimHeatmap(run1_Tcell, dims = 1, cells = 500, balanced = TRUE)\nDimHeatmap(run1_Tcell, dims = 15:20, cells = 500, balanced = TRUE)\nElbowPlot(object = run1_Tcell, ndims = 25)\n\n### Find cluster\nrun1_Tcell <- RunUMAP(run1_Tcell, dims = 1:15)\nDimPlot(object = run1_Tcell, reduction = \"umap\", label = TRUE)\nDimPlot(object = run1_Tcell, reduction = \"umap\", group.by = \"sample\")\n\nrun1_Tcell <- run1_Tcell |>\n    FindNeighbors(dims = 1:15) |>\n    FindClusters(resolution = 1)\n\n### Clustree analysis\nclustree(run1_Tcell, prefix = \"SCT_snn_res.\") +\n    scale_edge_color_continuous(low = \"black\", high = \"black\")\n\n### QC plots\nVlnPlot(\n    run1_Tcell,\n    features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent_mito\"),\n    ncol = 3, pt.size = 0, sort = FALSE\n)\nVlnPlot(\n    run1_Tcell,\n    features = c(\"percent_krt\", \"percent_MGP\"),\n    pt.size = 0, sort = FALSE\n)\nVlnPlot(run1_Tcell, features = c(\"MKI67\"), pt.size = 0, sort = FALSE)\nFeaturePlot(run1_Tcell, features = c(\"PDCD1\", \"CD4\", \"CD8A\", \"FOXP3\"))\n\n### Highlight individual clusters\nIdents(run1_Tcell) <- run1_Tcell$Tcell_metacluster\ncells_CD4ex <- WhichCells(\n    run1_Tcell, ident = c(\"CD4_exhausted\", \"CD8_exhausted\")\n)\nDimPlot(run1_Tcell, reduction = \"umap\", cells.highlight = cells_CD4ex)\n\n### Save object\nsaveRDS(\n    run1_Tcell, here(Tcell_dir, \"T_NK_cells.rds\"),\n    compress = \"xz\"\n)\n```\n:::\n\n\n### Cluster proportions\n\n::: {.cell}\n\n```{.r .cell-code}\n### Load processed data\nrun1_Tcell <- readRDS(here(Tcell_dir, \"T_NK_cells.rds\"))\n\n### Extract group info\nsample_info <- run1_Tcell[[]] |>\n    select(sample, IE) |>\n    distinct()\n\n### Cells per cluster\ncells_per_cluster <- table(run1_Tcell@meta.data$SCT_snn_res.1)\n\n\n### How many cells of each sample in each cluster?\ncluster_sample  <-  table(run1_Tcell$SCT_snn_res.1, run1_Tcell$sample)\ncluster_sample <- as.data.frame(cluster_sample)\ncolnames(cluster_sample) <- c(\"cluster\", \"sample\", \"cell.nr\")\nggplot(cluster_sample, aes(cluster, y = cell.nr, fill = sample)) +\n    geom_bar(stat = \"identity\") +\n    theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        panel.background = element_blank()\n    ) +\n    # coord_flip()+\n    ggtitle('T/NK cell cluster composition')\n\n### Which cluster is each sample made of?\ncluster_sample_prop <- prop.table(\n    table(run1_Tcell$SCT_snn_res.1, run1_Tcell$sample), margin = 2\n)\ncluster_sample_prop <- as.data.frame(cluster_sample_prop)\ncolnames(cluster_sample_prop) <- c(\"cluster\", \"sample\", \"prop\")\n\np1 <- ggplot(cluster_sample_prop, aes(sample, y = prop, fill = cluster)) +\n    geom_bar(stat = \"identity\") +\n    theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        panel.background = element_blank()\n    ) +\n    coord_flip() +\n    ggtitle(\"Sample composition (T/NK clusters)\")\n\n### Cells prop per sample\nsample_cluster_prop <- prop.table(cluster_sample, margin = 1)\n\n### Data for stacked plot\nsample_cluster_prop <- as.data.frame(sample_cluster_prop)\ncolnames(sample_cluster_prop) <- c(\"cluster\", \"sample\", \"prop\")\n\n### Which sample is each cluster made of?\np2 <- ggplot(sample_cluster_prop, aes(cluster, y = prop, fill = sample)) +\n    geom_bar(stat = \"identity\") +\n    theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        panel.background = element_blank()\n    ) +\n    coord_flip() +\n    ggtitle(\"T/NK cell cluster composition\")\n\n### Plot\np1 + p2 + plot_layout(ncol = 1)\n\n\n### What percentage of each IE is in which cluster?\ncluster_IE <- table(run1_Tcell$SCT_snn_res.1, run1_Tcell$IE)\ncluster_IE_prop <- as.data.frame(cluster_IE)\ncolnames(cluster_IE_prop) <- c(\"cluster\", \"IE\", \"prop\")\n\nggplot(cluster_IE_prop, aes(cluster, y = prop, fill=IE)) +\n  geom_bar(stat=\"identity\", position = \"dodge\")+\n  theme(axis.title.x=element_blank(), axis.title.y = element_blank())+\n  #coord_flip()+\n  theme(panel.background = element_blank())+\n  ggtitle(\"Proportion of each TIG belonging to a specific cluster\")\n```\n:::\n\n\n### Remove low quality clusters\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Remove high-keratin cluster 20 and low read-count cluster 12.\n# Idents(run1_Tcell) <- run1_Tcell$SCT_snn_res.1\n# DimPlot(\n#     run1_Tcell, reduction = \"umap\", group.by = \"SCT_snn_res.1\", label = TRUE\n# )\n# FeaturePlot(run1_Tcell, features = c(\"KRT\", \"MGP\"))\n```\n:::\n\n### Finding cluster DEG\n\n\n::: {.cell}\n\n```{.r .cell-code}\nIdents(run1_Tcell) <- run1_Tcell$SCT_snn_res.1\nrun1_Tcell_markers <- FindAllMarkers(\n    run1_Tcell, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25\n)\n\nmarker_genes <- run1_Tcell_markers |>  \n    group_by(cluster) |> \n    slice_max(avg_log2FC, n = 10)\n```\n:::\n\n\n### Feature list\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeatures <- c(\"FOXP3\", \"CCL18\", \"IL2RA\")\n\nfeatures_cytof <- c(\n    'CD3E', 'CD8A', 'CD4', 'FOXP3', 'HAVCR2', 'PDCD1', 'CTLA4', 'ICOS', 'IL2RA', 'PTPRC', 'CD68', 'CD14', 'CD274', 'CCR7', 'HLA-DRA', 'MRC1', 'SIGLEC1', 'MSR1', 'CD163', 'FCGR2A', 'FCGR2B', 'FCGR2C', 'FCGR1A', 'ITGAM', 'ITGAX', 'FCGR3A', 'CD93', 'IL3RA', 'CD86', 'CD36', 'CD38', 'CCR2', 'SLAMF7'\n)\n\nfeatures_cytof_T_01 <- c('CD3E', 'CD8A', 'FOXP3', 'HAVCR2', 'PDCD1', 'CTLA4')\n\nfeatures_cytof_T_02 <- c('ICOS', 'IL2RA', 'PTPRC', 'CD4', 'CCR7', 'CD38')\n\nfeatures_cytof_T <- c(\n    'CD3E', 'CD8A', 'FOXP3', 'HAVCR2', 'PDCD1', 'CTLA4', 'ICOS', 'IL2RA', 'PTPRC', 'CD4', 'CCR7', 'CD38', 'NCAM1'\n)\n\nfeatures_T_extended <- c(\n    'CD3E', 'CD8A', 'FOXP3', 'HAVCR2', 'PDCD1', 'CTLA4', 'ICOS', 'IL2RA', 'PTPRC', 'CD4', 'CCR7', 'CD38', 'NCAM1', 'ENTPD1', 'ITGAE', 'SELL', 'CD40LG', \"FCGR3A\", \"CD27\", \"IL7R\", \"HLA-DRA\", \"TBX21\", \"CD69\", \"NCR1\", \"IRF4\"\n)\ncytokine <- c(\n    'CCL20', 'CCL22', 'CXCL2', 'CXCL3', 'CXCL8', 'CCL8', 'CCL18', 'CCL2', 'CCL3', 'CCL4', 'CCL4L2', 'CCL5', 'CXCL10', 'CXCL12', 'CCL13', 'CXCL1', 'CXCL13', \"IL4\", \"IL13\", \"IFNG\", \"TNF\"\n)\n\nchemokine_01 <- c('CCL20', 'CCL22', 'CXCL2', 'CXCL3', 'CXCL8')\n\nchemokine_02 <- c('CCL8', 'CCL18', 'CCL2', 'CCL3', 'CCL4')\n\nchemokine_03 <- c('CCL4L2', 'CXCL10', 'CXCL12', 'CCL13', 'CXCL1')\n\ncytokine_receptor <- c(\n    'CCR1', 'CCR10', 'CCR2', 'CCR7', 'CCR4', 'CCR5', 'CCR6', 'IL10RA', 'IL4R', 'CXCR2', 'CXCR3', 'CXCR4', 'CXCR5', 'CCR8'\n)\n\nTF <- c(\n    'IRF2', 'IRF5', 'IRF8', 'IRF9', 'IRF4', 'IRF7', 'STAT1', 'STAT2', 'STAT4', 'TCF12', 'TCF19', 'BCL6',\n    'ZBTB31', 'ZBTB33', 'ZBTB47', 'CIITA'\n)\n\nfeatures_plitas <- c(\n    'CCR8', 'CCR10', 'CX3CR1', 'IL1RL1', 'IL2RA', 'IL1R2', 'TNFRSF8', 'TNFRSF4', 'TNFRSF9', 'TNFRSF18', 'CD177', 'CARD16'\n)\n\nTh1 <- c(\n    'CCL4', 'CD38', 'CXCL9', 'CXCL10', 'CXCL11', 'FN1', 'GNLY', 'GZMA', 'GZMB', 'IFNA', 'IFNG', 'IL2', 'IL8', 'IL10', 'IL12B', 'IL18', 'LTA', 'MAP3K8', 'OSM', 'STAT1', 'STAT4', 'TBX21', 'TIA1', 'TNF'\n)\n\nTh2 <- c(\n    'GATA3', 'IL4', 'IL5', 'IL10', 'IL13', 'MAF', 'STAT5A', 'STAT5B', 'STAT6'\n)\n\nTh17 <- c(\n    'BATF', 'CCL20', 'IL1A', 'IL1B', 'IL6', 'IL17A', 'IL17F', 'IL18', 'IL21', 'IL22', 'LTA', 'RORC', 'STAT3', 'TGFB1', 'TGFB2', 'TGFB3')\n\ntumor_reactive <- c(\n    \"PDCD1\", \"LAG3\", \"HAVCR2\", \"TNFRSF9\", \"TNFRSF18\", \"ENTPD1\", \"ITGAE\", \"CXCL13\", \"IRF4\", \"BATF\"\n)\n\ncytotoxic <- c(\n    \"GZMB\", \"GZMA\", \"GZMK\", \"TNF\", \"IFNG\", \"GNLY\", \"FASLG\", \"IL2\"\n)\n\nM1M2_rec <- c(\n    \"IL10RA\", \"IL10RB\", \"CXCR3\", \"CCR4\", \"CCR1\", \"CCR5\", \"IGF2R\", \"TFGBR2\", \"TGFBR1\", \"TGFBR3\", \"ITGAV\", \"ITGA5\", \"LRP8\", \"LRP1\", \"SCARB1\", \"C3AR1\"\n)\nM1M2_lig <- c(\n    \"CALM1\", \"CALM2\", \"CALM3\", \"TGFB1\", \"TLN1\", \"HSP90AA1\", \"VEGFA\", \"GNAI2\", \"PGF\", \"MDK\", \"FGF2\"\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nIdents(run1_Tcell) <- run1_Tcell$SCT_snn_res.1\ncluster_averages <- AverageExpression(run1_Tcell, return.seurat = TRUE)\ncluster_averages\n\n### Calculate averages for metaclusters\nIdents(run1_Tcell) <- run1_Tcell$Tcell_metacluster\nmetacluster_averages <- AverageExpression(run1_Tcell, return.seurat = TRUE)\nmetacluster_averages\n\n# heatmap.color <- brewer.pal(n=10, name= \"RdBu\")\n# heatmap.color.rev <- rev(heatmap.color)\n# DoHeatmap(\n#     metacluster_averages, features = TCR, size = 5, \n#     draw.lines = FALSE, angle=70\n# )+\n#   scale_fill_gradientn(colors = heatmap.color.rev)\n\n### Add celltype information\ncluster_averages[[\"cluster\"]] <- Idents(cluster_averages)\ncluster_averages <- RenameIdents(cluster_averages, new.cluster.ids)\nSave celltype information in metadata\ncluster_averages [[\"cell_type\"]] <- Idents(object = cluster_averages )\nReset active IDs to original clusters\nIdents(cluster_averages) <- cluster_averages[[\"cluster\"]]\n```\n:::\n\n\n## T cells EdgeR pseudobulk\n## Myeloid subclustering\n## Myeloid EdgeR pseudobulk\n## T cells subclustering\n## T cells subclustering\n## T cells subclustering\n\n\n## Figure1\n\n### UMAP plots\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- here(\"projects/2023_NC_BCexh/BCexh_scRNAseq\")\nall_merged <- readRDS(here(path, \"output/merged_complete_umap.rds\"))\ncolnames(all_merged[[]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"cellID\"              \"sample\"              \"IE\"                 \n [4] \"excl_doublet\"        \"excl_QC\"             \"cell_type\"          \n [7] \"Tcell_cluster\"       \"Tcell_metacluster\"   \"myeloid_cluster\"    \n[10] \"myeloid_metacluster\" \"nCount_RNA\"          \"nFeature_RNA\"       \n[13] \"percent_mito\"        \"percent_ribo\"        \"RNA_snn_res.2\"      \n[16] \"seurat_clusters\"    \n```\n:::\n\n```{.r .cell-code}\n### Color palette\ncolors <- hue_pal()(50)\nshow_col(colors)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\n### Classify pDCs as myeloid cells for this large overview\nunique(all_merged[[]]$cell_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"T/NK cell\"      \"epithelial\"     \"myeloid\"        \"fibroblast\"    \n[5] \"endothelial\"    \"dendritic cell\" \"granulocyte\"    \"plasma cell\"   \n[9] \"B cell\"        \n```\n:::\n\n```{.r .cell-code}\nall_merged$cell_type <- factor(all_merged$cell_type)\nct_levels <- levels(all_merged$cell_type)\nct_levels[6] <- \"mast cell/basophil\"\nlevels(all_merged$cell_type) <- ct_levels\n\n### Reorder patient levels\nall_merged$sample <- factor(all_merged$sample)\n\n### Subset to very few cells to get small pdfs\ncells <- WhichCells(all_merged)\ncells_sub <- sample(cells, 100)\nobject <- subset(all_merged, cells = cells_sub)\n\n### Color by celltype\numap_celltype <- DimPlot(\n    object, group.by = \"cell_type\",\n    cols = c(\n        \"#FF5F50\", \"darkorange2\", \"gold3\", \"#77C900\", \"#00AA5C\", \"#00C0BD\", \"#1F99FF\", \"#0044DB\", \"gray\")\n) +\n    theme_void()\n\n### Color by sample\numap_patient <- DimPlot(object, group.by = \"sample\") +\n    theme_void()\n\numap_celltype +  umap_patient\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n\n```{.r .cell-code}\n### Color by sample group\numap_IE <- DimPlot(object, group.by = \"IE\") + \n    theme_void()\n\n### Color by clusters\nDimPlot(all_merged, group.by = \"RNA_snn_res.2\", label = TRUE) +\n    theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-3.png){width=672}\n:::\n:::\n\n### Highlight fibroblast\n\n\n::: {.cell}\n\n```{.r .cell-code}\nIdents(all_merged) <- all_merged$cell_type\nfibroblasts  <-  WhichCells(object = all_merged, ident = c(\"fibroblast\"))\nDimPlot(\n    all_merged, reduction = \"umap\", cells.highlight = fibroblasts, \n    cols.highlight = \"#00C1AA\", sizes.highlight = 0.7, pt.size = 0.7\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n### Feature plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### save as png (Inkscape/Illustrator cannot handle UMAPs with lots of cells)\ngenes <- c(\"PTPRC\", \"PDGFRB\", \"CD3E\", \"CD14\", \"EPCAM\", \"PECAM1\")\nFeaturePlot(all_merged, genes, max.cutoff = 3) + theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n\n```{.r .cell-code}\n### save one plot as pdf to get vectorized legend (with very few cells)\ncells <- WhichCells(all_merged)\ncells_sub <- sample(cells, 1000)\nobj_sub <- subset(all_merged, cells = cells_sub)\nFeaturePlot(obj_sub, \"HLA-DRA\", max.cutoff = 3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-2.png){width=672}\n:::\n:::\n\n### Dotplots for lineage markers\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Features\ngenes <- c(\n    \"EPCAM\", \"CDH1\", \"PECAM1\", \"CAV1\", \"VWF\", \"PDGFRB\", \"FAP\", \"PTPRC\", \"CD3E\", \"NCAM1\", \"CD14\", \"HLA-DRA\", \"ITGAX\", \"MS4A1\", \"MS4A2\", \"IGKC\"\n)\ngenes_PDL1 <- c(\"CD274\", \"LAMP3\", \"CCR7\")\n\n### Main cell types only\nIdents(all_merged) <- all_merged$cell_type\nDotPlot(all_merged, features = genes_PDL1) +\n    coord_flip() +\n    theme(\n        axis.text.x = element_text(angle = 90, hjust = 1),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n\n```{.r .cell-code}\n### all clusters\nIdents(all_merged) <- all_merged$RNA_snn_res.2\nDotPlot(all_merged, features = genes_PDL1) +\n    coord_flip() +\n    theme(\n        axis.text.x = element_text(angle = 90, hjust = 1),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-2.png){width=672}\n:::\n:::\n\n\n### Gene expression heatmap\n\n\n::: {.cell}\n\n```{.r .cell-code}\nIdents(all_merged) <- all_merged$cell_type\ncluster_averages_table <- AverageExpression(\n    all_merged, return.seurat = FALSE, assays = \"RNA\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAs of Seurat v5, we recommend using AggregateExpression to perform pseudo-bulk analysis.\nThis message is displayed once per session.\n```\n:::\n\n```{.r .cell-code}\nRNA_average <- as.matrix(cluster_averages_table[[1]])\n\n### Normalize between 0 and 1\nRNA_average_norm <- apply(\n    RNA_average, 1, function(x) (x - min(x)) / (max(x) - min(x))\n)\nRNA_average_znorm <- apply(RNA_average, 1, function(x) (x - mean(x)) / sd(x))\n\nT_supp <- c(\n    \"CD274\", \"PDCD1LG2\", \"IDO1\", \"CD80\", \"CD86\", \"CCL17\", \"CCL19\", \"CCL22\", \"IL15\"\n)\n\nHeatmap(\n    t(subset(RNA_average_norm, select = T_supp)),\n    show_row_names = TRUE,\n    row_dend_side = \"left\",\n    heatmap_legend_param = list(title = \"Normalized\\nmean counts\"),\n    col = viridis(100),\n    cluster_rows = FALSE,\n    cluster_columns = FALSE,\n    row_names_side = \"left\",\n    column_names_side = \"top\",\n    column_names_rot = 90,\n    column_dend_side = \"bottom\",\n    row_names_gp = gpar(fontsize = 6),\n    cluster_column_slices = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n### Cell type frequence\n\n::: {.cell}\n\n```{.r .cell-code}\n### classify pDCs as myeloid cells for this large overview\nsample_info <- all_merged[[]] |> \n    select(sample, IE) |> \n    distinct() |> \n    as_tibble()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Full clusters by sample\ncluster_prop <- as.data.frame(\n    prop.table(\n        table(all_merged$sample, all_merged$RNA_snn_res.2), margin = 2\n    )\n)\ncolnames(cluster_prop) <- c(\"sample\", \"cluster\", \"proportion\")\n\nggplot(cluster_prop, aes(cluster, y = proportion, fill = sample)) +\n    geom_bar(stat = \"identity\") +\n    theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.ticks.x = element_blank()) +\n    # coord_flip()+\n    theme(panel.background = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1)) +\n    ggtitle(\"Sample composition by cell type\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Compare cell type frequencies\ncelltype_freq <- as.data.frame(table(all_merged$cell_type, all_merged$sample))\ncolnames(celltype_freq) <- c(\"cell_type\", \"sample\", \"cell_number\")\n\n### Absolute frequency\nggplot(celltype_freq, aes(sample, y = cell_number, fill = cell_type)) +\n    geom_bar(stat = \"identity\") +\n    theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.ticks.x = element_blank()) +\n    # coord_flip()+\n    theme(panel.background = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1)) +\n    ggtitle(\"Sample composition by cell type (absolute)\") ## Figure2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n\n```{.r .cell-code}\n### Relative frequency\ncelltype_prop <- as.data.frame(\n    prop.table(table(all_merged$cell_type, all_merged$sample), margin = 2)\n)\ncolnames(celltype_prop) <- c(\"cell_type\", \"sample\", \"proportion\")\n\nggplot(celltype_prop, aes(sample, y = proportion, fill = cell_type)) +\n    geom_bar(stat = \"identity\") +\n    theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.ticks.x = element_blank()) +\n    # coord_flip()+\n    theme(\n        panel.background = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 1)\n    ) +\n    ggtitle(\"Sample composition by cell type\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-2.png){width=672}\n:::\n\n```{.r .cell-code}\n### Cell type proporations by sample group\ncelltype_prop <- celltype_prop |>\n    left_join(sample_info, by = \"sample\")\n\nggplot(celltype_prop, aes(x = IE, y = proportion, color = IE)) +\n    geom_boxplot() +\n    geom_point() +\n    facet_wrap(~cell_type, scales = \"fixed\", ncol = 4, strip.position = \"top\") +\n    theme(\n        axis.ticks.x = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 1),\n        axis.title.x = element_blank(),\n        panel.background = element_blank(),\n        panel.border = element_rect(color = \"black\", fill = NA, linewidth = 1),\n        strip.background = element_blank(),\n        legend.background = element_blank()\n    ) +\n    ylab(\"Of total [%]\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-3.png){width=672}\n:::\n:::\n\n\n### Cytof vs 10x\n\n###  Cell numbers before and after filtering\n\n::: {.cell}\n\n```{.r .cell-code}\ncell_numbers <- read.csv(\n    here(path, \"03_Additional_files/CellsPerSample_PrePostFilter.csv\")\n)[-15, -4]\n\ncell_numbers$preFilter <- cell_numbers$preFilter - cell_numbers$postFilter\ncell_numbers <- cell_numbers |> \n    pivot_longer(\n        matches(\"Filter\"), names_to = \"filter\", values_to = \"cell_number\"\n    ) |> \n    mutate(\n        filter = factor(\n            filter, levels = c(\"preFilter\", \"postFilter\")\n        )\n    )\n\nggplot(cell_numbers, aes(Sample, cell_number, fill = filter)) +\n    geom_bar(stat = \"identity\") +\n    scale_fill_manual(\n        values = c(\"preFilter\" = \"dodgerblue\", \"postFilter\" = \"green4\")\n    ) +\n    theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +\n    theme(axis.ticks.x = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 1),\n        axis.title.x = element_blank(),\n        panel.background = element_blank(),\n        strip.background = element_blank(),\n        legend.background = element_blank()) +\n    ylab(\"Cell number\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n### Clinical information\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(here(path, \"03_Additional_files/subtype_table.csv\"))[, -(28:32)]\n\n### Subtype distribution by TIG (stacked barplot)\ndf$Clinical.Subtype <- factor(\n    df$Clinical.Subtype, levels = c(\"LumA\", \"LumB\", \"LumB-HER2\", \"HER2\", \"TN\")\n)\np_type <- ggplot(df, aes(Clinical.Subtype, fill = Tumor.Immune.Group..CyTOF.based.))+\n  geom_bar()+\n  scale_x_discrete(drop=FALSE)+\n  scale_y_continuous(breaks = c(2,4,6,8))+\n   theme(axis.title.x=element_blank(), \n         axis.title.y = element_blank(),\n         panel.background = element_blank(),\n         panel.border = element_rect(color = \"black\", fill = \"NA\"),\n         axis.text.x = element_text(angle = 90, hjust=1),\n         legend.title = element_blank(),\n         axis.ticks.x = element_blank()) +\n  ggtitle(\"Clinical Subtypes by TIG\")\n\n### Age distribution by TIG (boxplots)\np_age <- ggplot(df, aes(x = Tumor.Immune.Group..CyTOF.based., y = Age.at.Surgery))+\n  geom_boxplot()+\n  geom_point()+\n   theme(axis.title.x=element_blank(), \n         axis.title.y = element_blank(),\n         panel.background = element_blank(),\n         panel.border = element_rect(color = \"black\", fill = \"NA\"),\n         axis.text.x = element_text(angle = 90, hjust=1),\n         legend.title = element_blank(),\n         axis.ticks.x = element_blank()) +\n  ggtitle(\"Age by TIG\")\n\n### Grade distribution by TIG (stacked barplot)\np_grade <- ggplot(df, aes(Grade, fill = Tumor.Immune.Group..CyTOF.based.))+\n  geom_bar()+\n  scale_x_discrete(drop=FALSE)+\n  scale_y_continuous(breaks = c(2,4,6,8))+\n   theme(axis.title.x=element_blank(), \n         axis.title.y = element_blank(),\n         panel.background = element_blank(),\n         panel.border = element_rect(color = \"black\", fill = \"NA\"),\n         axis.text.x = element_text(angle = 90, hjust=1),\n         legend.title = element_blank(),\n         axis.ticks.x = element_blank()) +\n  ggtitle(\"Grade by TIG\")\n\n### Combine plots\n(p_type | p_age | p_grade) + plot_layout(guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Cell type freq distribution by clinical subtype (boxplots)\ncelltype_prop <- read.csv(\n    here(path, \"03_Additional_files/celltype_prop_sample_v2.csv\"), \n    header = TRUE\n) |> \n    left_join(df, by = \"Patient.ID\") |> \n    pivot_longer(\n        cols = 2:9, names_to = \"cell_type\", values_to = \"proportion\"\n    ) |> \n    relocate(cell_type, proportion, .after = \"Patient.ID\")\n\nsign_testing <- compare_means(\n    proportion ~ Clinical.Subtype, data = celltype_prop, \n    group.by = \"cell_type\"\n)\n\nggplot(celltype_prop, aes(x = Clinical.Subtype, y = proportion))+\n  geom_boxplot()+\n  geom_point()+\n  facet_wrap(~cell_type, scales=\"fixed\", ncol=4)+\n   theme(axis.title.x=element_blank(), \n         axis.title.y = element_blank(),\n         panel.background = element_blank(),\n         panel.border = element_rect(color = \"black\", fill = \"NA\"),\n         axis.text.x = element_text(angle = 90, hjust=1),\n         legend.title = element_blank(),\n         axis.ticks.x = element_blank(),\n         strip.background = element_blank()) +\n  ggtitle(\"Cell type frequency by subtype\")+\n  scale_y_continuous(limits = c(0,0.7))+\n  stat_compare_means(comparisons=list(c(\"LumA\", \"LumB\")), label = \"p.signif\")\n\n### Cell type freq distribution by grade (boxplots)\nsign_testing <- compare_means(\n    proportion~Grade, data = celltype_prop, group.by = \"cell_type\")\n\nmy_comparisons <- list(c(\"G1\", \"G2\"), c(\"G1\", \"G3\"), c(\"G2\", \"G3\"))\n\nggplot(celltype_prop, aes(x = Grade, y = proportion))+\n  geom_boxplot()+\n  geom_point()+\n  facet_wrap(~cell_type, scales=\"fixed\", ncol=4)+\n   theme(axis.title.x=element_blank(), \n         axis.title.y = element_blank(),\n         panel.background = element_blank(),\n         panel.border = element_rect(color = \"black\", fill = \"NA\"),\n         axis.text.x = element_text(angle = 90, hjust=1),\n         legend.title = element_blank(),\n         axis.ticks.x = element_blank(),\n         strip.background = element_blank()) +\n  ggtitle(\"Cell type frequency by subtype\")+\n  scale_y_continuous(limits = c(0,0.7))+\n  stat_compare_means(comparisons = my_comparisons, label = \"p.signif\")\n\n### Cell type freq by age (correlation plots)\nggplot(celltype_prop, aes(proportion, Age.at.Surgery))+\n  geom_point()+\n  facet_wrap(~cell_type, scales = \"free\", ncol = 4)+\n  stat_cor()+\n     theme(panel.background = element_blank(),\n         panel.border = element_rect(color = \"black\", fill = \"NA\"),\n         strip.background = element_blank()) +\n  ggtitle(\"Cell type frequency by age\")\n```\n:::\n\n\n## Figure3\n## Figure4\n## Figure5\n\n## SessionInfo\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nsessionInfo()\n```\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}