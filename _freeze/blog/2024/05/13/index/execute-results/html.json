{
  "hash": "5a69a7ac8b3522a4097f24bcd06f518a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Plot scatter plot with 2D density\"\ndate: 2024-05-11\ndate-modified: last-modified\ncategories:\n  - density\nimage: 2d_density.jpg\ndescription: 2d density plot is helpful for examining the connection between 2 numerical variables. It divides the plot area into several little fragments to prevent overlapping (as in the scatterplot next to it) and shows the number of points in each fragment.\n---\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggpubr)\n## Loading required package: ggplot2\n## Warning: package 'ggplot2' was built under R version 4.3.3\nlibrary(MASS)\nlibrary(viridis)\n## Loading required package: viridisLite\nlibrary(patchwork)\n## Warning: package 'patchwork' was built under R version 4.3.3\n## \n## Attaching package: 'patchwork'\n## The following object is masked from 'package:MASS':\n## \n##     area\nlibrary(tidyverse)\n## Warning: package 'purrr' was built under R version 4.3.3\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ lubridate 1.9.3     ✔ tibble    3.2.1\n## ✔ purrr     1.0.4     ✔ tidyr     1.3.1\n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ✖ dplyr::select() masks MASS::select()\n## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n### Add 2d density estimation\nplot_data <- iris |> mutate(Species = factor(Species)) |> as_tibble()\n\nsp <- ggplot(plot_data, aes(x = Sepal.Length, y = Sepal.Width))+\n    geom_point()+\n    theme_bw()\n\n### Show the countour only\nsp + geom_density_2d()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n### Show the area only, with gradient color\nsp + stat_density_2d(aes(fill = ..level..), geom = \"polygon\")\n## Warning: The dot-dot notation (`..level..`) was deprecated in ggplot2 3.4.0.\n## ℹ Please use `after_stat(level)` instead.\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-2.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n### Change gradient color: custom\nsp + stat_density_2d(aes(fill = ..level..), geom = \"polygon\") +\n    gradient_fill(c(\"white\", \"steelblue\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-3.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n### Change gradient color: custom\nsp + stat_density_2d(\n    aes(\n        fill = after_stat(nlevel)), geom = \"polygon\", \n        n = 200, bins = 10, contour = TRUE\n) +\n    scale_fill_viridis_c(option = \"A\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-4.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n    # gradient_fill(c(\"white\", \"steelblue\"))\n\n### Category data\nsp + stat_density_2d(aes(alpha = ..level.., fill = Species), geom = \"polygon\") +\n    scale_fill_manual(values = c(\"red\", \"steelblue\", \"green\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-5.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\nsp + stat_density_2d(\n    aes(alpha = ..level.., fill = Species), geom = \"polygon\",\n     n = 200, bins = 10, contour = TRUE\n) +\n    scale_fill_manual(values = c(\"red\", \"steelblue\", \"green\")) +\n    facet_wrap(~Species)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-6.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\nsp + stat_density_2d(\n    aes(alpha = after_stat(nlevel), fill = Species), geom = \"polygon\",\n     n = 200, bins = 10, contour = TRUE\n) +\n    scale_fill_manual(values = c(\"red\", \"steelblue\", \"green\")) +\n    facet_wrap(~Species)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-7.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n### By adding to stat_density_2d the argument bins to avoid overplotting, \n### control and draw the attention to a number of density areas in a very economical fashion.\nsp + \nstat_density_2d(\n    aes(alpha = ..level.., fill = Species), geom = \"polygon\", bins = 4\n) +\n    scale_fill_manual(values = c(\"red\", \"steelblue\", \"green\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-8.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n### Assigning manually the colours, NA for those levels we do not want to plot. Main disadvantage, we should know the number of levels and colours needed in advance (or compute them)\nsp +\nstat_density_2d(geom = \"polygon\", aes(fill = as.factor(..level..))) +\n  scale_fill_manual(\n    values = c(NA, NA, NA, NA, NA,\"#BDD7E7\", \"#6BAED6\", \"#3182BD\", \"#08519C\")\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-9.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n###\nsp + geom_density_2d_filled() +\n  scale_fill_brewer()\n## Warning in RColorBrewer::brewer.pal(n, pal): n too large, allowed maximum for palette Blues is 9\n## Returning the palette you asked for with that many colors\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-10.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n### Change the gradient color: RColorBrewer palette\nsp + stat_density_2d(aes(fill = ..level..), geom = \"polygon\") +\n    gradient_fill(\"YlOrRd\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-11.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n### Area + contour\nsp + stat_density_2d(aes(fill = ..level..), geom = \"polygon\", colour = \"white\") +\n    gradient_fill(\"YlOrRd\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-12.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n### Using raster\nsp +\n    stat_density_2d(aes(fill = ..density..), geom = \"raster\", contour = FALSE) +\n    scale_x_continuous(expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-13.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n### Call the palette with a number\nsp +\n    stat_density_2d(aes(fill = ..density..), geom = \"raster\", contour = FALSE) +\n    scale_fill_distiller(palette = 4, direction = -1) +\n    scale_x_continuous(expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-14.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n\n### The direction argument allows to reverse the palette\nsp +\n    stat_density_2d(aes(fill = ..density..), geom = \"raster\", contour = FALSE) +\n    scale_fill_distiller(palette = 4, direction = 1) +\n    scale_x_continuous(expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-15.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n\n### Call the palette using a name.\nsp +\n    stat_density_2d(aes(fill = ..density..), geom = \"raster\", contour = FALSE) +\n    scale_fill_distiller(palette = \"Spectral\", direction = 1) +\n    scale_x_continuous(expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-16.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_data <-\n  data.frame(X = c(rnorm(300, 3, 2.5), rnorm(150, 7, 2)),\n             Y = c(rnorm(300, 6, 2.5), rnorm(150, 2, 2)),\n             Label = c(rep('A', 300), rep('B', 150)))\n\n\nlibrary(ggplot2)\nlibrary(MASS)\nlibrary(tidyr)\n#Calculate the range\nxlim <- range(plot_data$X)\nylim <-range(plot_data$Y)\n\n\n#Genrate the kernel density for each group\nnewplot_data <- plot_data %>% group_by(Label) %>% do(Dens=kde2d(.$X, .$Y, n=100, lims=c(xlim,ylim)))\n\n#Transform the density in  data.frame\nnewplot_data  %<>%  do(Label=.$Label, V=expand.grid(.$Dens$x,.$Dens$y), Value=c(.$Dens$z)) %>% do(data.frame(Label=.$Label,x=.$V$Var1, y=.$V$Var2, Value=.$Value))\n\n#Untidy data and chose the value for each point.\n#In this case chose the value of the label with highest value  \n   newplot_data  %<>%   spread( Label,value=Value) %>%\n        mutate(Level = if_else(A>B, A, B), Label = if_else(A>B,\"A\", \"B\"))\n# Contour plot\nggplot(newplot_data, aes(x,y, z=Level, fill=Label, alpha=..level..))  + stat_contour(geom=\"polygon\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n### Define the functio using kde2d\n# Get density of points in 2 dimensions.\n# @param x A numeric vector.\n# @param y A numeric vector.\n# @param n Create a square n by n grid to compute density.\n# @return The density within each square.\nget_density <- function(x, y, ...) {\n  dens <- MASS::kde2d(x, y, ...)\n  ix <- findInterval(x, dens$x)\n  iy <- findInterval(y, dens$y)\n  ii <- cbind(ix, iy)\n  return(dens$z[ii])\n}\n\n### Example data\nset.seed(1)\ndat <- data.frame(\n  x = c(\n    rnorm(1e4, mean = 0, sd = 0.1),\n    rnorm(1e3, mean = 0, sd = 0.1)\n  ),\n  y = c(\n    rnorm(1e4, mean = 0, sd = 0.1),\n    rnorm(1e3, mean = 0.1, sd = 0.2)\n  )\n)\n\n### Split the plot into a 100 by 100 grid of squares and then color the points \n### by the estimated density in each square\ndat$density <- get_density(dat$x, dat$y, n = 100)\n\n### Points are overplotted, so you can’t see the peak density:\nggplot(dat) + geom_point(aes(x, y))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\nggplot(dat) + geom_point(aes(x, y, color = density)) + \n    scale_color_viridis()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n### set n = 15 (the squares in the grid are too big)\ndat$density <- get_density(dat$x, dat$y, n = 15)\nggplot(dat) + geom_point(aes(x, y, color = density)) + \n    scale_color_viridis()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-3.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n### And what if you modify the bandwidth of the normal kernel with h = c(1, 1)?\ndat$density <- get_density(dat$x, dat$y, h = c(1, 1), n = 100)\nggplot(dat) + geom_point(aes(x, y, color = density)) + scale_color_viridis()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-4.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Generate example data\nset.seed(123)\ndf <- data.frame(matrix(rnorm(1000), ncol=10))\ndf$type <- sample(c(\"WT\", \"MUT/HET\"), nrow(df), replace = TRUE)\n\n# Perform UMAP\numap_result <- umap(df %>% select(-type))\n\n# Prepare data for plotting\numap_df <- as.data.frame(umap_result$layout)\ncolnames(umap_df) <- c(\"UMAP1\", \"UMAP2\")\numap_df$type <- df$type\n\n# Function to create density plots with customized legend\nplot_density <- function(data, title, color_low, color_high) {\n  ggplot(data, aes(x = UMAP1, y = UMAP2)) +\n    geom_density_2d_filled(aes(fill = after_stat(level)), bins = 30) +  # Ensure enough bins for continuous fill\n    scale_fill_gradient(low = color_low, high = color_high, name = \"Density\", \n                        labels = c(\"Low\", \"High\")) +\n    theme_minimal() +\n    labs(title = title) +\n    theme(\n      legend.position = \"top\",\n      legend.title = element_text(size = 10),\n      legend.text = element_text(size = 8),\n      plot.title = element_text(hjust = 0.5)\n    ) +\n    guides(fill = guide_colorbar(barwidth = 7, barheight = 1,\n                                 title.position = \"top\", title.hjust = 0.5,\n                                 label.position = \"bottom\"))\n}\n\n# WT Density Plot\nwt_density_plot <- plot_density(umap_df %>% filter(type == \"WT\"), \"WT density\", \"white\", \"blue\")\n\n# Display the plot\nprint(wt_density_plot)\n\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}