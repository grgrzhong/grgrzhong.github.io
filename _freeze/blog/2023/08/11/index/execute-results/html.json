{
  "hash": "7894e7eb9fb08b94349167922095cf6d",
  "result": {
    "markdown": "---\ntitle: \"Commonly used Vim commands \"\ndate: 2023-08-11\ndate-modified: last-modified\ncategories:\n  - vim\n  - linux\nimage: vim.jpg\ndescription: a list of essential Vim commands that could be used every day\n---\n\n\n\n\nBasics commands\n\n![](vim1.png)\n\nAdvanced commands\n\n![](vim2.png)\n\n## Essentials\nCursor movement (Normal/Visual Mode)\n\n- `h` `j` `k` `l` - Arrow keys\n- `w` / `b` - Next/previous word\n- `W` / `B` - Next/previous word (space seperated)\n- `e` / `ge` - Next/previous end of word\n- `0` / `$` - Start/End of line\n- `^` - First non-blank character of line (same as 0w)\n\nEditing text\n\n- `i` / `a` - Start insert mode at/after cursor\n- `I` / `A` - Start insert mode at the beginning/end of the line\n- `o` / `O` - Add blank line below/above current line\n- `Esc` or `Ctrl+[` - Exit insert mode\n- `d` - Delete\n- `dd` - Delete line\n- `c` - Delete, then start insert mode\n- `cc` - Delete line, then start insert mode\n\nOperators\n\n- Operators also work in Visual Mode\n- `d` - Deletes from the cursor to the movement location\n- `c` - Deletes from the cursor to the movement location, then starts insert mode\n- `y` - Copy from the cursor to the movement location\n- `>` - Indent one level\n- `<` - Unindent one level\n- You can also combine operators with motions. Ex: d$ deletes from the cursor to the end of the line.\n\nMarking text (visual mode)\n\n- `v` - Start visual mode\n- `V` - Start linewise visual mode\n- `Ctrl+v` - Start visual block mode\n- `Esc` or `Ctrl+[` - Exit visual mode\n\nClipboard\n\n- `yy` - Yank (copy) a line\n- `p` - Paste after cursor\n- `P` - Paste before cursor\n- `dd` - Delete (cut) a line\n- `x` - Delete (cut) current character\n- `X` - Delete (cut) previous character\n- `d` / `c` - By default, these copy the deleted text\n\nExiting\n\n- `:w` - Write (save) the file, but don’t quit\n- `:wq` - Write (save) and quit\n- `:q` - Quit (fails if anything has changed)\n- `:q!` - Quit and throw away changes\n\nSearch/Replace\n\n- `/pattern` - Search for pattern\n- `?pattern` - Search backward for pattern\n- `n` - Repeat search in same direction\n- `N` - Repeat search in opposite direction\n- `:%s/old/new/g` - Replace all old with new throughout file (gn is better though)\n- `:%s/old/new/gc` - Replace all old with new throughout file with confirmations\n\nGeneral\n\n- `u` - Undo\n- `Ctrl+r` - Redo\n\n## Advanced\n\nCursor movement\n\n- `Ctrl+d` - Move down half a page\n- `Ctrl+u` - Move up half a page\n- `}` - Go forward by paragraph (the next blank line)\n- `{` - Go backward by paragraph (the next blank line)\n- `gg` - Go to the top of the page\n- `G `- Go the bottom of the page\n- `: [num] [enter]` - Go to that line in the document\n- `ctrl+e / ctrl+y` - Scroll down/up one line\n\nCharacter search\n\n- `f [char]` - Move forward to the given char\n- `F [char]` - Move backward to the given char\n- `t [char]` - Move forward to before the given char\n- `T [char]` - Move backward to before the given char\n- `; / , ` - Repeat search forwards/backwards\n\nEditing text\n\n- `J` - Join line below to the current one\n- `r` [char] - Replace a single character with the specified char (does not use Insert mode)\n\nVisual mode\n\n- `O` - Move to other corner of block\n- `o` - Move to other end of marked area\n\nFile Tabs\n\n- `:e` filename - Edit a file\n- `:tabe` - Make a new tab\n- `gt` - Go to the next tab\n- `gT` - Go to the previous tab\n- `:vsp` - Vertically split windows\n- `ctrl+ws` - Split windows horizontally\n- `ctrl+wv`- Split windows vertically\n- `ctrl+ww`- Switch between windows\n- `ctrl+wq`- Quit a window\n\nMarks\n\n- Marks allow you to jump to designated points in your code.\n- `m{a-z}` - Set mark {a-z} at cursor position\n- A capital mark {A-Z} sets a global mark and will work between files\n- `'{a-z}` - Move the cursor to the start of the line where the mark was set\n- `''` - Go back to the previous jump location\n\nText Objects\n\n- Say you have `def (arg1, arg2, arg3)`, where your cursor is somewhere in the middle of the parenthesis.\n- `di(` deletes everything between the parenthesis. That says “change everything inside the nearest parenthesis”. Without text objects, you would need to do `T(dt)`.\n- Learn more\n\nGeneral\n\n- `.` - Repeat last command\n- `Ctrl+r + 0` in insert mode inserts the last yanked text (or in command mode)\n- `gv` - reselect (select last selected block of text, from visual mode)\n- `%` - jumps between matching () or {}\n\n## Reference\n\n- [Vim cheatsheet](https://quickref.me/vim.html)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}