{
  "hash": "c74fd1fe4c98f8c77f05916ce1384e01",
  "result": {
    "markdown": "---\ntitle: \"Learning Seruat for scRNA-seq data analysis\"\ndate: 2023-11-25\ndate-modified: last-modified\ncategories:\n  - r\n  - seurat\n  - scRNA-seq\nimage: umap.png\ndescription: The package that must to learn for scRNA-seq data analysis.\nexecute: \n  freeze: true\n#   # echo: false\n  warning: false\n#   eval: false\n---\n\n\n\n\n## Load packages and data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Library packages\nlibrary(here)\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(SingleR)\nlibrary(ggrepel)\nlibrary(patchwork)\n\n# Load PBMC dataset\npbmc_data <- Read10X(data.dir = \"./learn/2023_scRNA_Seurat/pbmc3k/hg19/\")\n\n# Initialize the seurat boject witht raw (non-normalized data)\npbmc <- CreateSeuratObject(\n    counts = pbmc_data, project = \"pbmc3k\", min.cells = 3, min.features = 200\n)\n# View the data\npbmc\n## An object of class Seurat \n## 13714 features across 2700 samples within 1 assay \n## Active assay: RNA (13714 features, 0 variable features)\n##  1 layer present: counts\ndim(pbmc_data)\n## [1] 32738  2700\n\n# Example a few genes in the first thirty cells\npbmc_data[c(\"CD3D\", \"TCL1A\", \"MS4A1\"), 1:30]\n## 3 x 30 sparse Matrix of class \"dgCMatrix\"\n##                                                                    \n## CD3D  4 . 10 . . 1 2 3 1 . . 2 7 1 . . 1 3 . 2  3 . . . . . 3 4 1 5\n## TCL1A . .  . . . . . . 1 . . . . . . . . . . .  . 1 . . . . . . . .\n## MS4A1 . 6  . . . . . . 1 1 1 . . . . . . . . . 36 1 2 . . 2 . . . .\n```\n:::\n\n\n## Preprocess data\n\n### QC\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# The [[ operator can add columns to object metadata. This is a great place to stash QC stats\npbmc[[\"percent.mt\"]] <- PercentageFeatureSet(pbmc, pattern = \"^MT-\")\n\n# Show QC metrics for the first 5 cells\nhead(pbmc@meta.data, 5)\n##                  orig.ident nCount_RNA nFeature_RNA percent.mt\n## AAACATACAACCAC-1     pbmc3k       2419          779  3.0177759\n## AAACATTGAGCTAC-1     pbmc3k       4903         1352  3.7935958\n## AAACATTGATCAGC-1     pbmc3k       3147         1129  0.8897363\n## AAACCGTGCTTCCG-1     pbmc3k       2639          960  1.7430845\n## AAACCGTGTATGCG-1     pbmc3k        980          521  1.2244898\n\n# Visualize QC metrics as a violin plot\nVlnPlot(pbmc, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\"), ncol = 3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n# FeatureScatter is typically used to visualize feature-feature relationships, but can be used\n# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.\nplot1 <- FeatureScatter(pbmc, feature1 = \"nCount_RNA\", feature2 = \"percent.mt\")\nplot2 <- FeatureScatter(pbmc, feature1 = \"nCount_RNA\", feature2 = \"nFeature_RNA\")\nplot1 + plot2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-2.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\npbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)\n```\n:::\n\n\n### Normalizing the data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc <- NormalizeData(pbmc, normalization.method = \"LogNormalize\", scale.factor = 10000)\n# pbmc <- NormalizeData(pbmc)\n# pbmc@assays$RNA@counts is the raw count data\nstr(pbmc)\n## Formal class 'Seurat' [package \"SeuratObject\"] with 13 slots\n##   ..@ assays      :List of 1\n##   .. ..$ RNA:Formal class 'Assay5' [package \"SeuratObject\"] with 8 slots\n##   .. .. .. ..@ layers    :List of 2\n##   .. .. .. .. ..$ counts:Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots\n##   .. .. .. .. .. .. ..@ i       : int [1:2238732] 29 73 80 148 163 184 186 227 229 230 ...\n##   .. .. .. .. .. .. ..@ p       : int [1:2639] 0 779 2131 3260 4220 4741 5522 6304 7094 7626 ...\n##   .. .. .. .. .. .. ..@ Dim     : int [1:2] 13714 2638\n##   .. .. .. .. .. .. ..@ Dimnames:List of 2\n##   .. .. .. .. .. .. .. ..$ : NULL\n##   .. .. .. .. .. .. .. ..$ : NULL\n##   .. .. .. .. .. .. ..@ x       : num [1:2238732] 1 1 2 1 1 1 1 41 1 1 ...\n##   .. .. .. .. .. .. ..@ factors : list()\n##   .. .. .. .. ..$ data  :Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots\n##   .. .. .. .. .. .. ..@ i       : int [1:2238732] 29 73 80 148 163 184 186 227 229 230 ...\n##   .. .. .. .. .. .. ..@ p       : int [1:2639] 0 779 2131 3260 4220 4741 5522 6304 7094 7626 ...\n##   .. .. .. .. .. .. ..@ Dim     : int [1:2] 13714 2638\n##   .. .. .. .. .. .. ..@ Dimnames:List of 2\n##   .. .. .. .. .. .. .. ..$ : NULL\n##   .. .. .. .. .. .. .. ..$ : NULL\n##   .. .. .. .. .. .. ..@ x       : num [1:2238732] 1.64 1.64 2.23 1.64 1.64 ...\n##   .. .. .. .. .. .. ..@ factors : list()\n##   .. .. .. ..@ cells     :Formal class 'LogMap' [package \"SeuratObject\"] with 1 slot\n##   .. .. .. .. .. ..@ .Data: logi [1:2638, 1:2] TRUE TRUE TRUE TRUE TRUE TRUE ...\n##   .. .. .. .. .. .. ..- attr(*, \"dimnames\")=List of 2\n##   .. .. .. .. .. .. .. ..$ : chr [1:2638] \"AAACATACAACCAC-1\" \"AAACATTGAGCTAC-1\" \"AAACATTGATCAGC-1\" \"AAACCGTGCTTCCG-1\" ...\n##   .. .. .. .. .. .. .. ..$ : chr [1:2] \"counts\" \"data\"\n##   .. .. .. .. .. ..$ dim     : int [1:2] 2638 2\n##   .. .. .. .. .. ..$ dimnames:List of 2\n##   .. .. .. .. .. .. ..$ : chr [1:2638] \"AAACATACAACCAC-1\" \"AAACATTGAGCTAC-1\" \"AAACATTGATCAGC-1\" \"AAACCGTGCTTCCG-1\" ...\n##   .. .. .. .. .. .. ..$ : chr [1:2] \"counts\" \"data\"\n##   .. .. .. ..@ features  :Formal class 'LogMap' [package \"SeuratObject\"] with 1 slot\n##   .. .. .. .. .. ..@ .Data: logi [1:13714, 1:2] TRUE TRUE TRUE TRUE TRUE TRUE ...\n##   .. .. .. .. .. .. ..- attr(*, \"dimnames\")=List of 2\n##   .. .. .. .. .. .. .. ..$ : chr [1:13714] \"AL627309.1\" \"AP006222.2\" \"RP11-206L10.2\" \"RP11-206L10.9\" ...\n##   .. .. .. .. .. .. .. ..$ : chr [1:2] \"counts\" \"data\"\n##   .. .. .. .. .. ..$ dim     : int [1:2] 13714 2\n##   .. .. .. .. .. ..$ dimnames:List of 2\n##   .. .. .. .. .. .. ..$ : chr [1:13714] \"AL627309.1\" \"AP006222.2\" \"RP11-206L10.2\" \"RP11-206L10.9\" ...\n##   .. .. .. .. .. .. ..$ : chr [1:2] \"counts\" \"data\"\n##   .. .. .. ..@ default   : int 1\n##   .. .. .. ..@ assay.orig: chr(0) \n##   .. .. .. ..@ meta.data :'data.frame':\t13714 obs. of  0 variables\n##   .. .. .. ..@ misc      : Named list()\n##   .. .. .. ..@ key       : chr \"rna_\"\n##   ..@ meta.data   :'data.frame':\t2638 obs. of  4 variables:\n##   .. ..$ orig.ident  : Factor w/ 1 level \"pbmc3k\": 1 1 1 1 1 1 1 1 1 1 ...\n##   .. ..$ nCount_RNA  : num [1:2638] 2419 4903 3147 2639 980 ...\n##   .. ..$ nFeature_RNA: int [1:2638] 779 1352 1129 960 521 781 782 790 532 550 ...\n##   .. ..$ percent.mt  : num [1:2638] 3.02 3.79 0.89 1.74 1.22 ...\n##   ..@ active.assay: chr \"RNA\"\n##   ..@ active.ident: Factor w/ 1 level \"pbmc3k\": 1 1 1 1 1 1 1 1 1 1 ...\n##   .. ..- attr(*, \"names\")= chr [1:2638] \"AAACATACAACCAC-1\" \"AAACATTGAGCTAC-1\" \"AAACATTGATCAGC-1\" \"AAACCGTGCTTCCG-1\" ...\n##   ..@ graphs      : list()\n##   ..@ neighbors   : list()\n##   ..@ reductions  : list()\n##   ..@ images      : list()\n##   ..@ project.name: chr \"pbmc3k\"\n##   ..@ misc        : list()\n##   ..@ version     :Classes 'package_version', 'numeric_version'  hidden list of 1\n##   .. ..$ : int [1:3] 5 0 1\n##   ..@ commands    :List of 1\n##   .. ..$ NormalizeData.RNA:Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots\n##   .. .. .. ..@ name       : chr \"NormalizeData.RNA\"\n##   .. .. .. ..@ time.stamp : POSIXct[1:1], format: \"2023-12-16 20:46:32\"\n##   .. .. .. ..@ assay.used : chr \"RNA\"\n##   .. .. .. ..@ call.string: chr [1:2] \"NormalizeData(pbmc, normalization.method = \\\"LogNormalize\\\", \" \"    scale.factor = 10000)\"\n##   .. .. .. ..@ params     :List of 5\n##   .. .. .. .. ..$ assay               : chr \"RNA\"\n##   .. .. .. .. ..$ normalization.method: chr \"LogNormalize\"\n##   .. .. .. .. ..$ scale.factor        : num 10000\n##   .. .. .. .. ..$ margin              : num 1\n##   .. .. .. .. ..$ verbose             : logi TRUE\n##   ..@ tools       : list()\n\n# Simply look at the data after normalization\n# par(mfrow = c(1,2))\n# hist(colSums(pbmc$RNA@counts@i),breaks = 50)\n# hist(colSums(pbmc$RNA@data@i),breaks = 50)\n```\n:::\n\n\n### Highly variable features\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc <- FindVariableFeatures(pbmc, selection.method = \"vst\", nfeatures = 2000)\n\n# Identify the 10 most highly variable genes\ntop10 <- head(VariableFeatures(pbmc), 10)\n\n# Plot variable features with and without labels\nplot1 <- VariableFeaturePlot(pbmc)\nplot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)\nplot1 + plot2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=100%}\n:::\n:::\n\n### Scaling the data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_genes <- rownames(pbmc)\npbmc <- ScaleData(pbmc, features = all_genes)\n# Remove unwanted sources of variation\n# pbmc <- ScaleData(pbmc, vars.to.regress = \"percent.mt\")\n```\n:::\n\n\n## Perform linear dimensional reduction\n\n### PCA\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))\n# Examine and visualize PCA results a few different ways\nprint(pbmc[[\"pca\"]], dims = 1:5, nfeatures = 5)\n## PC_ 1 \n## Positive:  CST3, TYROBP, LST1, AIF1, FTL \n## Negative:  MALAT1, LTB, IL32, IL7R, CD2 \n## PC_ 2 \n## Positive:  CD79A, MS4A1, TCL1A, HLA-DQA1, HLA-DQB1 \n## Negative:  NKG7, PRF1, CST7, GZMB, GZMA \n## PC_ 3 \n## Positive:  HLA-DQA1, CD79A, CD79B, HLA-DQB1, HLA-DPB1 \n## Negative:  PPBP, PF4, SDPR, SPARC, GNG11 \n## PC_ 4 \n## Positive:  HLA-DQA1, CD79B, CD79A, MS4A1, HLA-DQB1 \n## Negative:  VIM, IL7R, S100A6, IL32, S100A8 \n## PC_ 5 \n## Positive:  GZMB, NKG7, S100A8, FGFBP2, GNLY \n## Negative:  LTB, IL7R, CKB, VIM, MS4A7\n```\n:::\n\n### Visualize it\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nVizDimLoadings(\n    pbmc, dims = 1:2, \n    nfeatures = 20,\n    reduction = \"pca\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n# PCA dotplot\nDimPlot(pbmc, reduction = \"pca\") + NoLegend()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-2.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n# PCA heatmap\nDimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-3.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\nDimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-4.png){fig-align='center' width=100%}\n:::\n:::\n\n## Determine the dimensionality of the dataset\n\n### JackStrawPlot\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# NOTE: This process can take a long time for big datasets, comment out for expediency. More\n# approximate techniques such as those implemented in ElbowPlot() can be used to reduce\n\n# Computation time\npbmc <- JackStraw(pbmc, num.replicate = 100)\npbmc <- ScoreJackStraw(pbmc, dims = 1:20)\n\nJackStrawPlot(pbmc, dims = 1:15)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### Elbow plot\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nElbowPlot(pbmc)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### Significant related genes\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Returns a set of genes, based on the JackStraw analysis, that have statistically significant associations with a set of PCs.\n# ?PCASigGenes\nhead(PCASigGenes(pbmc,pcs.use=2,pval.cut = 0.7))\n## [1] \"PPBP\"   \"LYZ\"    \"S100A9\" \"IGLL5\"  \"GNLY\"   \"FTL\"\n```\n:::\n\n## Cluster the cells\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc <- FindNeighbors(pbmc, dims = 1:10)\npbmc <- FindClusters(pbmc, resolution = 0.5)\n## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n## \n## Number of nodes: 2638\n## Number of edges: 95927\n## \n## Running Louvain algorithm...\n## Maximum modularity in 10 random starts: 0.8728\n## Number of communities: 9\n## Elapsed time: 0 seconds\n\n# Look at cluster IDs of the first 5 cells\nhead(Idents(pbmc), 5)\n## AAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1 AAACCGTGCTTCCG-1 \n##                2                3                2                1 \n## AAACCGTGTATGCG-1 \n##                6 \n## Levels: 0 1 2 3 4 5 6 7 8\n\n# Look at the cells of specific cluster\nhead(subset(as.data.frame(pbmc@active.ident),pbmc@active.ident==\"2\"))\n##                  pbmc@active.ident\n## AAACATACAACCAC-1                 2\n## AAACATTGATCAGC-1                 2\n## AAACGCACTGGTAC-1                 2\n## AAAGAGACGAGATA-1                 2\n## AAAGCCTGTATGCG-1                 2\n## AAATCAACTCGCAA-1                 2\n\n# Retrieve the cells of a cluster\nsubpbmc <- subset(x = pbmc,idents=\"2\")\nsubpbmc\n## An object of class Seurat \n## 13714 features across 476 samples within 1 assay \n## Active assay: RNA (13714 features, 2000 variable features)\n##  3 layers present: counts, data, scale.data\n##  1 dimensional reduction calculated: pca\nhead(subpbmc@active.ident,5)\n## AAACATACAACCAC-1 AAACATTGATCAGC-1 AAACGCACTGGTAC-1 AAAGAGACGAGATA-1 \n##                2                2                2                2 \n## AAAGCCTGTATGCG-1 \n##                2 \n## Levels: 2\n```\n:::\n\n\n## Run non-linear dimensional reduction\n\n### UMAP\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# If you haven't installed UMAP, you can do so via \n# reticulate::py_install(packages = \"umap-learn\")\n\npbmc <- RunUMAP(pbmc, dims = 1:10)\n\n# Note that you can set `label = TRUE` or use the LabelClusters function to help label\n# Individual clusters\nDimPlot(pbmc, reduction = \"umap\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### tSNE\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc <- RunTSNE(pbmc, dims = 1:10)\n\nhead(pbmc@reductions$tsne@cell.embeddings)\n##                      tSNE_1     tSNE_2\n## AAACATACAACCAC-1 -12.721811   6.420117\n## AAACATTGAGCTAC-1 -20.682526 -22.307703\n## AAACATTGATCAGC-1  -3.067779  23.686369\n## AAACCGTGCTTCCG-1  30.350720  -9.899162\n## AAACCGTGTATGCG-1 -35.994115   9.507508\n## AAACGCACTGGTAC-1  -3.124182  12.680105\n\nDimPlot(pbmc, reduction = \"tsne\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=100%}\n:::\n:::\n\n### Compare\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Note that you can set `label = TRUE` or use the LabelClusters function to help label\n# Individual clusters\nplot1 <- DimPlot(pbmc, reduction = \"umap\", label = TRUE)\nplot2 <- DimPlot(pbmc, reduction = \"tsne\", label = TRUE)\nplot1 + plot2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Finding cluster biomarkers\n\n### Find clusters\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Find all markers of cluster 2\ncluster2_markers <- FindMarkers(pbmc, ident.1 = 2)\nhead(cluster2_markers, n = 5)\n##             p_val avg_log2FC pct.1 pct.2    p_val_adj\n## IL32 2.892340e-90  1.3070772 0.947 0.465 3.966555e-86\n## LTB  1.060121e-86  1.3312674 0.981 0.643 1.453850e-82\n## CD3D 8.794641e-71  1.0597620 0.922 0.432 1.206097e-66\n## IL7R 3.516098e-68  1.4377848 0.750 0.326 4.821977e-64\n## LDHB 1.642480e-67  0.9911924 0.954 0.614 2.252497e-63\n\n# Find all markers distinguishing cluster 5 from clusters 0 and 3\ncluster5_markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3))\nhead(cluster5_markers, n = 5)\n##                       p_val avg_log2FC pct.1 pct.2     p_val_adj\n## FCGR3A        8.246578e-205   6.794969 0.975 0.040 1.130936e-200\n## IFITM3        1.677613e-195   6.192558 0.975 0.049 2.300678e-191\n## CFD           2.401156e-193   6.015172 0.938 0.038 3.292945e-189\n## CD68          2.900384e-191   5.530330 0.926 0.035 3.977587e-187\n## RP11-290F20.3 2.513244e-186   6.297999 0.840 0.017 3.446663e-182\n\n# Find markers for every cluster compared to all remaining cells, report only the positive ones\npbmc_markers <- FindAllMarkers(pbmc, only.pos = TRUE)\npbmc_markers %>%\n    group_by(cluster) %>%\n    dplyr::filter(avg_log2FC > 1)\n## # A tibble: 7,019 × 7\n## # Groups:   cluster [9]\n##        p_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene     \n##        <dbl>      <dbl> <dbl> <dbl>     <dbl> <fct>   <chr>    \n##  1 3.75e-112       1.21 0.912 0.592 5.14e-108 0       LDHB     \n##  2 9.57e- 88       2.40 0.447 0.108 1.31e- 83 0       CCR7     \n##  3 1.15e- 76       1.06 0.845 0.406 1.58e- 72 0       CD3D     \n##  4 1.12e- 54       1.04 0.731 0.4   1.54e- 50 0       CD3E     \n##  5 1.35e- 51       2.14 0.342 0.103 1.86e- 47 0       LEF1     \n##  6 1.94e- 47       1.20 0.629 0.359 2.66e- 43 0       NOSIP    \n##  7 2.81e- 44       1.53 0.443 0.185 3.85e- 40 0       PIK3IP1  \n##  8 6.27e- 43       1.99 0.33  0.112 8.60e- 39 0       PRKCQ-AS1\n##  9 1.16e- 40       2.70 0.2   0.04  1.59e- 36 0       FHIT     \n## 10 1.34e- 34       1.96 0.268 0.087 1.84e- 30 0       MAL      \n## # ℹ 7,009 more rows\n# ?FindAllMarkers\n\ncluster0_markers <- FindMarkers(\n    pbmc, ident.1 = 0, logfc.threshold = 0.25, test.use = \"roc\", \n    only.pos = TRUE\n)\n```\n:::\n\n### Visualization\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n### Show expression probability distributions across clusters\nVlnPlot(pbmc, features = c(\"MS4A1\", \"CD79A\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n# You can plot raw counts as well\nVlnPlot(pbmc, features = c(\"NKG7\", \"PF4\"), layer = \"counts\", log = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-2.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n# Visualizes feature expression on a tSNE or PCA plot\nFeaturePlot(\n    pbmc, features = c(\n        \"MS4A1\", \"GNLY\", \"CD3E\", \"CD14\", \"FCER1A\", \"FCGR3A\", \n        \"LYZ\", \"PPBP\",\"CD8A\"\n    )\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-3.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n# Expression heatmap for given cells and features\ntop10 <- pbmc_markers %>%\n    group_by(cluster) %>%\n    top_n(n = 10, wt = avg_log2FC)\nDoHeatmap(pbmc, features = top10$gene) + NoLegend()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-4.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Assign cell type identity to clusters\nFortunately in the case of this dataset, we can use canonical markers to easily match the unbiased clustering to known cell types:\n\nCluster ID \tMarkers \tCell Type\n0 \tIL7R, CCR7 \tNaive CD4+ T\n1 \tCD14, LYZ \tCD14+ Mono\n2 \tIL7R, S100A4 \tMemory CD4+\n3 \tMS4A1 \tB\n4 \tCD8A \tCD8+ T\n5 \tFCGR3A, MS4A7 \tFCGR3A+ Mono\n6 \tGNLY, NKG7 \tNK\n7 \tFCER1A, CST3 \tDC\n8 \tPPBP \tPlatelet\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnew_cluster_ids <- c(\n    \"Naive CD4 T\", \"CD14+ Mono\", \"Memory CD4 T\", \"B\", \"CD8 T\", \"FCGR3A+ Mono\",\"NK\", \"DC\", \"Platelet\"\n)\nnames(new_cluster_ids) <- levels(pbmc)\npbmc <- RenameIdents(pbmc, new_cluster_ids)\nDimPlot(pbmc, reduction = \"umap\", label = TRUE, pt.size = 0.5) +\n    NoLegend()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# p <- DimPlot(pbmc, reduction = \"umap\", label = TRUE, label.size = 4.5) + \n#     xlab(\"UMAP 1\") + ylab(\"UMAP 2\") +\n#     theme(\n#         axis.title = element_text(size = 18), \n#         legend.text = element_text(size = 18)) + \n#         guides(colour = guide_legend(override.aes = list(size = 10))\n#     )\n# Save plot\n# ggsave(\n#     filename = \"../output/images/pbmc3k_umap.jpg\", \n#     height = 7, width = 12, plot = p, quality = 50\n# )\n# Save data\n# saveRDS(pbmc, file = \"./learn/pbmc3k/pbmc3k_final.rds\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsessionInfo()\n## R version 4.3.1 (2023-06-16)\n## Platform: aarch64-apple-darwin20 (64-bit)\n## Running under: macOS Sonoma 14.2\n## \n## Matrix products: default\n## BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \n## LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n## \n## locale:\n## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n## \n## time zone: Asia/Singapore\n## tzcode source: internal\n## \n## attached base packages:\n## [1] stats4    stats     graphics  grDevices utils     datasets  methods  \n## [8] base     \n## \n## other attached packages:\n##  [1] patchwork_1.1.3             ggrepel_0.9.4              \n##  [3] SingleR_2.2.0               SummarizedExperiment_1.30.2\n##  [5] Biobase_2.62.0              GenomicRanges_1.52.1       \n##  [7] GenomeInfoDb_1.38.0         IRanges_2.36.0             \n##  [9] S4Vectors_0.40.2            BiocGenerics_0.48.1        \n## [11] MatrixGenerics_1.14.0       matrixStats_1.1.0          \n## [13] Seurat_5.0.1                SeuratObject_5.0.1         \n## [15] sp_2.1-2                    lubridate_1.9.3            \n## [17] forcats_1.0.0               stringr_1.5.1              \n## [19] dplyr_1.1.4                 purrr_1.0.2                \n## [21] readr_2.1.4                 tidyr_1.3.0                \n## [23] tibble_3.2.1                ggplot2_3.4.4              \n## [25] tidyverse_2.0.0             here_1.0.1                 \n## \n## loaded via a namespace (and not attached):\n##   [1] RcppAnnoy_0.0.21          splines_4.3.1            \n##   [3] later_1.3.1               bitops_1.0-7             \n##   [5] R.oo_1.25.0               polyclip_1.10-6          \n##   [7] fastDummies_1.7.3         lifecycle_1.0.4          \n##   [9] rprojroot_2.0.4           globals_0.16.2           \n##  [11] lattice_0.22-5            MASS_7.3-60              \n##  [13] magrittr_2.0.3            limma_3.58.1             \n##  [15] plotly_4.10.3             rmarkdown_2.25           \n##  [17] yaml_2.3.7                httpuv_1.6.12            \n##  [19] sctransform_0.4.1         spam_2.10-0              \n##  [21] spatstat.sparse_3.0-3     reticulate_1.34.0        \n##  [23] cowplot_1.1.1             pbapply_1.7-2            \n##  [25] RColorBrewer_1.1-3        abind_1.4-5              \n##  [27] zlibbioc_1.48.0           Rtsne_0.16               \n##  [29] R.utils_2.12.3            RCurl_1.98-1.13          \n##  [31] GenomeInfoDbData_1.2.11   irlba_2.3.5.1            \n##  [33] listenv_0.9.0             spatstat.utils_3.0-4     \n##  [35] goftest_1.2-3             RSpectra_0.16-1          \n##  [37] spatstat.random_3.2-2     fitdistrplus_1.1-11      \n##  [39] parallelly_1.36.0         DelayedMatrixStats_1.22.6\n##  [41] leiden_0.4.3.1            codetools_0.2-19         \n##  [43] DelayedArray_0.26.7       tidyselect_1.2.0         \n##  [45] farver_2.1.1              ScaledMatrix_1.8.1       \n##  [47] spatstat.explore_3.2-5    jsonlite_1.8.7           \n##  [49] ellipsis_0.3.2            progressr_0.14.0         \n##  [51] ggridges_0.5.4            survival_3.5-7           \n##  [53] tools_4.3.1               ica_1.0-3                \n##  [55] Rcpp_1.0.11               glue_1.6.2               \n##  [57] gridExtra_2.3             xfun_0.41                \n##  [59] withr_2.5.2               fastmap_1.1.1            \n##  [61] fansi_1.0.5               digest_0.6.33            \n##  [63] rsvd_1.0.5                timechange_0.2.0         \n##  [65] R6_2.5.1                  mime_0.12                \n##  [67] colorspace_2.1-0          scattermore_1.2          \n##  [69] tensor_1.5                spatstat.data_3.0-3      \n##  [71] R.methodsS3_1.8.2         utf8_1.2.4               \n##  [73] generics_0.1.3            data.table_1.14.8        \n##  [75] httr_1.4.7                htmlwidgets_1.6.3        \n##  [77] S4Arrays_1.0.6            uwot_0.1.16              \n##  [79] pkgconfig_2.0.3           gtable_0.3.4             \n##  [81] lmtest_0.9-40             XVector_0.42.0           \n##  [83] htmltools_0.5.7           dotCall64_1.1-1          \n##  [85] scales_1.3.0              png_0.1-8                \n##  [87] knitr_1.45                tzdb_0.4.0               \n##  [89] reshape2_1.4.4            nlme_3.1-163             \n##  [91] zoo_1.8-12                KernSmooth_2.23-22       \n##  [93] parallel_4.3.1            miniUI_0.1.1.1           \n##  [95] vipor_0.4.5               ggrastr_1.0.2            \n##  [97] pillar_1.9.0              grid_4.3.1               \n##  [99] vctrs_0.6.5               RANN_2.6.1               \n## [101] promises_1.2.1            BiocSingular_1.16.0      \n## [103] beachmat_2.16.0           xtable_1.8-4             \n## [105] cluster_2.1.4             beeswarm_0.4.0           \n## [107] evaluate_0.23             cli_3.6.1                \n## [109] compiler_4.3.1            rlang_1.1.2              \n## [111] crayon_1.5.2              future.apply_1.11.0      \n## [113] labeling_0.4.3            plyr_1.8.9               \n## [115] ggbeeswarm_0.7.2          stringi_1.8.2            \n## [117] viridisLite_0.4.2         deldir_2.0-2             \n## [119] BiocParallel_1.36.0       munsell_0.5.0            \n## [121] lazyeval_0.2.2            spatstat.geom_3.2-7      \n## [123] Matrix_1.6-3              RcppHNSW_0.5.0           \n## [125] hms_1.1.3                 sparseMatrixStats_1.12.2 \n## [127] future_1.33.0             statmod_1.5.0            \n## [129] shiny_1.8.0               ROCR_1.0-11              \n## [131] igraph_1.5.1\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}