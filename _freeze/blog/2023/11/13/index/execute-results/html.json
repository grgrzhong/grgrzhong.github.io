{
  "hash": "d752731c9906ea00873ae4551fcf2c90",
  "result": {
    "markdown": "---\ntitle: \"Using ggbeeswarm plot to represent categorical data\"\ndate: 2023-11-13\ndate-modified: last-modified\ncategories:\n  - r\n  - ggbeeswarm\nimage: beeswarm.png\ndescription: The plot shows all data points with a color-code for each replicate, as well as the averages of each replicate, the total average and the SEM.\n---\n\n\n\nThe code is adapted from [here](https://github.com/duzzio/Superplots_R_script)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n### Load packages\npacman::p_load(ggplot2, dplyr, ggpubr, ggbeeswarm, readxl, rstatix, here)\n\n### Import dataset\ndataset <- read_excel(here(\"learn\", \"Superplots_R_script\", \"data.xlsx\"))\n\n## Defines a colorblind-friendly palette\ncbPalette <- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\n## Order the variables on x-axis\ndataset$variable <- factor(dataset$variable, levels = c(\"Before\", \"After\"))\n\n## Calculate averages of each replicate\nreplicate_mean <- dataset |> group_by(variable, replicate) |> \n    summarise_at(vars(value), mean, na.rm =  TRUE) |> \n    ungroup()\n### view the data\nreplicate_mean\n## # A tibble: 6 Ã— 3\n##   variable replicate value\n##   <fct>        <dbl> <dbl>\n## 1 Before           1  20.8\n## 2 Before           2  23  \n## 3 Before           3  20.2\n## 4 After            1  51.4\n## 5 After            2  41.2\n## 6 After            3  55.8\n\n## Perform t-test of variable 1 and 2\n# t_test <- t.test(\n#     x = replicate_mean$value[1:3],\n#     y = replicate_mean$value[4:6],\n#     alternative = \"two.sided\",\n#     var.equal =  TRUE\n# )\n### Retrieve the p-value for the t-test of variable 1 and 2\n# pvalue <- t_test[\"p.value\"]\n\npvalue <- replicate_mean |> \n    t_test(value ~ variable) |> \n    add_significance(p.col = \"p\")\n\n## Calculate total average\ntotal_mean <- replicate_mean |> \n    group_by(variable) |> \n    summarise_at(vars(value), mean, na.rm = TRUE)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Plots Superplot based on biological repicate averags\nggplot(dataset, aes(x = variable, y = value, color = factor(replicate))) +\n    ### Add individual data points\n    geom_beeswarm(cex = 3) +\n    #### \"cex\" can be used to spread the data points if the averages are close together\n    \n    ### Add mean values as bars\n    stat_summary(data = total_mean, fun = mean, fun.min = mean, \n    fun.max = mean, geom = \"crossbar\", width = 0.25, color = \"black\") +\n    \n    ### Add error bars\n    stat_summary(data = replicate_mean, fun.data = mean_se, \n    geom = \"errorbar\", width = 0.1, color = \"black\", linewidth = 1) +\n\n    ### Add color palette\n    scale_color_manual(values = cbPalette) +\n\n    ### Add replicate averages as points\n    geom_beeswarm(data = replicate_mean, size = 5, color = \"gray\") +\n\n    ### Add pvalue\n    # stat_pvalue_manual(\n    #     pvalue, y.postion = 80, step.increase = 0.1,\n    #     label = \"p = {p.signif}\"\n    # ) +\n\n    ### Cosmetics and labeling\n    labs(x = \"\", y = \"Total counts\") +\n    theme_bw() + \n    theme(\n        axis.line = element_line(size = 1, colour = \"black\"),\n        legend.position = \"none\",\n        axis.title.y = element_text(family=\"Arial\", size=28, color = \"black\", vjust = 2),\n        axis.text = element_text(family=\"Arial\", size = 28, color = \"black\"),\n        axis.ticks = element_line(size = 1, color = \"black\"), \n        axis.ticks.length = unit(2, \"mm\"),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(), \n        panel.border = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=100%}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}