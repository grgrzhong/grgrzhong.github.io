{
  "hash": "caa6f69d824e5d6c920f7bd3d90cde9f",
  "result": {
    "markdown": "---\ntitle: \"Practise Seurat for single cell data analysis\"\ndate: 2023-11-27\ndate-modified: last-modified\ncategories:\n  - seurat\nimage: seurat_banner.jpg\ndescription: Practise scRNA data analysis with Genome Medicine using Seurat package.\n---\n\n\n\n\n##  Packages\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load packages\nlibrary(Seurat)\n## Loading required package: SeuratObject\n## Loading required package: sp\n## \n## Attaching package: 'SeuratObject'\n## The following object is masked from 'package:base':\n## \n##     intersect\nlibrary(harmony)\n## Loading required package: Rcpp\nlibrary(Matrix)\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.4\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n## ✔ purrr     1.0.2\n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ tidyr::expand() masks Matrix::expand()\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ✖ tidyr::pack()   masks Matrix::pack()\n## ✖ tidyr::unpack() masks Matrix::unpack()\n## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nlibrary(here)\n## here() starts at /Users/zhonggr/Library/CloudStorage/OneDrive-Personal/quarto\nlibrary(httpgd)\n```\n:::\n\n\n## Retrieve data\n\n- The source data is from [Single-cell transcriptome analysis of tumor and stromal compartments of pancreatic ductal adenocarcinoma primary tumors and metastatic lesions](https://genomemedicine.biomedcentral.com/articles/10.1186/s13073-020-00776-9)\n- Down load data GSE154778_RAW.tar from [here](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE154778) to data and unzip it.\n- Preprocess sequencing data\n\n![](practise.png)\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Change working directory\nsetwd(\"./learn/2023_scRNA_Seurat/data/GSE154778_RAW/\")\n# getwd()\n# Check files\nfs <- list.files(\"./\", \"^GSM\")\n# Get the sample names\nsamples <- str_split(fs, \"_\", simplify = TRUE)[, 2]\nunique(samples)\n# Create folders for each sample, and rename\nlapply(\n  unique(samples), function(x) {\n    y  <- fs[grepl(x, fs)]\n    folder <- paste(str_split(y[1], \"_\", simplify = TRUE)[, 2], collapse = \"\")\n    dir.create(folder, recursive = TRUE)\n    file.rename(y[1], file.path(folder, \"barcodes.tsv.gz\"))\n    # Note the seurat version to check features.tsv.gz or genes.tsv.gz\n    file.rename(y[2], file.path(folder, \"features.tsv.gz\")) \n    file.rename(y[3], file.path(folder, \"matrix.mtx.gz\"))\n  }\n)\n```\n:::\n\n## Load batch data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Change working directory\nsetwd(\"./learn/2023_scRNA_Seurat/data/GSE154778_RAW/\")\nfolders <- list.files(\"./\")\nfolders\nsceList <- lapply(\n  folders, function(folder) {\n    CreateSeuratObject(counts = Read10X(folder), project = folder)\n  }\n)\n```\n:::\n\n## Merage samples data\n\n\n### Directly merge\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Use Seurat merge\nsce.all <- merge(\n  x = sceList[[1]],\n  y = c(sceList[[2]], sceList[[3]], sceList[[4]], sceList[[5]], sceList[[6]], \n  sceList[[7]], sceList[[8]], sceList[[9]], sceList[[10]], sceList[[11]], \n  sceList[[12]], sceList[[13]], sceList[[14]], sceList[[5]], sceList[[16]]),\n  ## Sample names\n  add.cell.ids = folders,  \n  project = \"scRNA\"\n)\nsaveRDS(sce.all, here(\"learn\", \"2023_scRNA_Seurat\", \"sce.all.rds\"))\n```\n:::\n\n#### Filter\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsce.all <- readRDS(here(\"learn\", \"2023_scRNA_Seurat\", \"sce.all.rds\"))\nhead(sce.all@meta.data)\n##                         orig.ident nCount_RNA nFeature_RNA\n## K16733_AAACATACTCGTTT-1     K16733       2464          965\n## K16733_AAACCGTGGGTAGG-1     K16733        689          336\n## K16733_AAAGCAGAACGTTG-1     K16733       7145         1919\n## K16733_AAAGCAGACTGAGT-1     K16733       1655          621\n## K16733_AAAGGCCTGCTCCT-1     K16733      14272         2771\n## K16733_AAATACTGTGGATC-1     K16733      13832         2541\ntable(sce.all@meta.data$orig.ident)\n## \n## K16733    T10     T2     T3     T4     T5     T6     T8     T9 Y00006 Y00008 \n##    585   1570    837   1026   1826    769   1098   1139    898    786    533 \n## Y00013 Y00014 Y00016 Y00027 \n##    745    526    272   2484\n# Mitochandrial genes\nsce.all[[\"percent.mt\"]] <- PercentageFeatureSet(sce.all, pattern = \"^MT-\")\n# Ribonucleoprotein \nsce.all[[\"percent.rp\"]] <- PercentageFeatureSet(sce.all, pattern = \"^RP\")\n\n# Specific gene set\nHB.genes <- c(\"HBA1\",\"HBA2\",\"HBB\",\"HBD\",\"HBE1\",\"HBG1\",\"HBG2\",\"HBM\",\"HBQ1\",\"HBZ\") \n# Red blood cells genes\nsce.all[[\"percent.HB\"]]<-PercentageFeatureSet(sce.all, features = HB.genes)\n\nhead(sce.all@meta.data)\n##                         orig.ident nCount_RNA nFeature_RNA percent.mt\n## K16733_AAACATACTCGTTT-1     K16733       2464          965 12.6623377\n## K16733_AAACCGTGGGTAGG-1     K16733        689          336  2.1770682\n## K16733_AAAGCAGAACGTTG-1     K16733       7145         1919  2.4492652\n## K16733_AAAGCAGACTGAGT-1     K16733       1655          621  2.1752266\n## K16733_AAAGGCCTGCTCCT-1     K16733      14272         2771  1.5414798\n## K16733_AAATACTGTGGATC-1     K16733      13832         2541  0.3181029\n##                         percent.rp percent.HB\n## K16733_AAACATACTCGTTT-1   13.35227          0\n## K16733_AAACCGTGGGTAGG-1   29.02758          0\n## K16733_AAAGCAGAACGTTG-1   36.72498          0\n## K16733_AAAGCAGACTGAGT-1   35.52870          0\n## K16733_AAAGGCCTGCTCCT-1   38.81026          0\n## K16733_AAATACTGTGGATC-1   40.73164          0\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsce <- subset(\n    sce.all, subset = nFeature_RNA > 500 &\n        nFeature_RNA < 5000 & percent.mt < 30\n)\nVlnPlot(sce, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\"), ncol = 3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=100%}\n:::\n:::\n\n#### Seurat workflow\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsce <- NormalizeData(sce)\n## Normalizing layer: counts.1\n## Normalizing layer: counts.2\n## Normalizing layer: counts.3\n## Normalizing layer: counts.4\n## Normalizing layer: counts.5\n## Normalizing layer: counts.6\n## Normalizing layer: counts.7\n## Normalizing layer: counts.8\n## Normalizing layer: counts.9\n## Normalizing layer: counts.10\n## Normalizing layer: counts.11\n## Normalizing layer: counts.12\n## Normalizing layer: counts.13\n## Normalizing layer: counts.14\n## Normalizing layer: counts.15\n## Normalizing layer: counts.16\nsce <- FindVariableFeatures(sce, selection.method = \"vst\", nfeatures = 2000)\n## Finding variable features for layer counts.1\n## Finding variable features for layer counts.2\n## Finding variable features for layer counts.3\n## Finding variable features for layer counts.4\n## Finding variable features for layer counts.5\n## Finding variable features for layer counts.6\n## Finding variable features for layer counts.7\n## Finding variable features for layer counts.8\n## Finding variable features for layer counts.9\n## Finding variable features for layer counts.10\n## Finding variable features for layer counts.11\n## Finding variable features for layer counts.12\n## Finding variable features for layer counts.13\n## Finding variable features for layer counts.14\n## Finding variable features for layer counts.15\n## Finding variable features for layer counts.16\nall.genes <- rownames(sce)\nsce <- ScaleData(sce, features = all.genes)\n## Centering and scaling data matrix\nsce <- RunPCA(sce, npcs = 50)\n## PC_ 1 \n## Positive:  KRT19, KRT8, KRT18, SMIM22, MAL2, SPINT2, TSPAN8, CLDN4, GPRC5A, PERP \n## \t   C19orf33, ELF3, TM4SF1, TMC5, LSR, LGALS4, NQO1, TACSTD2, CLDN7, SPINK1 \n## \t   MUC1, C12orf75, GPX2, TSPAN1, ERBB3, SFTA2, MMP7, CYP3A5, CDH1, TMPRSS4 \n## Negative:  VIM, COL1A2, BGN, COL1A1, SERPINF1, FN1, C1R, MGP, CTHRC1, TAGLN \n## \t   PMP22, NUPR1, THY1, FBLN1, RARRES2, TIMP3, MXRA8, TCF4, CLEC11A, INHBA \n## \t   RAB31, CCDC80, ASPN, THBS2, APOD, ISLR, TUBA1A, FSTL1, ANTXR1, MEG3 \n## PC_ 2 \n## Positive:  LAPTM5, AIF1, SRGN, LST1, HLA-DPA1, HLA-DRA, HLA-DPB1, MS4A6A, HLA-DQA1, MS4A7 \n## \t   HLA-DQB1, C1orf162, OLR1, HLA-DRB1, CD53, CD74, CYBB, FCGR2A, CLEC7A, ALOX5AP \n## \t   CD37, ITGB2, CD14, CD83, MS4A4A, IFI30, RGS1, RNASE6, CD86, HLA-DQA2 \n## Negative:  BGN, C1R, TPM1, COL1A1, RARRES2, COL1A2, NBL1, MXRA8, CTHRC1, FSTL1 \n## \t   THY1, FBLN1, CCDC80, IGFBP4, TAGLN, NNMT, THBS2, MGP, ASPN, TIMP3 \n## \t   ISLR, MEG3, APOD, EFEMP2, MFGE8, DKK3, SPON2, FBN1, ANTXR1, EMILIN1 \n## PC_ 3 \n## Positive:  CTSE, VSIG2, AGR3, FOS, MUC5AC, CYSTM1, ATF3, JUN, FOSB, ELF3 \n## \t   RHOB, LINC01133, IER3, CAPN8, NEAT1, KLF6, TFF3, MUC1, DUSP1, EGR1 \n## \t   BACE2, PIGR, KLF4, KLF2, CREB3L1, REG4, EDN1, HSPA1B, PLAC8, ZG16B \n## Negative:  TUBA1B, TOP2A, MKI67, PTTG1, UBE2C, H2AFZ, CENPW, TPX2, HMGB2, CDK1 \n## \t   STMN1, RRM2, RBP1, ASPM, KLK6, PRC1, HMGB1, ATAD2, NUSAP1, GTSE1 \n## \t   CDKN3, KIF20B, CEP55, HMMR, DTYMK, CDCA3, CLSPN, CENPU, CCNB1, UBE2T \n## PC_ 4 \n## Positive:  MDK, TMEM176B, COL11A1, NBL1, TMEM176A, FAM3C, LYZ, INHBA, THBS2, C1QTNF3 \n## \t   GCNT3, GPNMB, FBLN1, KLK6, RARRES2, IGFL2, COL8A1, C12orf75, FNDC1, MMP7 \n## \t   GREM1, PERP, NTM, CLDN3, GJB2, COMP, ISLR, CXCL14, MEG3, RBP1 \n## Negative:  PLVAP, RAMP2, VWF, ECSCR, AQP1, CDH5, CALCRL, BCAM, RAMP3, NOTCH4 \n## \t   CLDN5, MMRN2, FAM167B, ADAMTS9, EMCN, CD34, CD93, STC1, CYYR1, GPR4 \n## \t   S1PR1, ANGPT2, PODXL, MYCT1, ARHGAP29, RGS5, CRIP2, ROBO4, GJA4, HIGD1B \n## PC_ 5 \n## Positive:  TOP2A, UBE2C, ATAD2, NUCKS1, PRC1, STMN1, SLPI, GTSE1, CENPW, HMGB1 \n## \t   TPX2, CTSD, RAD51AP1, PLAT, CDK1, RRM2, DTYMK, CLSPN, ANLN, MYBL2 \n## \t   FAM83A, CCNB1, NUSAP1, CENPU, ASPM, UBE2T, PRR11, MKI67, CEP55, CRIP2 \n## Negative:  CD3D, CD2, PTPRCAP, CD7, C12orf75, CCL5, CD3G, RBP1, GCNT3, CD27 \n## \t   KLRB1, LTB, ZFAS1, CA12, GZMM, RHOH, SPINK1, VNN1, ICOS, CLDN3 \n## \t   CYTIP, TIGIT, PTPN7, GZMB, CDHR2, RUNX3, SLC7A11, CCR7, CD8A, FAM3C\nsce <- FindNeighbors(sce, dims = 1:30)\n## Computing nearest neighbor graph\n## Computing SNN\nsce <- FindClusters(sce, resolution = 0.5)\n## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n## \n## Number of nodes: 11914\n## Number of edges: 436451\n## \n## Running Louvain algorithm...\n## Maximum modularity in 10 random starts: 0.9419\n## Number of communities: 18\n## Elapsed time: 1 seconds\nsce <- RunUMAP(sce, dims = 1:30)\n## 15:18:03 UMAP embedding parameters a = 0.9922 b = 1.112\n## 15:18:03 Read 11914 rows and found 30 numeric columns\n## 15:18:03 Using Annoy for neighbor search, n_neighbors = 30\n## 15:18:03 Building Annoy index with metric = cosine, n_trees = 50\n## 0%   10   20   30   40   50   60   70   80   90   100%\n## [----|----|----|----|----|----|----|----|----|----|\n## **************************************************|\n## 15:18:03 Writing NN index file to temp file /var/folders/2c/9q3pg2295195bp3gnrgbzrg40000gn/T//RtmpjzstFL/file2afb9bffbb\n## 15:18:03 Searching Annoy index using 1 thread, search_k = 3000\n## 15:18:05 Annoy recall = 100%\n## 15:18:05 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30\n## 15:18:06 Initializing from normalized Laplacian + noise (using RSpectra)\n## 15:18:06 Commencing optimization for 200 epochs, with 492128 positive edges\n## 15:18:10 Optimization finished\n# sce <- RunTSNE(sce, dims = 1:30)\n```\n:::\n\n#### UMAP\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Rename sample\nsce@meta.data$sample[sce@meta.data$orig.ident == \"K16733\"] <- \"P01\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"Y00006\"] <- \"P02\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"T2\"] <- \"P03\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"T3\"] <- \"P04\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"T4\"] <- \"P05\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"T5\"] <- \"P06\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"T6\"] <- \"P07\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"T8\"] <- \"P08\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"T9\"] <- \"P09\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"T10\"] <- \"P10\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"Y00008\"] <- \"MET01\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"Y00013\"] <- \"MET02\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"Y00014\"] <- \"MET03\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"Y00016\"] <- \"MET04\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"Y00019\"] <- \"MET05\"\nsce@meta.data$sample[sce@meta.data$orig.ident == \"Y00027\"] <- \"MET06\"\n\n# Add group information\nsce@meta.data$group <- ifelse( grepl(\"MET\",sce@meta.data$sample ) ,\"MET\" ,\"PT\" )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Global\np1 <- DimPlot(\n  sce, reduction = \"umap\", pt.size=0.5, label = F,repel = TRUE\n)\n# Sample\np2 <- DimPlot(\n  sce, reduction = \"umap\",group.by = \"sample\", pt.size=0.5, label = F,\n  repel = TRUE\n)\n# group\np3 <- DimPlot(\n  sce, reduction = \"umap\",group.by = \"group\", pt.size=0.5, label = F,\n  repel = TRUE\n)\n\np1 + p2 +p3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=100%}\n:::\n:::\n\n### Harmony to remove batch effect\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsce2 <- sce  |>  RunHarmony(\"sample\", plot_convergence = TRUE)\n## Transposing data matrix\n## Initializing state using k-means centroids initialization\n## Harmony 1/10\n## Harmony 2/10\n## Harmony 3/10\n## Harmony 4/10\n## Harmony 5/10\n## Harmony 6/10\n## Harmony 7/10\n## Harmony 8/10\n## Harmony 9/10\n## Harmony 10/10\n## Harmony converged after 10 iterations\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\nsce2\n## An object of class Seurat \n## 51911 features across 11914 samples within 1 assay \n## Active assay: RNA (51911 features, 2000 variable features)\n##  33 layers present: counts.1, counts.2, counts.3, counts.4, counts.5, counts.6, counts.7, counts.8, counts.9, counts.10, counts.11, counts.12, counts.13, counts.14, counts.15, counts.16, data.1, data.2, data.3, data.4, data.5, data.6, data.7, data.8, data.9, data.10, data.11, data.12, data.13, data.14, data.15, data.16, scale.data\n##  3 dimensional reductions calculated: pca, umap, harmony\n# Same workflow\nsce2 <- sce2  |>  \n  RunUMAP(reduction = \"harmony\", dims = 1:30)  |>  \n  FindNeighbors(reduction = \"harmony\", dims = 1:30)  |>  \n  FindClusters(resolution = 0.5)  |>  \n  identity()\n## 15:19:42 UMAP embedding parameters a = 0.9922 b = 1.112\n## 15:19:42 Read 11914 rows and found 30 numeric columns\n## 15:19:42 Using Annoy for neighbor search, n_neighbors = 30\n## 15:19:42 Building Annoy index with metric = cosine, n_trees = 50\n## 0%   10   20   30   40   50   60   70   80   90   100%\n## [----|----|----|----|----|----|----|----|----|----|\n## **************************************************|\n## 15:19:42 Writing NN index file to temp file /var/folders/2c/9q3pg2295195bp3gnrgbzrg40000gn/T//RtmpjzstFL/file2afb17134535\n## 15:19:42 Searching Annoy index using 1 thread, search_k = 3000\n## 15:19:44 Annoy recall = 100%\n## 15:19:45 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30\n## 15:19:45 Initializing from normalized Laplacian + noise (using RSpectra)\n## 15:19:46 Commencing optimization for 200 epochs, with 516614 positive edges\n## 15:19:50 Optimization finished\n## Computing nearest neighbor graph\n## Computing SNN\n## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n## \n## Number of nodes: 11914\n## Number of edges: 465972\n## \n## Running Louvain algorithm...\n## Maximum modularity in 10 random starts: 0.9043\n## Number of communities: 14\n## Elapsed time: 1 seconds\n\np11 <- DimPlot(sce2, reduction = \"umap\", pt.size=0.5, label = F,repel = TRUE)\np22 <- DimPlot(sce2, reduction = \"umap\",group.by = \"sample\", pt.size=0.5, label = F,repel = TRUE)\np33 <- DimPlot(sce2, reduction = \"umap\",group.by = \"group\", pt.size=0.5, label = F,repel = TRUE)\np11 + p22 +p33\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-2.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Visualize marker genes\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nMarker  <-  list(\n  Epi = c(\"EPCAM\"),\n  Endo = c(\"PECAM1\",\"PLVAP\"),\n  Fibroblast = c(\"COL3A1\",\"COL1A1\",\"COL1A2\"),\n  IM = c(\"PTPRC\"),\n  B = c(\"CD79A\",\"CD79B\",\"CD19\"),\n  T = c(\"CD3D\",\"CD3E\",\"CD8A\",\"CD4\"),\n  Myeloid = c(\"C1QA\",\"C1QB\",\"CD163\",\"CD1C\")\n)\n\nMarker2 = c(\n    \"EPCAM\",\n    \"PECAM1\",\"PLVAP\",\n    \"COL3A1\",\"COL1A1\",\"COL1A2\",\n    'PTPRC',\n    \"CD79A\",\"CD79B\",\"CD19\",\n    \"CD3D\",\"CD3E\",\"CD8A\",\"CD4\",\n    \"C1QA\",\"C1QB\",\"CD163\",\"CD1C\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nDotPlot(sce2, features = Marker2, group.by = \"RNA_snn_res.0.5\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nVlnPlot(sce2, features = Marker2, pt.size = 0, ncol = 5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nFeaturePlot(\n    sce2,\n    features = c(\n        \"EPCAM\", \"PECAM1\", \"COL3A1\", 'PTPRC',\n        \"CD79A\", \"CD79B\", \"CD3D\", \"CD3E\", \"C1QA\", \"C1QB\"\n    )\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=100%}\n:::\n:::\n\n## Annotate clusters\n\n### Using Vector\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnew.cluster.ids <- c(\n  'Epi','Epi','Myeloid','Fibroblast','Epi','Epi','Fibroblast','Epi','T','Epi','Fibroblast','Epi','Endo','un','Epi','Epi','Fibroblast','un','Fibroblast'\n)\nnames(new.cluster.ids) <- levels(sce2)\n\nsce2 <- RenameIdents(sce2, new.cluster.ids)\n\n# Add to metadata, for \nsce2@meta.data$new.cluster.ids <- Idents(sce2)\n\nDimPlot(sce2, reduction = \"umap\", label = TRUE, pt.size = 0.5) +      NoLegend()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=100%}\n:::\n:::\n\n### Directly assign\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nIdents(sce2) <- \"seurat_clusters\"\nsce2 <- RenameIdents(sce2,\n    \"0\" = \"Epi\",\n    \"1\" = \"Epi\",\n    \"2\" = \"Myeloid\",\n    \"3\" = \"Fibroblast\",\n    \"4\" = \"Epi\",\n    \"5\" = \"Epi\",\n    \"6\" = \"Fibroblast\",\n    \"7\" = \"Epi\",\n    \"8\" = \"T\",\n    \"9\" = \"Epi\",\n    \"10\" = \"Fibroblast\",\n    \"11\" = \"Epi\",\n    \"12\" = \"Endo\",\n    \"13\" = \"un\",\n    \"14\" = \"Epi\",\n    \"15\" = \"Epi\",\n    \"16\" = \"Fibroblast\",\n    \"17\" = \"un\",\n    \"18\" = \"Fibroblast\"\n)\nsce2@meta.data$celltype <- Idents(sce2)\nDimPlot(sce2, reduction = \"umap\",label = TRUE, pt.size = 0.5) + \n  NoLegend()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=100%}\n:::\n:::\n\n### Add annotation to meta data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsce2$Anno <- \"NA\"\ncelltype <- c(\n    'Epi', 'Epi', 'Myeloid', 'Fibroblast', 'Epi', 'Epi', 'Fibroblast', 'Epi', 'T', 'Epi', 'Fibroblast', 'Epi', 'Endo', 'un', 'Epi', 'Epi', 'Fibroblast', 'un', 'Fibroblast'\n)\n\n# Note:cluster start from 0\n# For loop to add\nsub_length <- length(unique(sce2$seurat_clusters)) - 1\nfor (i in 0:sub_length) {\n    sce2$Anno[sce2$seurat_clusters == i] = celltype[i + 1]\n}\n\n# UMAP\nDimPlot(\n    sce2, reduction = \"umap\", group.by = 'Anno', label = TRUE, pt.size = 0.5) +\n    NoLegend()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\n\nDimPlot(\n  sce2, reduction = \"umap\",label = TRUE, pt.size = 0.5\n) + \n  NoLegend()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-2.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\nhead(sce2@meta.data)\n##                         orig.ident nCount_RNA nFeature_RNA percent.mt\n## K16733_AAACATACTCGTTT-1     K16733       2464          965 12.6623377\n## K16733_AAAGCAGAACGTTG-1     K16733       7145         1919  2.4492652\n## K16733_AAAGCAGACTGAGT-1     K16733       1655          621  2.1752266\n## K16733_AAAGGCCTGCTCCT-1     K16733      14272         2771  1.5414798\n## K16733_AAATACTGTGGATC-1     K16733      13832         2541  0.3181029\n## K16733_AAATTCGAGACGAG-1     K16733       4207         1183  0.1188495\n##                         percent.rp percent.HB RNA_snn_res.0.5 seurat_clusters\n## K16733_AAACATACTCGTTT-1   13.35227          0              11              11\n## K16733_AAAGCAGAACGTTG-1   36.72498          0               5               5\n## K16733_AAAGCAGACTGAGT-1   35.52870          0               2               2\n## K16733_AAAGGCCTGCTCCT-1   38.81026          0               2               2\n## K16733_AAATACTGTGGATC-1   40.73164          0               2               2\n## K16733_AAATTCGAGACGAG-1   42.33420          0               6               6\n##                         sample group new.cluster.ids   celltype       Anno\n## K16733_AAACATACTCGTTT-1    P01    PT             Epi        Epi        Epi\n## K16733_AAAGCAGAACGTTG-1    P01    PT             Epi        Epi        Epi\n## K16733_AAAGCAGACTGAGT-1    P01    PT         Myeloid    Myeloid    Myeloid\n## K16733_AAAGGCCTGCTCCT-1    P01    PT         Myeloid    Myeloid    Myeloid\n## K16733_AAATACTGTGGATC-1    P01    PT         Myeloid    Myeloid    Myeloid\n## K16733_AAATTCGAGACGAG-1    P01    PT      Fibroblast Fibroblast Fibroblast\n\n# save(sce2, here(\"learn\", \"2023_scRNA\", \"sce.anno.RData\"))\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}