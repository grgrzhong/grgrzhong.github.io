{
  "hash": "6404f5e620bb3fb88222f59244f3e5d2",
  "result": {
    "markdown": "---\ntitle: \"Learning {Seurat} for Single cell data analysis\"\ndate: 2023-09-01\ndate-modified: last-modified\ndraft: true\ncategories:\n  - R\n  - scRNA-seq\nimage: 10xGenomic.png\ndescription: \"Single cell RNA sequencing measures the RNA molecules within each cell of a give sample\"\n---\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npacman::p_load(\n    Seurat,\n    scCustomize,\n    tidyverse,\n    patchwork,\n    here\n)\n```\n:::\n\n\n## Single cell RNA sequencing\nSingle cell RNA sequencing measures the RNA molecules within each cell of a give sample. This information provides a snapshot of the transcriptone when the cells are harvested. it can:\n- reveal complex and rare cell populations\n- uncover regulatory relations between genes\n- track the trajectories of distict cell lineages in development\n\nCommonly platform\n\n- 10x genomics\n- BD Rhapsody\n\n## Read single cell data\n\nThis data is from [PBMC 3K guided tutorial](https://satijalab.org/seurat/articles/pbmc3k_tutorial).\n\n- barcodes.tsv - cell information\n- genes.tsv - gene information\n- matrix.mtx - expression information\n\nOption1: read data one by one (samll size data)\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npacman::p_load(data.table, Matrix)\n### Read the data\ngene <- fread(\"./pbmc3k/genes.tsv\", data.table = FALSE, header = FALSE)\nhead(gene)\n##                V1           V2\n## 1 ENSG00000243485   MIR1302-10\n## 2 ENSG00000237613      FAM138A\n## 3 ENSG00000186092        OR4F5\n## 4 ENSG00000238009 RP11-34P13.7\n## 5 ENSG00000239945 RP11-34P13.8\n## 6 ENSG00000237683   AL627309.1\nbarcode <- fread(\"./pbmc3k/barcodes.tsv\", data.table = FALSE, header = FALSE)\nhead(barcode)\n##                 V1\n## 1 AAACATACAACCAC-1\n## 2 AAACATTGAGCTAC-1\n## 3 AAACATTGATCAGC-1\n## 4 AAACCGTGCTTCCG-1\n## 5 AAACCGTGTATGCG-1\n## 6 AAACGCACTGGTAC-1\nmat <- as.data.frame(readMM(\"./pbmc3k/matrix.mtx\"))\n\n### Combine the three data\ncolnames(mat) <- barcode$V1 # cell barcode\nmat$gene_id <- gene$V2 # gene name\nmat <- mat[!duplicated(mat$gene_id), ] # remove duplicate genes\nmat <- mat |> \n    select(gene_id, head(colnames(mat),-1)) # relocate gene id to first column\nhead(as_tibble(mat))\n## # A tibble: 6 × 2,701\n##   gene_id      `AAACATACAACCAC-1` `AAACATTGAGCTAC-1` `AAACATTGATCAGC-1`\n##   <chr>                     <dbl>              <dbl>              <dbl>\n## 1 MIR1302-10                    0                  0                  0\n## 2 FAM138A                       0                  0                  0\n## 3 OR4F5                         0                  0                  0\n## 4 RP11-34P13.7                  0                  0                  0\n## 5 RP11-34P13.8                  0                  0                  0\n## 6 AL627309.1                    0                  0                  0\n## # ℹ 2,697 more variables: `AAACCGTGCTTCCG-1` <dbl>, `AAACCGTGTATGCG-1` <dbl>,\n## #   `AAACGCACTGGTAC-1` <dbl>, `AAACGCTGACCAGT-1` <dbl>,\n## #   `AAACGCTGGTTCTT-1` <dbl>, `AAACGCTGTAGCCA-1` <dbl>,\n## #   `AAACGCTGTTTCTG-1` <dbl>, `AAACTTGAAAAACG-1` <dbl>,\n## #   `AAACTTGATCCAGA-1` <dbl>, `AAAGAGACGAGATA-1` <dbl>,\n## #   `AAAGAGACGCGAGA-1` <dbl>, `AAAGAGACGGACTT-1` <dbl>,\n## #   `AAAGAGACGGCATT-1` <dbl>, `AAAGATCTGGGCAA-1` <dbl>, …\n```\n:::\n\n\nOption2: Setup the `Seurat` object\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npacman::p_load(Seurat)\n### Load PBMC dataset\npbmc_data <- Read10X(data.dir = \"./pbmc3k/\")\n### Init the seurat object with the raw (non-normalized data)\npbmc <- CreateSeuratObject(\n    counts = pbmc_data,\n    project = \"pbmc3k\",\n    min.cells = 3, \n    min.features = 200\n)\n## Warning: Feature names cannot have underscores ('_'), replacing with dashes\n## ('-')\npbmc\n## An object of class Seurat \n## 13714 features across 2700 samples within 1 assay \n## Active assay: RNA (13714 features, 0 variable features)\n```\n:::\n\n\nWhat does data in a count matix look like?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc_data[c(\"CD3D\", \"TCL1A\", \"MS4A1\"), 1:30]\n## 3 x 30 sparse Matrix of class \"dgCMatrix\"\n##   [[ suppressing 30 column names 'AAACATACAACCAC-1', 'AAACATTGAGCTAC-1', 'AAACATTGATCAGC-1' ... ]]\n##                                                                    \n## CD3D  4 . 10 . . 1 2 3 1 . . 2 7 1 . . 1 3 . 2  3 . . . . . 3 4 1 5\n## TCL1A . .  . . . . . . 1 . . . . . . . . . . .  . 1 . . . . . . . .\n## MS4A1 . 6  . . . . . . 1 1 1 . . . . . . . . . 36 1 2 . . 2 . . . .\n```\n:::\n\nThe `.` values in the matrix represent 0s (no molecules detected). Since most values in an scRNA-seq matrix are 0, Seurat uses a sparse-matrix representation whenever possible. This results in significant memory and speed savings for Drop-seq/inDrop/10x data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n### SeuratData\n# devtools::install_github('satijalab/seurat-data')\nlibrary(SeuratData)\n# AvailableData()\n\n# InstallData(\"pbmc3k\")\ndata(\"pbmc3k\")\npbmc3k\n## An object of class Seurat \n## 13714 features across 2700 samples within 1 assay \n## Active assay: RNA (13714 features, 0 variable features)\n```\n:::\n\n\n## Pre-processing data\n\nThe standard pre-processing workflow for scRNA-seq data including:\n\n- Selection and filteration of cells based on QC matrics\n- Data normalization and scaling \n- Detection of highly variable features\n\n### QC and selecting cells for further analysis\n\n- The number of unique genes detected in each cell\n  * Low quality cells or empty droplets will often have few gens\n  * Cell doublets or multiplets exhibit an aberrantly high gene count\n- Similarly, the total number of molecules detected within a cell\n- The percentage of reads that map to the mitochondrial genome\n  * Low quality /dying cells often exhibit entensive mitochondrial contamination\n  * Calculate mitochondrial QC matrics with `PercentageFeatureSet()` function, which calculate the percentage of counts originating from a set of features\n  * Mitochondrial genes are start with `MT-`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc3k[[\"percent.mt\"]] <- PercentageFeatureSet(pbmc3k, pattern = \"^MT-\")\n### Show QC metrics for the first 5 cells\nhead(pbmc3k@meta.data, 5)\n##                orig.ident nCount_RNA nFeature_RNA seurat_annotations percent.mt\n## AAACATACAACCAC     pbmc3k       2419          779       Memory CD4 T  3.0177759\n## AAACATTGAGCTAC     pbmc3k       4903         1352                  B  3.7935958\n## AAACATTGATCAGC     pbmc3k       3147         1129       Memory CD4 T  0.8897363\n## AAACCGTGCTTCCG     pbmc3k       2639          960         CD14+ Mono  1.7430845\n## AAACCGTGTATGCG     pbmc3k        980          521                 NK  1.2244898\n```\n:::\n\nVisualize QC metrics and filter cells\n- Filter cells that have unique feture over 2500 or less than 200\n- Filter cells have 5% mitochondrial counts\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n### Visualize QC metrics as a violin plot\nVlnPlot(\n  pbmc3k,\n  features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\"),\n  ncol = 3\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n\n### Visualize feature-feature relationships\np1 <- FeatureScatter(\n  pbmc3k, \n  feature1 = \"nCount_RNA\", \n  feature2 = \"percent.mt\"\n  )\n\np2 <- FeatureScatter(\n  pbmc3k, \n  feature1 = \"nCount_RNA\", \n  feature2 = \"nFeature_RNA\")\n\np1 + p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-2.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n\npbmc <- subset(\n  pbmc3k, \n  subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5\n)\n```\n:::\n\n### Normalizaing the data\n\nAfter removing unwanted cells from the dataset, the next stop is to normalize the data. The {Seurat} employ a global-scaling normalization method that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor and log-transforms the result. Normalized values are stored in `pbmc[[\"RNA\"]]@data`.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc <- NormalizeData(\n  pbmc, \n  normalization.method = \"LogNormalize\",\n  scale.factor = 10000\n)\n```\n:::\n\n### Identification of highly variable features\n\nThe next is to calculate a subset of features that exhibit high cell-to-cell variation in the dataset.\n- i.e, they are highly expressed in some cells, and lowly expressed in other cells.\n- Focus on these genes in downstream analysis helps to highlight biological signal in single-cell datasets\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc <- FindVariableFeatures(pbmc, selection.method = \"vst\", nfeatures = 2000)\n### Identify the 10 most highly variable genes\ntop10 <- head(VariableFeatures(pbmc), 10)\n### Plot variable features with or without labels\np1 <- VariableFeaturePlot(pbmc)\np2 <- LabelPoints(plot = p1, points = top10, repel = TRUE)\n## When using repel, set xnudge and ynudge to 0 for optimal results\n\np1 + p2\n## Warning: Transformation introduced infinite values in continuous x-axis\n## Transformation introduced infinite values in continuous x-axis\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=672}\n:::\n:::\n\n### Scaling the data\n\nNext, apply a linear transformation (\"scaling\") that is a standard pre-processing step prior to dimensional reduction technique like PCA.\n- Shift the expresion of each gene, so that the mean expression across cells is 0\n- Scale the expression of each gene, so that the variance across cells is 1.\n  * This step gives equal weight in downstream analysis, so that highly-expressed genes do not dominate\n- The results of this are stored in `pbmc[[\"RNA\"]]@scale.data`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall.genes <- rownames(pbmc)\npbmc <- ScaleData(pbmc, features = all.genes)\n## Centering and scaling data matrix\n```\n:::\n\n\n## Perform linear dimensional reduction\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))\n## PC_ 1 \n## Positive:  CST3, TYROBP, LST1, AIF1, FTL, FTH1, LYZ, FCN1, S100A9, TYMP \n## \t   FCER1G, CFD, LGALS1, S100A8, CTSS, LGALS2, SERPINA1, IFITM3, SPI1, CFP \n## \t   PSAP, IFI30, SAT1, COTL1, S100A11, NPC2, GRN, LGALS3, GSTP1, PYCARD \n## Negative:  MALAT1, LTB, IL32, IL7R, CD2, B2M, ACAP1, CD27, STK17A, CTSW \n## \t   CD247, GIMAP5, AQP3, CCL5, SELL, TRAF3IP3, GZMA, MAL, CST7, ITM2A \n## \t   MYC, GIMAP7, HOPX, BEX2, LDLRAP1, GZMK, ETS1, ZAP70, TNFAIP8, RIC3 \n## PC_ 2 \n## Positive:  CD79A, MS4A1, TCL1A, HLA-DQA1, HLA-DQB1, HLA-DRA, LINC00926, CD79B, HLA-DRB1, CD74 \n## \t   HLA-DMA, HLA-DPB1, HLA-DQA2, CD37, HLA-DRB5, HLA-DMB, HLA-DPA1, FCRLA, HVCN1, LTB \n## \t   BLNK, P2RX5, IGLL5, IRF8, SWAP70, ARHGAP24, FCGR2B, SMIM14, PPP1R14A, C16orf74 \n## Negative:  NKG7, PRF1, CST7, GZMB, GZMA, FGFBP2, CTSW, GNLY, B2M, SPON2 \n## \t   CCL4, GZMH, FCGR3A, CCL5, CD247, XCL2, CLIC3, AKR1C3, SRGN, HOPX \n## \t   TTC38, APMAP, CTSC, S100A4, IGFBP7, ANXA1, ID2, IL32, XCL1, RHOC \n## PC_ 3 \n## Positive:  HLA-DQA1, CD79A, CD79B, HLA-DQB1, HLA-DPB1, HLA-DPA1, CD74, MS4A1, HLA-DRB1, HLA-DRA \n## \t   HLA-DRB5, HLA-DQA2, TCL1A, LINC00926, HLA-DMB, HLA-DMA, CD37, HVCN1, FCRLA, IRF8 \n## \t   PLAC8, BLNK, MALAT1, SMIM14, PLD4, P2RX5, IGLL5, LAT2, SWAP70, FCGR2B \n## Negative:  PPBP, PF4, SDPR, SPARC, GNG11, NRGN, GP9, RGS18, TUBB1, CLU \n## \t   HIST1H2AC, AP001189.4, ITGA2B, CD9, TMEM40, PTCRA, CA2, ACRBP, MMD, TREML1 \n## \t   NGFRAP1, F13A1, SEPT5, RUFY1, TSC22D1, MPP1, CMTM5, RP11-367G6.3, MYL9, GP1BA \n## PC_ 4 \n## Positive:  HLA-DQA1, CD79B, CD79A, MS4A1, HLA-DQB1, CD74, HIST1H2AC, HLA-DPB1, PF4, SDPR \n## \t   TCL1A, HLA-DRB1, HLA-DPA1, HLA-DQA2, PPBP, HLA-DRA, LINC00926, GNG11, SPARC, HLA-DRB5 \n## \t   GP9, AP001189.4, CA2, PTCRA, CD9, NRGN, RGS18, CLU, TUBB1, GZMB \n## Negative:  VIM, IL7R, S100A6, IL32, S100A8, S100A4, GIMAP7, S100A10, S100A9, MAL \n## \t   AQP3, CD2, CD14, FYB, LGALS2, GIMAP4, ANXA1, CD27, FCN1, RBP7 \n## \t   LYZ, S100A11, GIMAP5, MS4A6A, S100A12, FOLR3, TRABD2A, AIF1, IL8, IFI6 \n## PC_ 5 \n## Positive:  GZMB, NKG7, S100A8, FGFBP2, GNLY, CCL4, CST7, PRF1, GZMA, SPON2 \n## \t   GZMH, S100A9, LGALS2, CCL3, CTSW, XCL2, CD14, CLIC3, S100A12, RBP7 \n## \t   CCL5, MS4A6A, GSTP1, FOLR3, IGFBP7, TYROBP, TTC38, AKR1C3, XCL1, HOPX \n## Negative:  LTB, IL7R, CKB, VIM, MS4A7, AQP3, CYTIP, RP11-290F20.3, SIGLEC10, HMOX1 \n## \t   LILRB2, PTGES3, MAL, CD27, HN1, CD2, GDI2, CORO1B, ANXA5, TUBA1B \n## \t   FAM110A, ATP1A1, TRADD, PPA1, CCDC109B, ABRACL, CTD-2006K23.1, WARS, VMO1, FYB\n\n### Examine and visualize PCA results in a few different ways\nprint(pbmc[[\"pca\"]], dim = 1:5, nfeatures = 5)\n## PC_ 1 \n## Positive:  CST3, TYROBP, LST1, AIF1, FTL \n## Negative:  MALAT1, LTB, IL32, IL7R, CD2 \n## PC_ 2 \n## Positive:  CD79A, MS4A1, TCL1A, HLA-DQA1, HLA-DQB1 \n## Negative:  NKG7, PRF1, CST7, GZMB, GZMA \n## PC_ 3 \n## Positive:  HLA-DQA1, CD79A, CD79B, HLA-DQB1, HLA-DPB1 \n## Negative:  PPBP, PF4, SDPR, SPARC, GNG11 \n## PC_ 4 \n## Positive:  HLA-DQA1, CD79B, CD79A, MS4A1, HLA-DQB1 \n## Negative:  VIM, IL7R, S100A6, IL32, S100A8 \n## PC_ 5 \n## Positive:  GZMB, NKG7, S100A8, FGFBP2, GNLY \n## Negative:  LTB, IL7R, CKB, VIM, MS4A7\nVizDimLoadings(pbmc, dims = 1:2, reduction = \"pca\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n\nDimPlot(pbmc, reduction = \"pca\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-2.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n\nDimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-3.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n\nDimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-4.png){fig-align='center' width=672}\n:::\n:::\n\n## Determine the dimensionality of the dataset\n\nTo overcome the extensive technical noise in any single feature for scRNA-seq data, `Seurat` clusters cells based on their PCA scores, with each PC essentially representing a ‘metafeature’ that combines information across a correlated feature set. The top principal components therefore represent a robust compression of the dataset. However, how many components should we choose to include? 10? 20? 100?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc <- JackStraw(pbmc, num.replicate = 100)\npbmc <- ScoreJackStraw(pbmc, dims = 1:20)\nJackStrawPlot(pbmc, dims = 1:15)\n## Warning: Removed 23493 rows containing missing values (`geom_point()`).\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nElbowPlot(pbmc)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-2.png){fig-align='center' width=672}\n:::\n:::\n\n## Cluster the cells\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc <- FindNeighbors(pbmc, dims = 1:10)\n## Computing nearest neighbor graph\n## Computing SNN\npbmc <- FindClusters(pbmc, resolution = 0.5)\n## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n## \n## Number of nodes: 2638\n## Number of edges: 95927\n## \n## Running Louvain algorithm...\n## Maximum modularity in 10 random starts: 0.8728\n## Number of communities: 9\n## Elapsed time: 0 seconds\n### Look at cluster IDs of the first 5 cells\nhead(Idents(pbmc), 5)\n## AAACATACAACCAC AAACATTGAGCTAC AAACATTGATCAGC AAACCGTGCTTCCG AAACCGTGTATGCG \n##              2              3              2              1              6 \n## Levels: 0 1 2 3 4 5 6 7 8\n```\n:::\n\n\n## Non-linear dimensional reduction (UMAP/tSNE)\n\nIn order to place similar cells together in low-dimensional space, `Seurat` offers several non-linear dimensional reduction techniques, such as tSNE and UMAP, to visualize and explore these datasets.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npbmc <- RunUMAP(pbmc, dims = 1:10)\n## Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric\n## To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'\n## This message will be shown once per session\n## 22:04:45 UMAP embedding parameters a = 0.9922 b = 1.112\n## 22:04:45 Read 2638 rows and found 10 numeric columns\n## 22:04:45 Using Annoy for neighbor search, n_neighbors = 30\n## 22:04:45 Building Annoy index with metric = cosine, n_trees = 50\n## 0%   10   20   30   40   50   60   70   80   90   100%\n## [----|----|----|----|----|----|----|----|----|----|\n## **************************************************|\n## 22:04:45 Writing NN index file to temp file /var/folders/2c/9q3pg2295195bp3gnrgbzrg40000gn/T//RtmpSiE3LT/file7562b390da9\n## 22:04:45 Searching Annoy index using 1 thread, search_k = 3000\n## 22:04:45 Annoy recall = 100%\n## 22:04:46 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30\n## 22:04:46 Initializing from normalized Laplacian + noise (using irlba)\n## 22:04:46 Commencing optimization for 500 epochs, with 105140 positive edges\n## 22:04:48 Optimization finished\nDimPlot(pbmc, reduction = \"umap\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=672}\n:::\n:::\n\n## Finding differntially expressed features (cluster biomakers)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n### Find all markers of cluster 2\ncluster2_markers <- FindMarkers(pbmc, ident.1 = 2, min.pct = 0.25)\nhead(cluster2_markers, n = 5)\n##             p_val avg_log2FC pct.1 pct.2    p_val_adj\n## IL32 2.892340e-90  1.2013522 0.947 0.465 3.966555e-86\n## LTB  1.060121e-86  1.2695776 0.981 0.643 1.453850e-82\n## CD3D 8.794641e-71  0.9389621 0.922 0.432 1.206097e-66\n## IL7R 3.516098e-68  1.1873213 0.750 0.326 4.821977e-64\n## LDHB 1.642480e-67  0.8969774 0.954 0.614 2.252497e-63\n\n### Find all markers distinguishing cluster 5 from clusters 0 and 3\ncluster5_markers <- FindMarkers(\n  pbmc, ident.1 = 5, \n  ident.2 = c(0, 3), \n  min.pct = 0.25)\nhead(cluster5_markers, n = 5)\n##                       p_val avg_log2FC pct.1 pct.2     p_val_adj\n## FCGR3A        8.246578e-205   4.261495 0.975 0.040 1.130936e-200\n## IFITM3        1.677613e-195   3.879339 0.975 0.049 2.300678e-191\n## CFD           2.401156e-193   3.405492 0.938 0.038 3.292945e-189\n## CD68          2.900384e-191   3.020484 0.926 0.035 3.977587e-187\n## RP11-290F20.3 2.513244e-186   2.720057 0.840 0.017 3.446663e-182\n\n### Find markers for every cluster compared to all remaining cells, \n### report only the positive ones\npbmc_markers <- FindAllMarkers(\n  pbmc, only.pos = TRUE, \n  min.pct = 0.25, \n  logfc.threshold = 0.25)\n## Calculating cluster 0\n## Calculating cluster 1\n## Calculating cluster 2\n## Calculating cluster 3\n## Calculating cluster 4\n## Calculating cluster 5\n## Calculating cluster 6\n## Calculating cluster 7\n## Calculating cluster 8\npbmc_markers %>%\n    group_by(cluster) %>%\n    slice_max(n = 2, order_by = avg_log2FC)\n## # A tibble: 18 × 7\n## # Groups:   cluster [9]\n##        p_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene    \n##        <dbl>      <dbl> <dbl> <dbl>     <dbl> <fct>   <chr>   \n##  1 9.57e- 88       1.36 0.447 0.108 1.31e- 83 0       CCR7    \n##  2 3.75e-112       1.09 0.912 0.592 5.14e-108 0       LDHB    \n##  3 0               5.57 0.996 0.215 0         1       S100A9  \n##  4 0               5.48 0.975 0.121 0         1       S100A8  \n##  5 1.06e- 86       1.27 0.981 0.643 1.45e- 82 2       LTB     \n##  6 2.97e- 58       1.23 0.42  0.111 4.07e- 54 2       AQP3    \n##  7 0               4.31 0.936 0.041 0         3       CD79A   \n##  8 9.48e-271       3.59 0.622 0.022 1.30e-266 3       TCL1A   \n##  9 5.61e-202       3.10 0.983 0.234 7.70e-198 4       CCL5    \n## 10 7.25e-165       3.00 0.577 0.055 9.95e-161 4       GZMK    \n## 11 3.51e-184       3.31 0.975 0.134 4.82e-180 5       FCGR3A  \n## 12 2.03e-125       3.09 1     0.315 2.78e-121 5       LST1    \n## 13 3.13e-191       5.32 0.961 0.131 4.30e-187 6       GNLY    \n## 14 7.95e-269       4.83 0.961 0.068 1.09e-264 6       GZMB    \n## 15 1.48e-220       3.87 0.812 0.011 2.03e-216 7       FCER1A  \n## 16 1.67e- 21       2.87 1     0.513 2.28e- 17 7       HLA-DPB1\n## 17 1.92e-102       8.59 1     0.024 2.63e- 98 8       PPBP    \n## 18 9.25e-186       7.29 1     0.011 1.27e-181 8       PF4\n\ncluster0_markers <- FindMarkers(\n  pbmc, ident.1 = 0, \n  logfc.threshold = 0.25, \n  test.use = \"roc\", \n  only.pos = TRUE)\n\nVlnPlot(pbmc, features = c(\"MS4A1\", \"CD79A\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n\n### Plot raw counts as well\nVlnPlot(pbmc, features = c(\"NKG7\", \"PF4\"), slot = \"counts\", log = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-2.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n\nFeaturePlot(\n  pbmc, \n  features = c(\n    \"MS4A1\", \"GNLY\", \"CD3E\", \"CD14\", \"FCER1A\", \"FCGR3A\", \"LYZ\", \"PPBP\",\"CD8A\"\n    )\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-3.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Assigning cell type identity to clusters\n\n![cell type](celltype.png)\n## Reference\n\n- [SEURAT: R toolkit for single cell genomics](https://satijalab.org/seurat/)\n- [Seurat for Single Cell RNA-Seq Data](https://rpubs.com/Ronlee/SeuratPractice)\n- [Batch Effect in Single-Cell RNA-Seq: Frequently Asked Questions and Answers](https://blog.bioturing.com/2022/03/24/batch-effect-in-single-cell-rna-seq-frequently-asked-questions-and-answers/)\n## Session Info\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsessionInfo()\n## R version 4.3.1 (2023-06-16)\n## Platform: aarch64-apple-darwin20 (64-bit)\n## Running under: macOS Ventura 13.5.1\n## \n## Matrix products: default\n## BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \n## LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n## \n## locale:\n## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n## \n## time zone: Asia/Singapore\n## tzcode source: internal\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] pbmc3k.SeuratData_3.1.4 SeuratData_0.2.2        Matrix_1.6-0           \n##  [4] data.table_1.14.8       here_1.0.1              patchwork_1.1.3        \n##  [7] lubridate_1.9.2         forcats_1.0.0           stringr_1.5.0          \n## [10] dplyr_1.1.2             purrr_1.0.1             readr_2.1.4            \n## [13] tidyr_1.3.0             tibble_3.2.1            ggplot2_3.4.2          \n## [16] tidyverse_2.0.0         scCustomize_1.1.3       SeuratObject_4.1.3     \n## [19] Seurat_4.3.0.1         \n## \n## loaded via a namespace (and not attached):\n##   [1] RColorBrewer_1.1-3     rstudioapi_0.15.0      jsonlite_1.8.7        \n##   [4] shape_1.4.6            magrittr_2.0.3         spatstat.utils_3.0-3  \n##   [7] ggbeeswarm_0.7.2       farver_2.1.1           rmarkdown_2.23        \n##  [10] GlobalOptions_0.1.2    vctrs_0.6.3            ROCR_1.0-11           \n##  [13] spatstat.explore_3.2-1 paletteer_1.5.0        janitor_2.2.0         \n##  [16] htmltools_0.5.5        sctransform_0.3.5      parallelly_1.36.0     \n##  [19] KernSmooth_2.23-21     htmlwidgets_1.6.2      ica_1.0-3             \n##  [22] plyr_1.8.8             plotly_4.10.2          zoo_1.8-12            \n##  [25] igraph_1.5.1           mime_0.12              lifecycle_1.0.3       \n##  [28] pkgconfig_2.0.3        R6_2.5.1               fastmap_1.1.1         \n##  [31] snakecase_0.11.1       fitdistrplus_1.1-11    future_1.33.0         \n##  [34] shiny_1.7.5            digest_0.6.33          colorspace_2.1-0      \n##  [37] rematch2_2.1.2         rprojroot_2.0.3        tensor_1.5            \n##  [40] irlba_2.3.5.1          labeling_0.4.2         progressr_0.14.0      \n##  [43] timechange_0.2.0       fansi_1.0.4            spatstat.sparse_3.0-2 \n##  [46] httr_1.4.6             polyclip_1.10-4        abind_1.4-5           \n##  [49] compiler_4.3.1         withr_2.5.0            R.utils_2.12.2        \n##  [52] MASS_7.3-60            rappdirs_0.3.3         tools_4.3.1           \n##  [55] vipor_0.4.5            lmtest_0.9-40          beeswarm_0.4.0        \n##  [58] httpuv_1.6.11          future.apply_1.11.0    goftest_1.2-3         \n##  [61] R.oo_1.25.0            glue_1.6.2             nlme_3.1-162          \n##  [64] promises_1.2.0.1       grid_4.3.1             Rtsne_0.16            \n##  [67] cluster_2.1.4          reshape2_1.4.4         generics_0.1.3        \n##  [70] gtable_0.3.3           spatstat.data_3.0-1    tzdb_0.4.0            \n##  [73] R.methodsS3_1.8.2      hms_1.1.3              sp_2.0-0              \n##  [76] utf8_1.2.3             spatstat.geom_3.2-4    RcppAnnoy_0.0.21      \n##  [79] ggrepel_0.9.3          RANN_2.6.1             pillar_1.9.0          \n##  [82] limma_3.56.2           ggprism_1.0.4          later_1.3.1           \n##  [85] circlize_0.4.15        splines_4.3.1          lattice_0.21-8        \n##  [88] survival_3.5-5         deldir_1.0-9           tidyselect_1.2.0      \n##  [91] miniUI_0.1.1.1         pbapply_1.7-2          knitr_1.43            \n##  [94] gridExtra_2.3          scattermore_1.2        xfun_0.39             \n##  [97] matrixStats_1.0.0      stringi_1.7.12         lazyeval_0.2.2        \n## [100] yaml_2.3.7             pacman_0.5.1           evaluate_0.21         \n## [103] codetools_0.2-19       cli_3.6.1              uwot_0.1.16           \n## [106] xtable_1.8-4           reticulate_1.30        munsell_0.5.0         \n## [109] Rcpp_1.0.11            globals_0.16.2         spatstat.random_3.1-5 \n## [112] png_0.1-8              ggrastr_1.0.2          parallel_4.3.1        \n## [115] ellipsis_0.3.2         listenv_0.9.0          viridisLite_0.4.2     \n## [118] scales_1.2.1           ggridges_0.5.4         crayon_1.5.2          \n## [121] leiden_0.4.3           rlang_1.1.1            cowplot_1.1.1\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}