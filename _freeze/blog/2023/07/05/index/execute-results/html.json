{
  "hash": "c21f0e7bd6db7aa522500b51077f35e2",
  "result": {
    "markdown": "---\ntitle: \"Learning [ropls] for multivariate analysis and feature selection of omics data\"\ndate: 2023-07-05\n# date-modified: 2023-04-05\ncategories:\n  - r\n  - pca\n  - plsda\n  - supervised\nimage: plsda.png\n---\n\n\nPCA (also called eigenvector analysis) is unsupervised pattern recognition technique mostly utilized as data reduction and modelling technique. It determines the degree or extent to which variables are related. Large data of many variables are unavoidably superfluous and overlap, the use of correlation matrix generally quantifies these anomalies by extracting the eigenvalues and eigenvectors from the square matrix originated by multiplying the data matrix. The purpose of PCA is to find orthogonal variables that capture the maximum amount of variance in the data without considering class information. PCA provide the information about the relationships and patterns and help identify major sources of variation and potential outliers\n\nPLS discriminant analysis is a supervised technique that uses the PLS algorithm to explain and predict the membership of observations to several classes using quantitative or qualitative explanatory variables or parameters. The purpose of PLS-DA is to identify the latent variables that maximize the discrimination between the predefined classes in the data. PLS-DA focus on the the separation of classes in the dataset and provide information on important features that serparate classes.\n\n\n## Packages and Data\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ropls, tidyverse, ggsci)\n\n### load data\ndata(sacurine)\nnames(sacurine)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"dataMatrix\"       \"sampleMetadata\"   \"variableMetadata\" \"se\"              \n[5] \"eset\"            \n```\n:::\n\n```{.r .cell-code}\nattach(sacurine)\nstrF(dataMatrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       dim  class    mode typeof   size NAs  min mean median max\n 183 x 109 matrix numeric double 0.2 Mb   0 -0.3  4.2    4.3   6\n       (2-methoxyethoxy)propanoic acid isomer (gamma)Glu-Leu/Ile ...\nHU_011                            3.019766011        3.888479324 ...\nHU_014                             3.81433889        4.277148905 ...\n...                                       ...                ... ...\nHU_208                            3.748127215        4.523763202 ...\nHU_209                            4.208859398        4.675880567 ...\n       Valerylglycine isomer 2  Xanthosine\nHU_011             3.889078716 4.075879575\nHU_014             4.181765852 4.195761901\n...                        ...         ...\nHU_208             4.634338821 4.487781609\nHU_209              4.47194762 4.222953354\n```\n:::\n\n```{.r .cell-code}\nstrF(variableMetadata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n msiLevel      hmdb chemicalClass\n  numeric character     character\n nRow nCol size NAs\n  109    3 0 Mb   0\n                                       msiLevel      hmdb chemicalClass\n(2-methoxyethoxy)propanoic acid isomer        2                  Organi\n(gamma)Glu-Leu/Ile                            2                  AA-pep\n...                                         ...       ...           ...\nValerylglycine isomer 2                       2           AA-pep:AcyGly\nXanthosine                                    1 HMDB00299        Nucleo\n```\n:::\n\n```{.r .cell-code}\n# View(dataMatrix)\n# View(variableMetadata)\n# View(sampleMetadata)\n```\n:::\n\n\n## PCA\n\n::: {.cell}\n\n```{.r .cell-code}\npca <- opls(dataMatrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPCA\n183 samples x 109 variables\nstandard scaling of predictors\n      R2X(cum) pre ort\nTotal    0.501   8   0\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngenderFc <- sampleMetadata[, \"gender\"]\n\nplot(pca,\n     typeVc = \"x-score\",\n     parAsColFcVn = genderFc,\n     parEllipsesL = TRUE\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnull device \n          1 \n```\n:::\n\n```{.r .cell-code}\nplot(pca,\n     typeVc = \"x-score\",\n     parAsColFcVn = genderFc,\n     parLabVc = as.character(sampleMetadata[, \"age\"]),\n     parPaletteVc = c(\"green4\", \"magenta\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnull device \n          1 \n```\n:::\n:::\n\n\n## PLS-DA\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### PLSDA analysis\nplsda <- opls(dataMatrix, genderFc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPLS-DA\n183 samples x 109 variables and 1 response\nstandard scaling of predictors and response(s)\n      R2X(cum) R2Y(cum) Q2(cum) RMSEE pre ort pR2Y  pQ2\nTotal    0.275     0.73   0.584 0.262   3   0 0.05 0.05\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n### sample scores plot\nsample_score <- plsda@scoreMN |> \n     as.data.frame() |> \n     mutate(gender = sacurine[[\"sampleMetadata\"]][[\"gender\"]])\n### plot\nggplot(sample_score, aes(x = p1, y = p2, color = gender)) +\n    geom_hline(yintercept = 0, linetype = \"dashed\", linewidth = 0.5) +\n    geom_vline(xintercept = 0, linetype = \"dashed\", linewidth = 0.5) +\n    geom_point() +\n    geom_point(aes(x = -10, y = -10), color = \"white\") +\n    labs(x = \"P1(10.0%)\", y = \"P2(9%)\") +\n    stat_ellipse(\n        level = 0.95, linetype = \"solid\", size = 1, show.legend = FALSE\n    ) +\n    scale_color_manual(values = c(\"#3CB371\", \"#FF6347\")) +\n    theme_bw() +\n    theme(\n        legend.position = c(0.9, 0.8),\n        legend.text = element_text(color = \"black\", size = 12, family = \"Arial\", face = \"plain\"),\n        panel.background = element_blank(),\n        panel.grid = element_blank(),\n        axis.text = element_text(color = \"black\", size = 15, family = 'Arial', face = \"plain\"),\n        axis.title = element_text(color = \"black\", size = 15, family = 'Arial', face = \"plain\"),\n        axis.ticks = element_line(color = \"black\")\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### find the discrinminative variable that VIP greater than 1\n\n### VIP scores plot\nvip_score <- as.data.frame(plsda@vipVn)\ncolnames(vip_score)  <- \"vip\"\nvip_score$metabolites <- rownames(vip_score)\nvip_score <- vip_score[order(-vip_score$vip), ]\nvip_score$metabolites <- factor(\n    vip_score$metabolites, levels = vip_score$metabolites)\nloading_score <- plsda@loadingMN |> \n    as.data.frame()\nloading_score$metabolites <- rownames(loading_score)\nall_score <- merge(vip_score, loading_score, by = \"metabolites\")\nall_score$cat <- paste(\"feature\", 1:nrow(all_score), sep = \"\")\n\n### plot\nggplot(all_score[all_score$vip >=1, ], aes(x = cat, y = vip)) + \n    geom_segment(aes(x = cat, xend = cat,\n                    y = 0, yend = vip)) +\n    geom_point(shape = 21, size = 5, color = \"#008000\", fill = \"#008000\")+\n    geom_point(aes(1, 2.5), color = \"white\") +\n    geom_hline(yintercept = 1, linetype = \"dashed\") +\n    scale_y_continuous(expand = c(0, 0)) +\n    labs(x = \"\", y = \"VIP value\") +\n    theme_bw() +\n    theme(\n        legend.position = \"none\",\n        legend.text = element_text(color = \"black\", size = 12, family = \"Arial\", face = \"plain\"),\n        panel.background = element_blank(),\n        panel.grid = element_blank(),\n        axis.text = element_text(color = \"black\", size = 15, family = 'Arial', face = \"plain\"),\n        axis.text.x = element_text(angle = 90),\n        axis.title = element_text(color = \"black\", size = 15, family = 'Arial', face = \"plain\"),\n        axis.ticks = element_line(color = \"black\"),\n        axis.ticks.x = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## OPLS-DA\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### OPLS-DA analysis\noplsda <- opls(dataMatrix, genderFc, predI = 1, orthoI = NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOPLS-DA\n183 samples x 109 variables and 1 response\nstandard scaling of predictors and response(s)\n      R2X(cum) R2Y(cum) Q2(cum) RMSEE pre ort pR2Y  pQ2\nTotal    0.275     0.73   0.602 0.262   1   2 0.05 0.05\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n### sample scores plot\nsample_score <- oplsda@scoreMN |> \n    as.data.frame() |> \n    mutate(\n        gender = sacurine[[\"sampleMetadata\"]][[\"gender\"]],\n        o1 = oplsda@orthoScoreMN[, 1]\n    )\n### plot\nggplot(sample_score, aes(p1, o1, color = gender)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", size = 0.5) +\n  geom_vline(xintercept = 0, linetype = \"dashed\", size = 0.5) +\n  geom_point() +\n  #geom_point(aes(-10,-10), color = 'white') +\n  labs(x = \"P1(5.0%)\", y = \"to1\") +\n  stat_ellipse(level = 0.95, linetype = \"solid\", \n               size = 1, show.legend = FALSE) +\n  scale_color_manual(values = c(\"#3CB371\", \"#FF6347\")) +\n  theme_bw() +\n  theme(legend.position = c(0.1, 0.85),\n        legend.title = element_blank(),\n        legend.text = element_text(color = \"black\", size = 12, family = \"Arial\", \n            face = \"plain\"),\n        panel.background = element_blank(),\n        panel.grid = element_blank(),\n        axis.text = element_text(color = \"black\", size = 15, family = \"Arial\", face = \"plain\"),\n        axis.title = element_text(color = \"black\", size = 15, family = \"Arial\", face = \"plain\"),\n        axis.ticks = element_line(color = 'black'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### VIP scores plot\nvip_score <- as.data.frame(oplsda@vipVn)\ncolnames(vip_score)  <- \"vip\"\nvip_score$metabolites <- rownames(vip_score)\nvip_score <- vip_score[order(-vip_score$vip), ]\nvip_score$metabolites <- factor(\n    vip_score$metabolites, levels = vip_score$metabolites)\nloading_score <- oplsda@loadingMN |> \n    as.data.frame()\nloading_score$metabolites <- rownames(loading_score)\nall_score <- merge(vip_score, loading_score, by = \"metabolites\")\nall_score$cat <- paste(\"feature\", 1:nrow(all_score), sep = \"\")\n\n### plot\nggplot(all_score[all_score$vip >=1, ], aes(x = cat, y = vip)) + \n    geom_segment(aes(x = cat, xend = cat,\n                    y = 0, yend = vip)) +\n    geom_point(shape = 21, size = 5, color = \"#FFA07A\", fill = \"#FFA07A\")+\n    geom_point(aes(1, 2.5), color = \"white\") +\n    geom_hline(yintercept = 1, linetype = \"dashed\") +\n    scale_y_continuous(expand = c(0, 0)) +\n    labs(x = \"\", y = \"VIP value\") +\n    theme_bw() +\n    theme(\n        legend.position = \"none\",\n        legend.text = element_text(color = \"black\", size = 12, family = \"Arial\", face = \"plain\"),\n        panel.background = element_blank(),\n        panel.grid = element_blank(),\n        axis.text = element_text(color = \"black\", size = 15, family = 'Arial', face = \"plain\"),\n        axis.text.x = element_text(angle = 90),\n        axis.title = element_text(color = \"black\", size = 15, family = 'Arial', face = \"plain\"),\n        axis.ticks = element_line(color = \"black\"),\n        axis.ticks.x = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Predict models\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### OPLS-DA model training\noplsda.2  <-  opls(dataMatrix, genderFc, predI = 1, orthoI = NA,subset = \"odd\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'permI' set to 0 because train/test partition is selected\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nOPLS-DA\n92 samples x 109 variables and 1 response\nstandard scaling of predictors and response(s)\n      R2X(cum) R2Y(cum) Q2(cum) RMSEE RMSEP pre ort\nTotal     0.26    0.825   0.608 0.213 0.341   1   2\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n### training dataset  accuracy\ntrainVi  <-  getSubsetVi(oplsda.2)\ntab  <-  table(genderFc[trainVi], fitted(oplsda.2))\nprint(paste(\"model accuracyï¼š\", round(sum(diag(tab))/sum(tab)*100, 2), \"%\", sep = \"\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"model accuracyï¼š100%\"\n```\n:::\n\n```{.r .cell-code}\n### testing dataset accuracy\ntab2  <-  table(genderFc[-trainVi], predict(oplsda.2, dataMatrix[-trainVi, ]))\nprint(paste(\"model accuracyï¼š\", round(sum(diag(tab2))/sum(tab2)*100, 2),'%', sep = ''))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"model accuracyï¼š84.62%\"\n```\n:::\n:::\n\n\n## Other\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# volcano plot\ndf  <-  dataMatrix %>% as.data.frame()\ndf$gender  <-  sacurine[[\"sampleMetadata\"]][[\"gender\"]]\ndf  <-  df[order(df$gender), ]\ndf  <-  df[,-110]\n\nM.mean  <-  apply(df[1:100,], 2, FUN = mean)\nF.mean  <-  apply(df[101:183,], 2, FUN = mean)\n\nFC  <-  M.mean / F.mean\nlog2FC  <-  log(FC, 2)\n\npvalue  <-  apply(df, 2, function(x) {t.test(x[1:100],x[101:183])$p.value})\n\np.adj  <-  p.adjust(pvalue, method = 'BH')\np.adj.log  <-  -log10(p.adj)\n\ncolcano.df  <-  data.frame(log2FC, p.adj, p.adj.log)\ncolcano.df$cat  <-  ifelse(colcano.df$log2FC >= 1 & colcano.df$p.adj < 0.05, \"Up\",\n                        ifelse(colcano.df$log2FC <= -1 & colcano.df$p.adj < 0.05, \"Down\",\"NS\"))\n\nggplot(colcano.df, aes(log2FC, p.adj.log)) +\n    geom_point(colour = \"#A9A9A9\", size = 1) +\n    labs(y = \"-log10(p-value.adj)\") +\n    theme_bw() +\n    scale_x_continuous(limits = c(-2, 2)) +\n    theme(legend.position = 'none',\n        legend.text = element_text(color = 'black', size = 12, family = 'Arial', face = 'plain'),\n        panel.background = element_blank(),\n        panel.grid = element_blank(),\n        axis.text = element_text(color = 'black', size = 15, family = 'Arial', face = 'plain'),\n        axis.text.x = element_text(angle = 90),\n        axis.title = element_text(color = 'black', size = 15, family = 'Arial', face = 'plain'),\n        axis.ticks = element_line(color = 'black'),\n        axis.ticks.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}