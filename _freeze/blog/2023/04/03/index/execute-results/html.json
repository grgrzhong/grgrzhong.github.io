{
  "hash": "01b2ffb8779195fe5932101282d10f63",
  "result": {
    "markdown": "---\ntitle: \"ComplexHeatmap\"\ndate: 2023-04-3\ncategories:\n  - complexheatmap\n  - unsupervised\n  - multivariate\n# image: plot.png\ndraft: true\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# if (!requireNamespace(\"BiocManager\", quietly=TRUE))\n#     install.packages(\"BiocManager\")\n# BiocManager::install(\"ComplexHeatmap\")\n\n# library(ComplexHeatmap)\n# library(RColorBrewer)\n# library(circlize)\n# library(digest)\n# library(cluster)\n# library(tidyverse)\n\n```\n:::\n\n\n### Make simple heatmap\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ### Fetch data\n# tmpfile <- tempfile()\n# download.file('https://github.com/kevinblighe/E-MTAB-6141/raw/master/rdata/mat.tsv',\n#   tmpfile, method = 'auto')\n# mat <- read.table(tmpfile, sep = '\\t', row.names = 1,\n#   header = TRUE, stringsAsFactors = FALSE)\n\n# tmpfile <- tempfile()\n# download.file('https://github.com/kevinblighe/E-MTAB-6141/raw/master/rdata/metadata.tsv',\n#   tmpfile, method = 'auto')\n# metadata <- read.table(tmpfile, sep = '\\t', row.names = 1,\n#   header = TRUE, stringsAsFactors = FALSE)\n\n# tmpfile <- tempfile()\n# download.file('https://github.com/kevinblighe/E-MTAB-6141/raw/master/rdata/sig_genes.list',\n#   tmpfile, method = 'auto')\n# sig_genes <- read.table(tmpfile, sep = '\\t',\n#   header = FALSE, stringsAsFactors = FALSE)[,1]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# digest::digest(mat, algo = 'md5')\n# digest::digest(metadata, algo = 'md5')\n# digest::digest(sig_genes, algo = 'md5')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# dimensions of expression data and metadata, and length of sig_genes\n# dim(mat)\n# first 5 rows; first 5 columns\n# mat[1:5,1:5]\n# head(metadata)\n# take a peek at the genes identified as statistically significant\n# head(sig_genes)\n# length(sig_genes)\n# verify integrity of metadata and expression matrix:\n# --check that both objects are aligned by name\n# all(rownames(metadata) == colnames(mat))\n```\n:::\n\n### Generate heatmap\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### 1. scale the data to Z-scores (by row)\n### standard when performing clustering and generating a heatmap\n# heat <- t(scale(t(mat)))\n# ### 2. set colour scheme and choose breaks\n# myCol <- colorRampPalette(c('dodgerblue', 'black', 'yellow'))(100)\n# myBreaks <- seq(-3, 3, length.out = 100)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ### create annotation: histo-pathotype and histology scores\n#   # CD3\n#     cd3 <- metadata$CD3\n#     cd3 <- cd3[!is.na(cd3)] # remove missing values - we don't want to include these in the mapping\n#     pick.col <- brewer.pal(9, 'Greens')\n#     col.cd3 <- colorRampPalette(pick.col)(length(unique(cd3)))\n\n#   # CD20\n#     cd20 <- metadata$CD20\n#     cd20 <- cd20[!is.na(cd20)]\n#     pick.col <- brewer.pal(9, 'Blues')\n#     col.cd20 <- colorRampPalette(pick.col)(length(unique(cd20)))\n\n#   # CD68L\n#     cd68L <- metadata$CD68L\n#     cd68L <- cd68L[!is.na(cd68L)]\n#     pick.col <- brewer.pal(9, 'Reds')\n#     col.cd68L <- colorRampPalette(pick.col)(length(unique(cd68L)))\n\n#   # CD68SL\n#     cd68SL <- metadata$CD68SL\n#     cd68SL <- cd68L[!is.na(cd68L)]\n#     pick.col <- brewer.pal(9, 'Oranges')\n#     col.cd68SL <- colorRampPalette(pick.col)(length(unique(cd68SL)))\n\n#   # CD138\n#     cd138 <- metadata$CD138\n#     cd138 <- cd138[!is.na(cd138)]\n#     pick.col <- brewer.pal(9, 'Purples')\n#     col.cd138 <- colorRampPalette(pick.col)(length(unique(cd68SL)))\n# ```\n\n# ```{r}\n#   # Create an initial data-frame of the annotation that we want to use\n#   # In this example, the 'ann' object turns out to be the exact same as 'metadata'\n#   ann <- data.frame(\n#     Pathotype = metadata$Pathotype,\n#     CD3 = metadata$CD3,\n#     CD20 = metadata$CD20,\n#     CD68L = metadata$CD68L,\n#     CD68SL = metadata$CD68SL,\n#     CD138 = metadata$CD138,\n#     stringsAsFactors = FALSE)\n\n#   # create the colour mapping\n#   colours <- list(\n#     Pathotype = c('Lymphoid' = 'blue', 'Myeloid' = 'red', 'Fibroid' = 'green3', 'Ungraded' = 'grey'),\n#     CD3 = c('0' = '#F7FCF5', '1' = '#C7E9C0', '2' = '#74C476', '3' = '#238B45', '4' = '#00441B'),\n#     CD20 = c('0' = '#F7FBFF', '1' = '#C6DBEF', '2' = '#6BAED6', '3' = '#2171B5', '4' = '#08306B'),\n#     CD68L = c('0' = '#FFF5F0', '1' = '#FCBBA1', '2' = '#FB6A4A', '3' = '#CB181D', '4' = '#67000D'),\n#     CD68SL = c('0' = '#FFF5EB', '1' = '#FDD0A2', '2' = '#FD8D3C', '3' = '#D94801', '4' = '#7F2704'),\n#     CD138 = c('0' = '#FCFBFD', '1' = '#DADAEB', '2' = '#9E9AC8', '3' = '#6A51A3', '4' = '#3F007D'))\n\n#   # now create the ComplexHeatmap annotation object\n#   # as most of these parameters are self-explanatory, comments will only appear where needed\n#   colAnn <- HeatmapAnnotation(\n#     df = ann,\n#     which = 'col', # 'col' (samples) or 'row' (gene) annotation?\n#     na_col = 'white', # default colour for any NA values in the annotation data-frame, 'ann'\n#     col = colours,\n#     annotation_height = 0.6,\n#     annotation_width = unit(1, 'cm'),\n#     gap = unit(1, 'mm'),\n#     annotation_legend_param = list(\n#       Pathotype = list(\n#         nrow = 4, # number of rows across which the legend will be arranged\n#         title = 'Pathotype',\n#         title_position = 'topcenter',\n#         legend_direction = 'vertical',\n#         title_gp = gpar(fontsize = 12, fontface = 'bold'),\n#         labels_gp = gpar(fontsize = 12, fontface = 'bold')),\n#       CD3 = list(\n#         nrow = 5,\n#         title = 'CD3',\n#         title_position = 'topcenter',\n#         legend_direction = 'vertical',\n#         title_gp = gpar(fontsize = 12, fontface = 'bold'),\n#         labels_gp = gpar(fontsize = 12, fontface = 'bold')),\n#       CD20 = list(\n#         nrow = 5,\n#         title = 'CD20',\n#         title_position = 'topcenter',\n#         legend_direction = 'vertical',\n#         title_gp = gpar(fontsize = 12, fontface = 'bold'),\n#         labels_gp = gpar(fontsize = 12, fontface = 'bold')),\n#       CD68L = list(\n#         nrow = 5,\n#         title = 'CD68L',\n#         title_position = 'topcenter',\n#         legend_direction = 'vertical',\n#         title_gp = gpar(fontsize = 12, fontface = 'bold'),\n#         labels_gp = gpar(fontsize = 12, fontface = 'bold')),\n#       CD68SL = list(\n#         nrow = 5,\n#         title = 'CD68SL',\n#         title_position = 'topcenter',\n#         legend_direction = 'vertical',\n#         title_gp = gpar(fontsize = 12, fontface = 'bold'),\n#         labels_gp = gpar(fontsize = 12, fontface = 'bold')),\n#       CD138 = list(\n#         nrow = 5,\n#         title = 'CD138',\n#         title_position = 'topcenter',\n#         legend_direction = 'vertical',\n#         title_gp = gpar(fontsize = 12, fontface = 'bold'),\n#         labels_gp = gpar(fontsize = 12, fontface = 'bold'))))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#   boxplotCol <- HeatmapAnnotation(\n#     boxplot = anno_boxplot(\n#       heat,\n#       border = FALSE,\n#       gp = gpar(fill = '#CCCCCC'),\n#       pch = '.',\n#       size = unit(2, 'mm'),\n#       axis = TRUE,\n#       axis_param = list(\n#         gp = gpar(fontsize = 12),\n#         side = 'left')),\n#       annotation_width = unit(c(2.0), 'cm'),\n#       which = 'col')\n\n#   boxplotRow <- HeatmapAnnotation(\n#     boxplot = row_anno_boxplot(\n#       heat,\n#       border = FALSE,\n#       gp = gpar(fill = '#CCCCCC'),\n#       pch = '.',\n#       size = unit(2, 'mm'),\n#       axis = TRUE,\n#       axis_param = list(\n#         gp = gpar(fontsize = 12),\n#         side = 'top')),\n#       annotation_width = unit(c(2.0), 'cm'),\n#       which = 'row')\n# ```\n\n# ```{r}\n#   genelabels <- rowAnnotation(\n#     Genes = anno_mark(\n#       at = seq(1, nrow(heat), 40),\n#       labels = rownames(heat)[seq(1, nrow(heat), 40)],\n#       labels_gp = gpar(fontsize = 10, fontface = 'bold'),\n#       padding = 0.75),\n#       width = unit(2.0, 'cm') +\n\n#       max_text_width(\n#         rownames(heat)[seq(1, nrow(heat), 40)],\n#         gp = gpar(fontsize = 10,  fontface = 'bold')))\n# ```\n\n# ```{r}\n#   pamClusters <- cluster::pam(heat, k = 4) # pre-select k = 4 centers\n#   pamClusters$clustering <- paste0('Cluster ', pamClusters$clustering)\n\n#   # fix order of the clusters to have 1 to 4, top to bottom\n#   pamClusters$clustering <- factor(pamClusters$clustering,\n#     levels = c('Cluster 1', 'Cluster 2', 'Cluster 3', 'Cluster 4'))\n```\n:::\n\n### Reference\n\n1. [A simple tutorial for a complex ComplexHeatmap](https://github.com/kevinblighe/E-MTAB-6141)\n2. [ComplexHeatmap Complete Reference](https://jokergoo.github.io/ComplexHeatmap-reference/book/)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}